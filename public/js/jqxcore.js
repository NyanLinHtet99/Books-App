/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/jqwidgets/jqxcore.js":
/*!***********************************************!*\
  !*** ./resources/assets/jqwidgets/jqxcore.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*\r\njQWidgets v16.0.0 (2023-Mar)\r\nCopyright (c) 2011-2023 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n/* eslint-disable */\n\nvar oldBrowser = document.all && !document.addEventListener;\nif (!oldBrowser) {\n  (function (bd, G) {\n    var q,\n      an,\n      ak = bd.document,\n      bo = bd.location,\n      bt = bd.navigator,\n      ax = bd.JQXLite,\n      X = bd.$,\n      aR = Array.prototype.push,\n      aD = Array.prototype.slice,\n      aA = Array.prototype.indexOf,\n      y = Object.prototype.toString,\n      b = Object.prototype.hasOwnProperty,\n      aw = String.prototype.trim,\n      C = function C(bu, bv) {\n        return new C.fn.init(bu, bv, q);\n      },\n      aE = /[\\-+]?(?:\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/.source,\n      at = /\\S/,\n      a8 = /\\s+/,\n      S = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      aF = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/,\n      e = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n      j = /^[\\],:{}\\s]*$/,\n      t = /(?:^|:|,)(?:\\s*\\[)+/g,\n      a5 = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n      K = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/g,\n      au = /^-ms-/,\n      aS = /-([\\da-z])/gi,\n      m = function m(bu, bv) {\n        return (bv + \"\").toUpperCase();\n      },\n      a4 = function a4() {\n        if (ak.addEventListener) {\n          ak.removeEventListener(\"DOMContentLoaded\", a4, false);\n          C.ready();\n        } else {\n          if (ak.readyState === \"complete\") {\n            ak.detachEvent(\"onreadystatechange\", a4);\n            C.ready();\n          }\n        }\n      },\n      a0 = {};\n    C.fn = C.prototype = {\n      constructor: C,\n      init: function init(bu, bx, by) {\n        var bw, bz, bv, bA;\n        if (!bu) {\n          return this;\n        }\n        if (bu.nodeType) {\n          this.context = this[0] = bu;\n          this.length = 1;\n          return this;\n        }\n        if (typeof bu === \"string\") {\n          if (bu.charAt(0) === \"<\" && bu.charAt(bu.length - 1) === \">\" && bu.length >= 3) {\n            bw = [null, bu, null];\n          } else {\n            bw = aF.exec(bu);\n          }\n          if (bw && (bw[1] || !bx)) {\n            if (bw[1]) {\n              bx = bx instanceof C ? bx[0] : bx;\n              bA = bx && bx.nodeType ? bx.ownerDocument || bx : ak;\n              bu = C.parseHTML(bw[1], bA, true);\n              if (e.test(bw[1]) && C.isPlainObject(bx)) {\n                this.attr.call(bu, bx, true);\n              }\n              return C.merge(this, bu);\n            } else {\n              bz = ak.getElementById(bw[2]);\n              if (bz && bz.parentNode) {\n                if (bz.id !== bw[2]) {\n                  return by.find(bu);\n                }\n                this.length = 1;\n                this[0] = bz;\n              }\n              this.context = ak;\n              this.selector = bu;\n              return this;\n            }\n          } else {\n            if (!bx || bx.jqx) {\n              return (bx || by).find(bu);\n            } else {\n              return this.constructor(bx).find(bu);\n            }\n          }\n        } else {\n          if (C.isFunction(bu)) {\n            return by.ready(bu);\n          }\n        }\n        if (bu.selector !== G) {\n          this.selector = bu.selector;\n          this.context = bu.context;\n        }\n        return C.makeArray(bu, this);\n      },\n      selector: \"\",\n      jqx: \"4.5.0\",\n      length: 0,\n      size: function size() {\n        return this.length;\n      },\n      toArray: function toArray() {\n        return aD.call(this);\n      },\n      get: function get(bu) {\n        return bu == null ? this.toArray() : bu < 0 ? this[this.length + bu] : this[bu];\n      },\n      pushStack: function pushStack(bv, bx, bu) {\n        var bw = C.merge(this.constructor(), bv);\n        bw.prevObject = this;\n        bw.context = this.context;\n        if (bx === \"find\") {\n          bw.selector = this.selector + (this.selector ? \" \" : \"\") + bu;\n        } else {\n          if (bx) {\n            bw.selector = this.selector + \".\" + bx + \"(\" + bu + \")\";\n          }\n        }\n        return bw;\n      },\n      each: function each(bv, bu) {\n        return C.each(this, bv, bu);\n      },\n      ready: function ready(bu) {\n        C.ready.promise().done(bu);\n        return this;\n      },\n      eq: function eq(bu) {\n        bu = +bu;\n        return bu === -1 ? this.slice(bu) : this.slice(bu, bu + 1);\n      },\n      first: function first() {\n        return this.eq(0);\n      },\n      last: function last() {\n        return this.eq(-1);\n      },\n      slice: function slice() {\n        return this.pushStack(aD.apply(this, arguments), \"slice\", aD.call(arguments).join(\",\"));\n      },\n      map: function map(bu) {\n        return this.pushStack(C.map(this, function (bw, bv) {\n          return bu.call(bw, bv, bw);\n        }));\n      },\n      end: function end() {\n        return this.prevObject || this.constructor(null);\n      },\n      push: aR,\n      sort: [].sort,\n      splice: [].splice\n    };\n    C.fn.init.prototype = C.fn;\n    C.extend = C.fn.extend = function () {\n      var bD,\n        bw,\n        bu,\n        bv,\n        bA,\n        bB,\n        bz = arguments[0] || {},\n        by = 1,\n        bx = arguments.length,\n        bC = false;\n      if (typeof bz === \"boolean\") {\n        bC = bz;\n        bz = arguments[1] || {};\n        by = 2;\n      }\n      if (_typeof(bz) !== \"object\" && !C.isFunction(bz)) {\n        bz = {};\n      }\n      if (bx === by) {\n        bz = this;\n        --by;\n      }\n      for (; by < bx; by++) {\n        if ((bD = arguments[by]) != null) {\n          for (bw in bD) {\n            bu = bz[bw];\n            bv = bD[bw];\n            if (bz === bv) {\n              continue;\n            }\n            if (bC && bv && (C.isPlainObject(bv) || (bA = C.isArray(bv)))) {\n              if (bA) {\n                bA = false;\n                bB = bu && C.isArray(bu) ? bu : [];\n              } else {\n                bB = bu && C.isPlainObject(bu) ? bu : {};\n              }\n              bz[bw] = C.extend(bC, bB, bv);\n            } else {\n              if (bv !== G) {\n                bz[bw] = bv;\n              }\n            }\n          }\n        }\n      }\n      return bz;\n    };\n    C.extend({\n      noConflict: function noConflict(bu) {\n        if (bd.$ === C) {\n          bd.$ = X;\n        }\n        if (bu && bd.JQXLite === C) {\n          bd.JQXLite = ax;\n        }\n        return C;\n      },\n      isReady: false,\n      readyWait: 1,\n      holdReady: function holdReady(bu) {\n        if (bu) {\n          C.readyWait++;\n        } else {\n          C.ready(true);\n        }\n      },\n      ready: function ready(bu) {\n        if (bu === true ? --C.readyWait : C.isReady) {\n          return;\n        }\n        if (!ak.body) {\n          return setTimeout(C.ready, 1);\n        }\n        C.isReady = true;\n        if (bu !== true && --C.readyWait > 0) {\n          return;\n        }\n        an.resolveWith(ak, [C]);\n        if (C.fn.trigger) {\n          C(ak).trigger(\"ready\").off(\"ready\");\n        }\n      },\n      isFunction: function isFunction(bu) {\n        return C.type(bu) === \"function\";\n      },\n      isArray: Array.isArray || function (bu) {\n        return C.type(bu) === \"array\";\n      },\n      isWindow: function isWindow(bu) {\n        return bu != null && bu == bu.window;\n      },\n      isNumeric: function isNumeric(bu) {\n        return !isNaN(parseFloat(bu)) && isFinite(bu);\n      },\n      type: function type(bu) {\n        return bu == null ? String(bu) : a0[y.call(bu)] || \"object\";\n      },\n      isPlainObject: function isPlainObject(bw) {\n        if (!bw || C.type(bw) !== \"object\" || bw.nodeType || C.isWindow(bw)) {\n          return false;\n        }\n        try {\n          if (bw.constructor && !b.call(bw, \"constructor\") && !b.call(bw.constructor.prototype, \"isPrototypeOf\")) {\n            return false;\n          }\n        } catch (bv) {\n          return false;\n        }\n        var bu;\n        for (bu in bw) {}\n        return bu === G || b.call(bw, bu);\n      },\n      isEmptyObject: function isEmptyObject(bv) {\n        var bu;\n        for (bu in bv) {\n          return false;\n        }\n        return true;\n      },\n      error: function error(bu) {\n        throw new Error(bu);\n      },\n      parseHTML: function parseHTML(bx, bw, bu) {\n        var bv;\n        if (!bx || typeof bx !== \"string\") {\n          return null;\n        }\n        if (typeof bw === \"boolean\") {\n          bu = bw;\n          bw = 0;\n        }\n        bw = bw || ak;\n        if (bv = e.exec(bx)) {\n          return [bw.createElement(bv[1])];\n        }\n        bv = C.buildFragment([bx], bw, bu ? null : []);\n        return C.merge([], (bv.cacheable ? C.clone(bv.fragment) : bv.fragment).childNodes);\n      },\n      parseJSON: function parseJSON(bu) {\n        if (!bu || typeof bu !== \"string\") {\n          return null;\n        }\n        bu = C.trim(bu);\n        if (bd.JSON && bd.JSON.parse) {\n          return bd.JSON.parse(bu);\n        }\n        if (j.test(bu.replace(a5, \"@\").replace(K, \"]\").replace(t, \"\"))) {\n          return new Function(\"return \" + bu)();\n        }\n        C.error(\"Invalid JSON: \" + bu);\n      },\n      parseXML: function parseXML(bw) {\n        var bu, bv;\n        if (!bw || typeof bw !== \"string\") {\n          return null;\n        }\n        try {\n          if (bd.DOMParser) {\n            bv = new DOMParser();\n            bu = bv.parseFromString(bw, \"text/xml\");\n          } else {\n            bu = new ActiveXObject(\"Microsoft.XMLDOM\");\n            bu.async = \"false\";\n            bu.loadXML(bw);\n          }\n        } catch (bx) {\n          bu = G;\n        }\n        if (!bu || !bu.documentElement || bu.getElementsByTagName(\"parsererror\").length) {\n          C.error(\"Invalid XML: \" + bw);\n        }\n        return bu;\n      },\n      noop: function noop() {},\n      globalEval: function globalEval(bu) {\n        if (bu && at.test(bu)) {\n          (bd.execScript || function (bv) {\n            bd[\"eval\"].call(bd, bv);\n          })(bu);\n        }\n      },\n      camelCase: function camelCase(bu) {\n        return bu.replace(au, \"ms-\").replace(aS, m);\n      },\n      nodeName: function nodeName(bv, bu) {\n        return bv.nodeName && bv.nodeName.toLowerCase() === bu.toLowerCase();\n      },\n      each: function each(bz, bA, bw) {\n        var bv,\n          bx = 0,\n          by = bz.length,\n          bu = by === G || C.isFunction(bz);\n        if (bw) {\n          if (bu) {\n            for (bv in bz) {\n              if (bA.apply(bz[bv], bw) === false) {\n                break;\n              }\n            }\n          } else {\n            for (; bx < by;) {\n              if (bA.apply(bz[bx++], bw) === false) {\n                break;\n              }\n            }\n          }\n        } else {\n          if (bu) {\n            for (bv in bz) {\n              if (bA.call(bz[bv], bv, bz[bv]) === false) {\n                break;\n              }\n            }\n          } else {\n            for (; bx < by;) {\n              if (bA.call(bz[bx], bx, bz[bx++]) === false) {\n                break;\n              }\n            }\n          }\n        }\n        return bz;\n      },\n      trim: aw && !aw.call(\"\\uFEFF\\xA0\") ? function (bu) {\n        return bu == null ? \"\" : aw.call(bu);\n      } : function (bu) {\n        return bu == null ? \"\" : (bu + \"\").replace(S, \"\");\n      },\n      makeArray: function makeArray(bu, bw) {\n        var bx,\n          bv = bw || [];\n        if (bu != null) {\n          bx = C.type(bu);\n          if (bu.length == null || bx === \"string\" || bx === \"function\" || bx === \"regexp\" || C.isWindow(bu)) {\n            aR.call(bv, bu);\n          } else {\n            C.merge(bv, bu);\n          }\n        }\n        return bv;\n      },\n      inArray: function inArray(bx, bv, bw) {\n        var bu;\n        if (bv) {\n          if (aA) {\n            return aA.call(bv, bx, bw);\n          }\n          bu = bv.length;\n          bw = bw ? bw < 0 ? Math.max(0, bu + bw) : bw : 0;\n          for (; bw < bu; bw++) {\n            if (bw in bv && bv[bw] === bx) {\n              return bw;\n            }\n          }\n        }\n        return -1;\n      },\n      merge: function merge(by, bw) {\n        var bu = bw.length,\n          bx = by.length,\n          bv = 0;\n        if (typeof bu === \"number\") {\n          for (; bv < bu; bv++) {\n            by[bx++] = bw[bv];\n          }\n        } else {\n          while (bw[bv] !== G) {\n            by[bx++] = bw[bv++];\n          }\n        }\n        by.length = bx;\n        return by;\n      },\n      grep: function grep(bv, bA, bu) {\n        var bz,\n          bw = [],\n          bx = 0,\n          by = bv.length;\n        bu = !!bu;\n        for (; bx < by; bx++) {\n          bz = !!bA(bv[bx], bx);\n          if (bu !== bz) {\n            bw.push(bv[bx]);\n          }\n        }\n        return bw;\n      },\n      map: function map(bu, bB, bC) {\n        var bz,\n          bA,\n          by = [],\n          bw = 0,\n          bv = bu.length,\n          bx = bu instanceof C || bv !== G && typeof bv === \"number\" && (bv > 0 && bu[0] && bu[bv - 1] || bv === 0 || C.isArray(bu));\n        if (bx) {\n          for (; bw < bv; bw++) {\n            bz = bB(bu[bw], bw, bC);\n            if (bz != null) {\n              by[by.length] = bz;\n            }\n          }\n        } else {\n          for (bA in bu) {\n            bz = bB(bu[bA], bA, bC);\n            if (bz != null) {\n              by[by.length] = bz;\n            }\n          }\n        }\n        return by.concat.apply([], by);\n      },\n      guid: 1,\n      proxy: function proxy(by, bx) {\n        var bw, bu, bv;\n        if (typeof bx === \"string\") {\n          bw = by[bx];\n          bx = by;\n          by = bw;\n        }\n        if (!C.isFunction(by)) {\n          return G;\n        }\n        bu = aD.call(arguments, 2);\n        bv = function bv() {\n          return by.apply(bx, bu.concat(aD.call(arguments)));\n        };\n        bv.guid = by.guid = by.guid || C.guid++;\n        return bv;\n      },\n      access: function access(bu, bA, bD, bB, by, bE, bC) {\n        var bw,\n          bz = bD == null,\n          bx = 0,\n          bv = bu.length;\n        if (bD && _typeof(bD) === \"object\") {\n          for (bx in bD) {\n            C.access(bu, bA, bx, bD[bx], 1, bE, bB);\n          }\n          by = 1;\n        } else {\n          if (bB !== G) {\n            bw = bC === G && C.isFunction(bB);\n            if (bz) {\n              if (bw) {\n                bw = bA;\n                bA = function bA(bG, bF, bH) {\n                  return bw.call(C(bG), bH);\n                };\n              } else {\n                bA.call(bu, bB);\n                bA = null;\n              }\n            }\n            if (bA) {\n              for (; bx < bv; bx++) {\n                bA(bu[bx], bD, bw ? bB.call(bu[bx], bx, bA(bu[bx], bD)) : bB, bC);\n              }\n            }\n            by = 1;\n          }\n        }\n        return by ? bu : bz ? bA.call(bu) : bv ? bA(bu[0], bD) : bE;\n      },\n      now: function now() {\n        return new Date().getTime();\n      }\n    });\n    C.ready.promise = function (bx) {\n      if (!an) {\n        an = C.Deferred();\n        if (ak.readyState === \"complete\") {\n          setTimeout(C.ready, 1);\n        } else {\n          if (ak.addEventListener) {\n            ak.addEventListener(\"DOMContentLoaded\", a4, false);\n            bd.addEventListener(\"load\", C.ready, false);\n          } else {\n            ak.attachEvent(\"onreadystatechange\", a4);\n            bd.attachEvent(\"onload\", C.ready);\n            var bw = false;\n            try {\n              bw = bd.frameElement == null && ak.documentElement;\n            } catch (bv) {}\n            if (bw && bw.doScroll) {\n              (function bu() {\n                if (!C.isReady) {\n                  try {\n                    bw.doScroll(\"left\");\n                  } catch (by) {\n                    return setTimeout(bu, 50);\n                  }\n                  C.ready();\n                }\n              })();\n            }\n          }\n        }\n      }\n      return an.promise(bx);\n    };\n    C.each(\"Boolean Number String Function Array Date RegExp Object\".split(\" \"), function (bv, bu) {\n      a0[\"[object \" + bu + \"]\"] = bu.toLowerCase();\n    });\n    q = C(ak);\n    var aX = {};\n    function B(bv) {\n      var bu = aX[bv] = {};\n      C.each(bv.split(a8), function (bx, bw) {\n        bu[bw] = true;\n      });\n      return bu;\n    }\n    C.Callbacks = function (bE) {\n      bE = typeof bE === \"string\" ? aX[bE] || B(bE) : C.extend({}, bE);\n      var bx,\n        bu,\n        by,\n        bw,\n        bz,\n        bA,\n        bB = [],\n        bC = !bE.once && [],\n        bv = function bv(bF) {\n          bx = bE.memory && bF;\n          bu = true;\n          bA = bw || 0;\n          bw = 0;\n          bz = bB.length;\n          by = true;\n          for (; bB && bA < bz; bA++) {\n            if (bB[bA].apply(bF[0], bF[1]) === false && bE.stopOnFalse) {\n              bx = false;\n              break;\n            }\n          }\n          by = false;\n          if (bB) {\n            if (bC) {\n              if (bC.length) {\n                bv(bC.shift());\n              }\n            } else {\n              if (bx) {\n                bB = [];\n              } else {\n                bD.disable();\n              }\n            }\n          }\n        },\n        bD = {\n          add: function add() {\n            if (bB) {\n              var bG = bB.length;\n              (function bF(bH) {\n                C.each(bH, function (bJ, bI) {\n                  var bK = C.type(bI);\n                  if (bK === \"function\") {\n                    if (!bE.unique || !bD.has(bI)) {\n                      bB.push(bI);\n                    }\n                  } else {\n                    if (bI && bI.length && bK !== \"string\") {\n                      bF(bI);\n                    }\n                  }\n                });\n              })(arguments);\n              if (by) {\n                bz = bB.length;\n              } else {\n                if (bx) {\n                  bw = bG;\n                  bv(bx);\n                }\n              }\n            }\n            return this;\n          },\n          remove: function remove() {\n            if (bB) {\n              C.each(arguments, function (bH, bF) {\n                var bG;\n                while ((bG = C.inArray(bF, bB, bG)) > -1) {\n                  bB.splice(bG, 1);\n                  if (by) {\n                    if (bG <= bz) {\n                      bz--;\n                    }\n                    if (bG <= bA) {\n                      bA--;\n                    }\n                  }\n                }\n              });\n            }\n            return this;\n          },\n          has: function has(bF) {\n            return C.inArray(bF, bB) > -1;\n          },\n          empty: function empty() {\n            bB = [];\n            return this;\n          },\n          disable: function disable() {\n            bB = bC = bx = G;\n            return this;\n          },\n          disabled: function disabled() {\n            return !bB;\n          },\n          lock: function lock() {\n            bC = G;\n            if (!bx) {\n              bD.disable();\n            }\n            return this;\n          },\n          locked: function locked() {\n            return !bC;\n          },\n          fireWith: function fireWith(bG, bF) {\n            bF = bF || [];\n            bF = [bG, bF.slice ? bF.slice() : bF];\n            if (bB && (!bu || bC)) {\n              if (by) {\n                bC.push(bF);\n              } else {\n                bv(bF);\n              }\n            }\n            return this;\n          },\n          fire: function fire() {\n            bD.fireWith(this, arguments);\n            return this;\n          },\n          fired: function fired() {\n            return !!bu;\n          }\n        };\n      return bD;\n    };\n    C.extend({\n      Deferred: function Deferred(bw) {\n        var bv = [[\"resolve\", \"done\", C.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", C.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", C.Callbacks(\"memory\")]],\n          bx = \"pending\",\n          by = {\n            state: function state() {\n              return bx;\n            },\n            always: function always() {\n              bu.done(arguments).fail(arguments);\n              return this;\n            },\n            then: function then() {\n              var bz = arguments;\n              return C.Deferred(function (bA) {\n                C.each(bv, function (bC, bB) {\n                  var bE = bB[0],\n                    bD = bz[bC];\n                  bu[bB[1]](C.isFunction(bD) ? function () {\n                    var bF = bD.apply(this, arguments);\n                    if (bF && C.isFunction(bF.promise)) {\n                      bF.promise().done(bA.resolve).fail(bA.reject).progress(bA.notify);\n                    } else {\n                      bA[bE + \"With\"](this === bu ? bA : this, [bF]);\n                    }\n                  } : bA[bE]);\n                });\n                bz = null;\n              }).promise();\n            },\n            promise: function promise(bz) {\n              return bz != null ? C.extend(bz, by) : by;\n            }\n          },\n          bu = {};\n        by.pipe = by.then;\n        C.each(bv, function (bA, bz) {\n          var bC = bz[2],\n            bB = bz[3];\n          by[bz[1]] = bC.add;\n          if (bB) {\n            bC.add(function () {\n              bx = bB;\n            }, bv[bA ^ 1][2].disable, bv[2][2].lock);\n          }\n          bu[bz[0]] = bC.fire;\n          bu[bz[0] + \"With\"] = bC.fireWith;\n        });\n        by.promise(bu);\n        if (bw) {\n          bw.call(bu, bu);\n        }\n        return bu;\n      },\n      when: function when(by) {\n        var bw = 0,\n          bA = aD.call(arguments),\n          bu = bA.length,\n          bv = bu !== 1 || by && C.isFunction(by.promise) ? bu : 0,\n          bD = bv === 1 ? by : C.Deferred(),\n          bx = function bx(bF, bG, bE) {\n            return function (bH) {\n              bG[bF] = this;\n              bE[bF] = arguments.length > 1 ? aD.call(arguments) : bH;\n              if (bE === bC) {\n                bD.notifyWith(bG, bE);\n              } else {\n                if (! --bv) {\n                  bD.resolveWith(bG, bE);\n                }\n              }\n            };\n          },\n          bC,\n          bz,\n          bB;\n        if (bu > 1) {\n          bC = new Array(bu);\n          bz = new Array(bu);\n          bB = new Array(bu);\n          for (; bw < bu; bw++) {\n            if (bA[bw] && C.isFunction(bA[bw].promise)) {\n              bA[bw].promise().done(bx(bw, bB, bA)).fail(bD.reject).progress(bx(bw, bz, bC));\n            } else {\n              --bv;\n            }\n          }\n        }\n        if (!bv) {\n          bD.resolveWith(bB, bA);\n        }\n        return bD.promise();\n      }\n    });\n    C.support = function () {\n      var bG,\n        bF,\n        bD,\n        bE,\n        bx,\n        bC,\n        bB,\n        bz,\n        by,\n        bw,\n        bu,\n        bv = ak.createElement(\"div\");\n      bv.setAttribute(\"className\", \"t\");\n      bv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n      bF = bv.getElementsByTagName(\"*\");\n      bD = bv.getElementsByTagName(\"a\")[0];\n      if (!bF || !bD || !bF.length) {\n        return {};\n      }\n      bE = ak.createElement(\"select\");\n      bx = bE.appendChild(ak.createElement(\"option\"));\n      bC = bv.getElementsByTagName(\"input\")[0];\n      bD.style.cssText = \"top:1px;float:left;opacity:.5\";\n      bG = {\n        leadingWhitespace: bv.firstChild.nodeType === 3,\n        tbody: !bv.getElementsByTagName(\"tbody\").length,\n        htmlSerialize: !!bv.getElementsByTagName(\"link\").length,\n        style: /top/.test(bD.getAttribute(\"style\")),\n        hrefNormalized: bD.getAttribute(\"href\") === \"/a\",\n        opacity: /^0.5/.test(bD.style.opacity),\n        cssFloat: !!bD.style.cssFloat,\n        checkOn: bC.value === \"on\",\n        optSelected: bx.selected,\n        getSetAttribute: bv.className !== \"t\",\n        enctype: !!ak.createElement(\"form\").enctype,\n        html5Clone: ak.createElement(\"nav\").cloneNode(true).outerHTML !== \"<:nav></:nav>\",\n        boxModel: ak.compatMode === \"CSS1Compat\",\n        submitBubbles: true,\n        changeBubbles: true,\n        focusinBubbles: false,\n        deleteExpando: true,\n        noCloneEvent: true,\n        inlineBlockNeedsLayout: false,\n        shrinkWrapBlocks: false,\n        reliableMarginRight: true,\n        boxSizingReliable: true,\n        pixelPosition: false\n      };\n      bC.checked = true;\n      bG.noCloneChecked = bC.cloneNode(true).checked;\n      bE.disabled = true;\n      bG.optDisabled = !bx.disabled;\n      try {\n        delete bv.test;\n      } catch (bA) {\n        bG.deleteExpando = false;\n      }\n      if (!bv.addEventListener && bv.attachEvent && bv.fireEvent) {\n        bv.attachEvent(\"onclick\", bu = function bu() {\n          bG.noCloneEvent = false;\n        });\n        bv.cloneNode(true).fireEvent(\"onclick\");\n        bv.detachEvent(\"onclick\", bu);\n      }\n      bC = ak.createElement(\"input\");\n      bC.value = \"t\";\n      bC.setAttribute(\"type\", \"radio\");\n      bG.radioValue = bC.value === \"t\";\n      bC.setAttribute(\"checked\", \"checked\");\n      bC.setAttribute(\"name\", \"t\");\n      bv.appendChild(bC);\n      bB = ak.createDocumentFragment();\n      bB.appendChild(bv.lastChild);\n      bG.checkClone = bB.cloneNode(true).cloneNode(true).lastChild.checked;\n      bG.appendChecked = bC.checked;\n      bB.removeChild(bC);\n      bB.appendChild(bv);\n      if (bv.attachEvent) {\n        for (by in {\n          submit: true,\n          change: true,\n          focusin: true\n        }) {\n          bz = \"on\" + by;\n          bw = bz in bv;\n          if (!bw) {\n            bv.setAttribute(bz, \"return;\");\n            bw = typeof bv[bz] === \"function\";\n          }\n          bG[by + \"Bubbles\"] = bw;\n        }\n      }\n      C(function () {\n        var bI,\n          bM,\n          bK,\n          bL,\n          bJ = \"padding:0;margin:0;border:0;display:block;overflow:hidden;\",\n          bH = ak.getElementsByTagName(\"body\")[0];\n        if (!bH) {\n          return;\n        }\n        bI = ak.createElement(\"div\");\n        bI.style.cssText = \"visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px\";\n        bH.insertBefore(bI, bH.firstChild);\n        bM = ak.createElement(\"div\");\n        bI.appendChild(bM);\n        bM.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n        bK = bM.getElementsByTagName(\"td\");\n        bK[0].style.cssText = \"padding:0;margin:0;border:0;display:none\";\n        bw = bK[0].offsetHeight === 0;\n        bK[0].style.display = \"\";\n        bK[1].style.display = \"none\";\n        bG.reliableHiddenOffsets = bw && bK[0].offsetHeight === 0;\n        bM.innerHTML = \"\";\n        bM.style.cssText = \"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\";\n        bG.boxSizing = bM.offsetWidth === 4;\n        bG.doesNotIncludeMarginInBodyOffset = bH.offsetTop !== 1;\n        if (bd.getComputedStyle) {\n          bG.pixelPosition = (bd.getComputedStyle(bM, null) || {}).top !== \"1%\";\n          bG.boxSizingReliable = (bd.getComputedStyle(bM, null) || {\n            width: \"4px\"\n          }).width === \"4px\";\n          bL = ak.createElement(\"div\");\n          bL.style.cssText = bM.style.cssText = bJ;\n          bL.style.marginRight = bL.style.width = \"0\";\n          bM.style.width = \"1px\";\n          bM.appendChild(bL);\n          bG.reliableMarginRight = !parseFloat((bd.getComputedStyle(bL, null) || {}).marginRight);\n        }\n        if (typeof bM.style.zoom !== \"undefined\") {\n          bM.innerHTML = \"\";\n          bM.style.cssText = bJ + \"width:1px;padding:1px;display:inline;zoom:1\";\n          bG.inlineBlockNeedsLayout = bM.offsetWidth === 3;\n          bM.style.display = \"block\";\n          bM.style.overflow = \"visible\";\n          bM.innerHTML = \"<div></div>\";\n          bM.firstChild.style.width = \"5px\";\n          bG.shrinkWrapBlocks = bM.offsetWidth !== 3;\n          bI.style.zoom = 1;\n        }\n        bH.removeChild(bI);\n        bI = bM = bK = bL = null;\n      });\n      bB.removeChild(bv);\n      bF = bD = bE = bx = bC = bB = bv = null;\n      return bG;\n    }();\n    var aK = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\n      aq = /([A-Z])/g;\n    C.extend({\n      cache: {},\n      deletedIds: [],\n      uuid: 0,\n      expando: \"JQXLite\" + (C.fn.jqx + Math.random()).replace(/\\D/g, \"\"),\n      noData: {\n        embed: true,\n        object: \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",\n        applet: true\n      },\n      hasData: function hasData(bu) {\n        bu = bu.nodeType ? C.cache[bu[C.expando]] : bu[C.expando];\n        return !!bu && !M(bu);\n      },\n      data: function data(bx, bv, bz, by) {\n        if (!C.acceptData(bx)) {\n          return;\n        }\n        var bA,\n          bC,\n          bD = C.expando,\n          bB = typeof bv === \"string\",\n          bE = bx.nodeType,\n          bu = bE ? C.cache : bx,\n          bw = bE ? bx[bD] : bx[bD] && bD;\n        if ((!bw || !bu[bw] || !by && !bu[bw].data) && bB && bz === G) {\n          return;\n        }\n        if (!bw) {\n          if (bE) {\n            bx[bD] = bw = C.deletedIds.pop() || C.guid++;\n          } else {\n            bw = bD;\n          }\n        }\n        if (!bu[bw]) {\n          bu[bw] = {};\n          if (!bE) {\n            bu[bw].toJSON = C.noop;\n          }\n        }\n        if (_typeof(bv) === \"object\" || typeof bv === \"function\") {\n          if (by) {\n            bu[bw] = C.extend(bu[bw], bv);\n          } else {\n            bu[bw].data = C.extend(bu[bw].data, bv);\n          }\n        }\n        bA = bu[bw];\n        if (!by) {\n          if (!bA.data) {\n            bA.data = {};\n          }\n          bA = bA.data;\n        }\n        if (bz !== G) {\n          bA[C.camelCase(bv)] = bz;\n        }\n        if (bB) {\n          bC = bA[bv];\n          if (bC == null) {\n            bC = bA[C.camelCase(bv)];\n          }\n        } else {\n          bC = bA;\n        }\n        return bC;\n      },\n      removeData: function removeData(bx, bv, by) {\n        if (!C.acceptData(bx)) {\n          return;\n        }\n        var bB,\n          bA,\n          bz,\n          bC = bx.nodeType,\n          bu = bC ? C.cache : bx,\n          bw = bC ? bx[C.expando] : C.expando;\n        if (!bu[bw]) {\n          return;\n        }\n        if (bv) {\n          bB = by ? bu[bw] : bu[bw].data;\n          if (bB) {\n            if (!C.isArray(bv)) {\n              if (bv in bB) {\n                bv = [bv];\n              } else {\n                bv = C.camelCase(bv);\n                if (bv in bB) {\n                  bv = [bv];\n                } else {\n                  bv = bv.split(\" \");\n                }\n              }\n            }\n            for (bA = 0, bz = bv.length; bA < bz; bA++) {\n              delete bB[bv[bA]];\n            }\n            if (!(by ? M : C.isEmptyObject)(bB)) {\n              return;\n            }\n          }\n        }\n        if (!by) {\n          delete bu[bw].data;\n          if (!M(bu[bw])) {\n            return;\n          }\n        }\n        if (bC) {\n          C.cleanData([bx], true);\n        } else {\n          if (C.support.deleteExpando || bu != bu.window) {\n            delete bu[bw];\n          } else {\n            bu[bw] = null;\n          }\n        }\n      },\n      _data: function _data(bv, bu, bw) {\n        return C.data(bv, bu, bw, true);\n      },\n      acceptData: function acceptData(bv) {\n        var bu = bv.nodeName && C.noData[bv.nodeName.toLowerCase()];\n        return !bu || bu !== true && bv.getAttribute(\"classid\") === bu;\n      }\n    });\n    C.fn.extend({\n      data: function data(bD, bC) {\n        var by,\n          bv,\n          bB,\n          bu,\n          bx,\n          bw = this[0],\n          bA = 0,\n          bz = null;\n        if (bD === G) {\n          if (this.length) {\n            bz = C.data(bw);\n            if (bw.nodeType === 1 && !C._data(bw, \"parsedAttrs\")) {\n              bB = bw.attributes;\n              for (bx = bB.length; bA < bx; bA++) {\n                bu = bB[bA].name;\n                if (!bu.indexOf(\"data-\")) {\n                  bu = C.camelCase(bu.substring(5));\n                  a9(bw, bu, bz[bu]);\n                }\n              }\n              C._data(bw, \"parsedAttrs\", true);\n            }\n          }\n          return bz;\n        }\n        if (_typeof(bD) === \"object\") {\n          return this.each(function () {\n            C.data(this, bD);\n          });\n        }\n        by = bD.split(\".\", 2);\n        by[1] = by[1] ? \".\" + by[1] : \"\";\n        bv = by[1] + \"!\";\n        return C.access(this, function (bE) {\n          if (bE === G) {\n            bz = this.triggerHandler(\"getData\" + bv, [by[0]]);\n            if (bz === G && bw) {\n              bz = C.data(bw, bD);\n              bz = a9(bw, bD, bz);\n            }\n            return bz === G && by[1] ? this.data(by[0]) : bz;\n          }\n          by[1] = bE;\n          this.each(function () {\n            var bF = C(this);\n            bF.triggerHandler(\"setData\" + bv, by);\n            C.data(this, bD, bE);\n            bF.triggerHandler(\"changeData\" + bv, by);\n          });\n        }, null, bC, arguments.length > 1, null, false);\n      },\n      removeData: function removeData(bu) {\n        return this.each(function () {\n          C.removeData(this, bu);\n        });\n      }\n    });\n    function a9(bw, bv, bx) {\n      if (bx === G && bw.nodeType === 1) {\n        var bu = \"data-\" + bv.replace(aq, \"-$1\").toLowerCase();\n        bx = bw.getAttribute(bu);\n        if (typeof bx === \"string\") {\n          try {\n            bx = bx === \"true\" ? true : bx === \"false\" ? false : bx === \"null\" ? null : +bx + \"\" === bx ? +bx : aK.test(bx) ? C.parseJSON(bx) : bx;\n          } catch (by) {}\n          C.data(bw, bv, bx);\n        } else {\n          bx = G;\n        }\n      }\n      return bx;\n    }\n    function M(bv) {\n      var bu;\n      for (bu in bv) {\n        if (bu === \"data\" && C.isEmptyObject(bv[bu])) {\n          continue;\n        }\n        if (bu !== \"toJSON\") {\n          return false;\n        }\n      }\n      return true;\n    }\n    C.extend({\n      queue: function queue(bw, bv, bx) {\n        var bu;\n        if (bw) {\n          bv = (bv || \"fx\") + \"queue\";\n          bu = C._data(bw, bv);\n          if (bx) {\n            if (!bu || C.isArray(bx)) {\n              bu = C._data(bw, bv, C.makeArray(bx));\n            } else {\n              bu.push(bx);\n            }\n          }\n          return bu || [];\n        }\n      },\n      dequeue: function dequeue(bz, by) {\n        by = by || \"fx\";\n        var bv = C.queue(bz, by),\n          bA = bv.length,\n          bx = bv.shift(),\n          bu = C._queueHooks(bz, by),\n          bw = function bw() {\n            C.dequeue(bz, by);\n          };\n        if (bx === \"inprogress\") {\n          bx = bv.shift();\n          bA--;\n        }\n        if (bx) {\n          if (by === \"fx\") {\n            bv.unshift(\"inprogress\");\n          }\n          delete bu.stop;\n          bx.call(bz, bw, bu);\n        }\n        if (!bA && bu) {\n          bu.empty.fire();\n        }\n      },\n      _queueHooks: function _queueHooks(bw, bv) {\n        var bu = bv + \"queueHooks\";\n        return C._data(bw, bu) || C._data(bw, bu, {\n          empty: C.Callbacks(\"once memory\").add(function () {\n            C.removeData(bw, bv + \"queue\", true);\n            C.removeData(bw, bu, true);\n          })\n        });\n      }\n    });\n    C.fn.extend({\n      queue: function queue(bu, bv) {\n        var bw = 2;\n        if (typeof bu !== \"string\") {\n          bv = bu;\n          bu = \"fx\";\n          bw--;\n        }\n        if (arguments.length < bw) {\n          return C.queue(this[0], bu);\n        }\n        return bv === G ? this : this.each(function () {\n          var bx = C.queue(this, bu, bv);\n          C._queueHooks(this, bu);\n          if (bu === \"fx\" && bx[0] !== \"inprogress\") {\n            C.dequeue(this, bu);\n          }\n        });\n      },\n      dequeue: function dequeue(bu) {\n        return this.each(function () {\n          C.dequeue(this, bu);\n        });\n      },\n      delay: function delay(bv, bu) {\n        bv = C.fx ? C.fx.speeds[bv] || bv : bv;\n        bu = bu || \"fx\";\n        return this.queue(bu, function (bx, bw) {\n          var by = setTimeout(bx, bv);\n          bw.stop = function () {\n            clearTimeout(by);\n          };\n        });\n      },\n      clearQueue: function clearQueue(bu) {\n        return this.queue(bu || \"fx\", []);\n      },\n      promise: function promise(bw, bA) {\n        var bv,\n          bx = 1,\n          bB = C.Deferred(),\n          bz = this,\n          bu = this.length,\n          by = function by() {\n            if (! --bx) {\n              bB.resolveWith(bz, [bz]);\n            }\n          };\n        if (typeof bw !== \"string\") {\n          bA = bw;\n          bw = G;\n        }\n        bw = bw || \"fx\";\n        while (bu--) {\n          bv = C._data(bz[bu], bw + \"queueHooks\");\n          if (bv && bv.empty) {\n            bx++;\n            bv.empty.add(by);\n          }\n        }\n        by();\n        return bB.promise(bA);\n      }\n    });\n    var bh,\n      aT,\n      ay,\n      aI = /[\\t\\r\\n]/g,\n      aP = /\\r/g,\n      d = /^(?:button|input)$/i,\n      z = /^(?:button|input|object|select|textarea)$/i,\n      h = /^a(?:rea|)$/i,\n      ae = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,\n      A = C.support.getSetAttribute;\n    C.fn.extend({\n      attr: function attr(bu, bv) {\n        return C.access(this, C.attr, bu, bv, arguments.length > 1);\n      },\n      removeAttr: function removeAttr(bu) {\n        return this.each(function () {\n          C.removeAttr(this, bu);\n        });\n      },\n      prop: function prop(bu, bv) {\n        return C.access(this, C.prop, bu, bv, arguments.length > 1);\n      },\n      removeProp: function removeProp(bu) {\n        bu = C.propFix[bu] || bu;\n        return this.each(function () {\n          try {\n            this[bu] = G;\n            delete this[bu];\n          } catch (bv) {}\n        });\n      },\n      addClass: function addClass(by) {\n        var bA, bw, bv, bx, bz, bB, bu;\n        if (C.isFunction(by)) {\n          return this.each(function (bC) {\n            C(this).addClass(by.call(this, bC, this.className));\n          });\n        }\n        if (by && typeof by === \"string\") {\n          bA = by.split(a8);\n          for (bw = 0, bv = this.length; bw < bv; bw++) {\n            bx = this[bw];\n            if (bx.nodeType === 1) {\n              if (!bx.className && bA.length === 1) {\n                bx.className = by;\n              } else {\n                bz = \" \" + bx.className + \" \";\n                for (bB = 0, bu = bA.length; bB < bu; bB++) {\n                  if (bz.indexOf(\" \" + bA[bB] + \" \") < 0) {\n                    bz += bA[bB] + \" \";\n                  }\n                }\n                bx.className = C.trim(bz);\n              }\n            }\n          }\n        }\n        return this;\n      },\n      removeClass: function removeClass(bA) {\n        var bx, by, bz, bB, bv, bw, bu;\n        if (C.isFunction(bA)) {\n          return this.each(function (bC) {\n            C(this).removeClass(bA.call(this, bC, this.className));\n          });\n        }\n        if (bA && typeof bA === \"string\" || bA === G) {\n          bx = (bA || \"\").split(a8);\n          for (bw = 0, bu = this.length; bw < bu; bw++) {\n            bz = this[bw];\n            if (bz.nodeType === 1 && bz.className) {\n              by = (\" \" + bz.className + \" \").replace(aI, \" \");\n              for (bB = 0, bv = bx.length; bB < bv; bB++) {\n                while (by.indexOf(\" \" + bx[bB] + \" \") >= 0) {\n                  by = by.replace(\" \" + bx[bB] + \" \", \" \");\n                }\n              }\n              bz.className = bA ? C.trim(by) : \"\";\n            }\n          }\n        }\n        return this;\n      },\n      toggleClass: function toggleClass(bx, bv) {\n        var bw = _typeof(bx),\n          bu = typeof bv === \"boolean\";\n        if (C.isFunction(bx)) {\n          return this.each(function (by) {\n            C(this).toggleClass(bx.call(this, by, this.className, bv), bv);\n          });\n        }\n        return this.each(function () {\n          if (bw === \"string\") {\n            var bA,\n              bz = 0,\n              by = C(this),\n              bB = bv,\n              bC = bx.split(a8);\n            while (bA = bC[bz++]) {\n              bB = bu ? bB : !by.hasClass(bA);\n              by[bB ? \"addClass\" : \"removeClass\"](bA);\n            }\n          } else {\n            if (bw === \"undefined\" || bw === \"boolean\") {\n              if (this.className) {\n                C._data(this, \"__className__\", this.className);\n              }\n              this.className = this.className || bx === false ? \"\" : C._data(this, \"__className__\") || \"\";\n            }\n          }\n        });\n      },\n      hasClass: function hasClass(bu) {\n        var bx = \" \" + bu + \" \",\n          bw = 0,\n          bv = this.length;\n        for (; bw < bv; bw++) {\n          if (this[bw].nodeType === 1 && (\" \" + this[bw].className + \" \").replace(aI, \" \").indexOf(bx) >= 0) {\n            return true;\n          }\n        }\n        return false;\n      },\n      val: function val(bx) {\n        var bu,\n          bv,\n          by,\n          bw = this[0];\n        if (!arguments.length) {\n          if (bw) {\n            bu = C.valHooks[bw.type] || C.valHooks[bw.nodeName.toLowerCase()];\n            if (bu && \"get\" in bu && (bv = bu.get(bw, \"value\")) !== G) {\n              return bv;\n            }\n            bv = bw.value;\n            return typeof bv === \"string\" ? bv.replace(aP, \"\") : bv == null ? \"\" : bv;\n          }\n          return;\n        }\n        by = C.isFunction(bx);\n        return this.each(function (bA) {\n          var bB,\n            bz = C(this);\n          if (this.nodeType !== 1) {\n            return;\n          }\n          if (by) {\n            bB = bx.call(this, bA, bz.val());\n          } else {\n            bB = bx;\n          }\n          if (bB == null) {\n            bB = \"\";\n          } else {\n            if (typeof bB === \"number\") {\n              bB += \"\";\n            } else {\n              if (C.isArray(bB)) {\n                bB = C.map(bB, function (bC) {\n                  return bC == null ? \"\" : bC + \"\";\n                });\n              }\n            }\n          }\n          bu = C.valHooks[this.type] || C.valHooks[this.nodeName.toLowerCase()];\n          if (!bu || !(\"set\" in bu) || bu.set(this, bB, \"value\") === G) {\n            this.value = bB;\n          }\n        });\n      }\n    });\n    C.extend({\n      valHooks: {\n        option: {\n          get: function get(bu) {\n            var bv = bu.attributes.value;\n            return !bv || bv.specified ? bu.value : bu.text;\n          }\n        },\n        select: {\n          get: function get(bu) {\n            var bA,\n              bw,\n              bC = bu.options,\n              by = bu.selectedIndex,\n              bx = bu.type === \"select-one\" || by < 0,\n              bB = bx ? null : [],\n              bz = bx ? by + 1 : bC.length,\n              bv = by < 0 ? bz : bx ? by : 0;\n            for (; bv < bz; bv++) {\n              bw = bC[bv];\n              if ((bw.selected || bv === by) && (C.support.optDisabled ? !bw.disabled : bw.getAttribute(\"disabled\") === null) && (!bw.parentNode.disabled || !C.nodeName(bw.parentNode, \"optgroup\"))) {\n                bA = C(bw).val();\n                if (bx) {\n                  return bA;\n                }\n                bB.push(bA);\n              }\n            }\n            return bB;\n          },\n          set: function set(bv, bw) {\n            var bu = C.makeArray(bw);\n            C(bv).find(\"option\").each(function () {\n              this.selected = C.inArray(C(this).val(), bu) >= 0;\n            });\n            if (!bu.length) {\n              bv.selectedIndex = -1;\n            }\n            return bu;\n          }\n        }\n      },\n      attrFn: {},\n      attr: function attr(bA, bx, bB, bz) {\n        var bw,\n          bu,\n          by,\n          bv = bA.nodeType;\n        if (!bA || bv === 3 || bv === 8 || bv === 2) {\n          return;\n        }\n        if (bz && C.isFunction(C.fn[bx])) {\n          return C(bA)[bx](bB);\n        }\n        if (typeof bA.getAttribute === \"undefined\") {\n          return C.prop(bA, bx, bB);\n        }\n        by = bv !== 1 || !C.isXMLDoc(bA);\n        if (by) {\n          bx = bx.toLowerCase();\n          bu = C.attrHooks[bx] || (ae.test(bx) ? aT : bh);\n        }\n        if (bB !== G) {\n          if (bB === null) {\n            C.removeAttr(bA, bx);\n            return;\n          } else {\n            if (bu && \"set\" in bu && by && (bw = bu.set(bA, bB, bx)) !== G) {\n              return bw;\n            } else {\n              bA.setAttribute(bx, bB + \"\");\n              return bB;\n            }\n          }\n        } else {\n          if (bu && \"get\" in bu && by && (bw = bu.get(bA, bx)) !== null) {\n            return bw;\n          } else {\n            bw = bA.getAttribute(bx);\n            return bw === null ? G : bw;\n          }\n        }\n      },\n      removeAttr: function removeAttr(bx, bz) {\n        var by,\n          bA,\n          bv,\n          bu,\n          bw = 0;\n        if (bz && bx.nodeType === 1) {\n          bA = bz.split(a8);\n          for (; bw < bA.length; bw++) {\n            bv = bA[bw];\n            if (bv) {\n              by = C.propFix[bv] || bv;\n              bu = ae.test(bv);\n              if (!bu) {\n                C.attr(bx, bv, \"\");\n              }\n              bx.removeAttribute(A ? bv : by);\n              if (bu && by in bx) {\n                bx[by] = false;\n              }\n            }\n          }\n        }\n      },\n      attrHooks: {\n        type: {\n          set: function set(bu, bv) {\n            if (d.test(bu.nodeName) && bu.parentNode) {\n              C.error(\"type property can't be changed\");\n            } else {\n              if (!C.support.radioValue && bv === \"radio\" && C.nodeName(bu, \"input\")) {\n                var bw = bu.value;\n                bu.setAttribute(\"type\", bv);\n                if (bw) {\n                  bu.value = bw;\n                }\n                return bv;\n              }\n            }\n          }\n        },\n        value: {\n          get: function get(bv, bu) {\n            if (bh && C.nodeName(bv, \"button\")) {\n              return bh.get(bv, bu);\n            }\n            return bu in bv ? bv.value : null;\n          },\n          set: function set(bv, bw, bu) {\n            if (bh && C.nodeName(bv, \"button\")) {\n              return bh.set(bv, bw, bu);\n            }\n            bv.value = bw;\n          }\n        }\n      },\n      propFix: {\n        tabindex: \"tabIndex\",\n        readonly: \"readOnly\",\n        \"for\": \"htmlFor\",\n        \"class\": \"className\",\n        maxlength: \"maxLength\",\n        cellspacing: \"cellSpacing\",\n        cellpadding: \"cellPadding\",\n        rowspan: \"rowSpan\",\n        colspan: \"colSpan\",\n        usemap: \"useMap\",\n        frameborder: \"frameBorder\",\n        contenteditable: \"contentEditable\"\n      },\n      prop: function prop(bz, bx, bA) {\n        var bw,\n          bu,\n          by,\n          bv = bz.nodeType;\n        if (!bz || bv === 3 || bv === 8 || bv === 2) {\n          return;\n        }\n        by = bv !== 1 || !C.isXMLDoc(bz);\n        if (by) {\n          bx = C.propFix[bx] || bx;\n          bu = C.propHooks[bx];\n        }\n        if (bA !== G) {\n          if (bu && \"set\" in bu && (bw = bu.set(bz, bA, bx)) !== G) {\n            return bw;\n          } else {\n            return bz[bx] = bA;\n          }\n        } else {\n          if (bu && \"get\" in bu && (bw = bu.get(bz, bx)) !== null) {\n            return bw;\n          } else {\n            return bz[bx];\n          }\n        }\n      },\n      propHooks: {\n        tabIndex: {\n          get: function get(bv) {\n            var bu = bv.getAttributeNode(\"tabindex\");\n            return bu && bu.specified ? parseInt(bu.value, 10) : z.test(bv.nodeName) || h.test(bv.nodeName) && bv.href ? 0 : G;\n          }\n        }\n      }\n    });\n    aT = {\n      get: function get(bv, bu) {\n        var bx,\n          bw = C.prop(bv, bu);\n        return bw === true || typeof bw !== \"boolean\" && (bx = bv.getAttributeNode(bu)) && bx.nodeValue !== false ? bu.toLowerCase() : G;\n      },\n      set: function set(bv, bx, bu) {\n        var bw;\n        if (bx === false) {\n          C.removeAttr(bv, bu);\n        } else {\n          bw = C.propFix[bu] || bu;\n          if (bw in bv) {\n            bv[bw] = true;\n          }\n          bv.setAttribute(bu, bu.toLowerCase());\n        }\n        return bu;\n      }\n    };\n    if (!C.support.enctype) {\n      C.propFix.enctype = \"encoding\";\n    }\n    var bf = /^(?:textarea|input|select)$/i,\n      n = /^([^\\.]*|)(?:\\.(.+)|)$/,\n      F = /(?:^|\\s)hover(\\.\\S+|)\\b/,\n      aH = /^key/,\n      bi = /^(?:mouse|contextmenu)|click/,\n      N = /^(?:focusinfocus|focusoutblur)$/,\n      bs = function bs(bu) {\n        return C.event.special.hover ? bu : bu.replace(F, \"mouseenter$1 mouseleave$1\");\n      };\n    C.event = {\n      add: function add(bx, bB, bI, bz, by) {\n        var bC, _bA, bJ, bH, bG, bE, bu, bF, bv, bw, bD;\n        if (bx.nodeType === 3 || bx.nodeType === 8 || !bB || !bI || !(bC = C._data(bx))) {\n          return;\n        }\n        if (bI.handler) {\n          bv = bI;\n          bI = bv.handler;\n          by = bv.selector;\n        }\n        if (!bI.guid) {\n          bI.guid = C.guid++;\n        }\n        bJ = bC.events;\n        if (!bJ) {\n          bC.events = bJ = {};\n        }\n        _bA = bC.handle;\n        if (!_bA) {\n          bC.handle = _bA = function bA(bK) {\n            return typeof C !== \"undefined\" && (!bK || C.event.triggered !== bK.type) ? C.event.dispatch.apply(_bA.elem, arguments) : G;\n          };\n          _bA.elem = bx;\n        }\n        bB = C.trim(bs(bB)).split(\" \");\n        for (bH = 0; bH < bB.length; bH++) {\n          bG = n.exec(bB[bH]) || [];\n          bE = bG[1];\n          bu = (bG[2] || \"\").split(\".\").sort();\n          bD = C.event.special[bE] || {};\n          bE = (by ? bD.delegateType : bD.bindType) || bE;\n          bD = C.event.special[bE] || {};\n          bF = C.extend({\n            type: bE,\n            origType: bG[1],\n            data: bz,\n            handler: bI,\n            guid: bI.guid,\n            selector: by,\n            needsContext: by && C.expr.match.needsContext.test(by),\n            namespace: bu.join(\".\")\n          }, bv);\n          bw = bJ[bE];\n          if (!bw) {\n            bw = bJ[bE] = [];\n            bw.delegateCount = 0;\n            if (!bD.setup || bD.setup.call(bx, bz, bu, _bA) === false) {\n              if (bx.addEventListener) {\n                if (bz && bz.passive !== G) {\n                  bx.addEventListener(bE, _bA, bz);\n                } else {\n                  bx.addEventListener(bE, _bA, false);\n                }\n              } else {\n                if (bx.attachEvent) {\n                  bx.attachEvent(\"on\" + bE, _bA);\n                }\n              }\n            }\n          }\n          if (bD.add) {\n            bD.add.call(bx, bF);\n            if (!bF.handler.guid) {\n              bF.handler.guid = bI.guid;\n            }\n          }\n          if (by) {\n            bw.splice(bw.delegateCount++, 0, bF);\n          } else {\n            bw.push(bF);\n          }\n          C.event.global[bE] = true;\n        }\n        bx = null;\n      },\n      global: {},\n      remove: function remove(bx, bC, bI, by, bB) {\n        var bJ,\n          bK,\n          bF,\n          bw,\n          bv,\n          bz,\n          bA,\n          bH,\n          bE,\n          bu,\n          bG,\n          bD = C.hasData(bx) && C._data(bx);\n        if (!bD || !(bH = bD.events)) {\n          return;\n        }\n        bC = C.trim(bs(bC || \"\")).split(\" \");\n        for (bJ = 0; bJ < bC.length; bJ++) {\n          bK = n.exec(bC[bJ]) || [];\n          bF = bw = bK[1];\n          bv = bK[2];\n          if (!bF) {\n            for (bF in bH) {\n              C.event.remove(bx, bF + bC[bJ], bI, by, true);\n            }\n            continue;\n          }\n          bE = C.event.special[bF] || {};\n          bF = (by ? bE.delegateType : bE.bindType) || bF;\n          bu = bH[bF] || [];\n          bz = bu.length;\n          bv = bv ? new RegExp(\"(^|\\\\.)\" + bv.split(\".\").sort().join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n          for (bA = 0; bA < bu.length; bA++) {\n            bG = bu[bA];\n            if ((bB || bw === bG.origType) && (!bI || bI.guid === bG.guid) && (!bv || bv.test(bG.namespace)) && (!by || by === bG.selector || by === \"**\" && bG.selector)) {\n              bu.splice(bA--, 1);\n              if (bG.selector) {\n                bu.delegateCount--;\n              }\n              if (bE.remove) {\n                bE.remove.call(bx, bG);\n              }\n            }\n          }\n          if (bu.length === 0 && bz !== bu.length) {\n            if (!bE.teardown || bE.teardown.call(bx, bv, bD.handle) === false) {\n              C.removeEvent(bx, bF, bD.handle);\n            }\n            delete bH[bF];\n          }\n        }\n        if (C.isEmptyObject(bH)) {\n          delete bD.handle;\n          C.removeData(bx, \"events\", true);\n        }\n      },\n      customEvent: {\n        getData: true,\n        setData: true,\n        changeData: true\n      },\n      trigger: function trigger(bv, bC, bA, bJ) {\n        if (bA && (bA.nodeType === 3 || bA.nodeType === 8)) {\n          return;\n        }\n        var bu,\n          bx,\n          bD,\n          bH,\n          bz,\n          by,\n          bF,\n          bE,\n          bB,\n          bI,\n          bG = bv.type || bv,\n          bw = [];\n        if (N.test(bG + C.event.triggered)) {\n          return;\n        }\n        if (bG.indexOf(\"!\") >= 0) {\n          bG = bG.slice(0, -1);\n          bx = true;\n        }\n        if (bG.indexOf(\".\") >= 0) {\n          bw = bG.split(\".\");\n          bG = bw.shift();\n          bw.sort();\n        }\n        if ((!bA || C.event.customEvent[bG]) && !C.event.global[bG]) {\n          return;\n        }\n        bv = _typeof(bv) === \"object\" ? bv[C.expando] ? bv : new C.Event(bG, bv) : new C.Event(bG);\n        bv.type = bG;\n        bv.isTrigger = true;\n        bv.exclusive = bx;\n        bv.namespace = bw.join(\".\");\n        bv.namespace_re = bv.namespace ? new RegExp(\"(^|\\\\.)\" + bw.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n        by = bG.indexOf(\":\") < 0 ? \"on\" + bG : \"\";\n        if (!bA) {\n          bu = C.cache;\n          for (bD in bu) {\n            if (bu[bD].events && bu[bD].events[bG]) {\n              C.event.trigger(bv, bC, bu[bD].handle.elem, true);\n            }\n          }\n          return;\n        }\n        bv.result = G;\n        if (!bv.target) {\n          bv.target = bA;\n        }\n        bC = bC != null ? C.makeArray(bC) : [];\n        bC.unshift(bv);\n        bF = C.event.special[bG] || {};\n        if (bF.trigger && bF.trigger.apply(bA, bC) === false) {\n          return;\n        }\n        bB = [[bA, bF.bindType || bG]];\n        if (!bJ && !bF.noBubble && !C.isWindow(bA)) {\n          bI = bF.delegateType || bG;\n          bH = N.test(bI + bG) ? bA : bA.parentNode;\n          for (bz = bA; bH; bH = bH.parentNode) {\n            bB.push([bH, bI]);\n            bz = bH;\n          }\n          if (bz === (bA.ownerDocument || ak)) {\n            bB.push([bz.defaultView || bz.parentWindow || bd, bI]);\n          }\n        }\n        for (bD = 0; bD < bB.length && !bv.isPropagationStopped(); bD++) {\n          bH = bB[bD][0];\n          bv.type = bB[bD][1];\n          bE = (C._data(bH, \"events\") || {})[bv.type] && C._data(bH, \"handle\");\n          if (bE) {\n            bE.apply(bH, bC);\n          }\n          bE = by && bH[by];\n          if (bE && C.acceptData(bH) && bE.apply && bE.apply(bH, bC) === false) {\n            bv.preventDefault();\n          }\n        }\n        bv.type = bG;\n        if (!bJ && !bv.isDefaultPrevented()) {\n          if ((!bF._default || bF._default.apply(bA.ownerDocument, bC) === false) && !(bG === \"click\" && C.nodeName(bA, \"a\")) && C.acceptData(bA)) {\n            if (by && bA[bG] && (bG !== \"focus\" && bG !== \"blur\" || bv.target.offsetWidth !== 0) && !C.isWindow(bA)) {\n              bz = bA[by];\n              if (bz) {\n                bA[by] = null;\n              }\n              C.event.triggered = bG;\n              bA[bG]();\n              C.event.triggered = G;\n              if (bz) {\n                bA[by] = bz;\n              }\n            }\n          }\n        }\n        return bv.result;\n      },\n      dispatch: function dispatch(bu) {\n        bu = C.event.fix(bu || bd.event);\n        var bB,\n          bA,\n          bK,\n          bE,\n          bD,\n          bv,\n          bC,\n          bI,\n          bx,\n          bJ,\n          by = (C._data(this, \"events\") || {})[bu.type] || [],\n          bz = by.delegateCount,\n          bG = aD.call(arguments),\n          bw = !bu.exclusive && !bu.namespace,\n          bF = C.event.special[bu.type] || {},\n          bH = [];\n        bG[0] = bu;\n        bu.delegateTarget = this;\n        if (bF.preDispatch && bF.preDispatch.call(this, bu) === false) {\n          return;\n        }\n        if (bz && !(bu.button && bu.type === \"click\")) {\n          for (bK = bu.target; bK != this; bK = bK.parentNode || this) {\n            if (bK.disabled !== true || bu.type !== \"click\") {\n              bD = {};\n              bC = [];\n              for (bB = 0; bB < bz; bB++) {\n                bI = by[bB];\n                bx = bI.selector;\n                if (bD[bx] === G) {\n                  bD[bx] = bI.needsContext ? C(bx, this).index(bK) >= 0 : C.find(bx, this, null, [bK]).length;\n                }\n                if (bD[bx]) {\n                  bC.push(bI);\n                }\n              }\n              if (bC.length) {\n                bH.push({\n                  elem: bK,\n                  matches: bC\n                });\n              }\n            }\n          }\n        }\n        if (by.length > bz) {\n          bH.push({\n            elem: this,\n            matches: by.slice(bz)\n          });\n        }\n        for (bB = 0; bB < bH.length && !bu.isPropagationStopped(); bB++) {\n          bv = bH[bB];\n          bu.currentTarget = bv.elem;\n          for (bA = 0; bA < bv.matches.length && !bu.isImmediatePropagationStopped(); bA++) {\n            bI = bv.matches[bA];\n            if (bw || !bu.namespace && !bI.namespace || bu.namespace_re && bu.namespace_re.test(bI.namespace)) {\n              bu.data = bI.data;\n              bu.handleObj = bI;\n              bE = ((C.event.special[bI.origType] || {}).handle || bI.handler).apply(bv.elem, bG);\n              if (bE !== G) {\n                bu.result = bE;\n                if (bE === false) {\n                  bu.preventDefault();\n                  bu.stopPropagation();\n                }\n              }\n            }\n          }\n        }\n        if (bF.postDispatch) {\n          bF.postDispatch.call(this, bu);\n        }\n        return bu.result;\n      },\n      props: \"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n      fixHooks: {},\n      keyHooks: {\n        props: \"char charCode key keyCode\".split(\" \"),\n        filter: function filter(bv, bu) {\n          if (bv.which == null) {\n            bv.which = bu.charCode != null ? bu.charCode : bu.keyCode;\n          }\n          return bv;\n        }\n      },\n      mouseHooks: {\n        props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n        filter: function filter(bx, bw) {\n          var by,\n            bz,\n            bu,\n            bv = bw.button,\n            bA = bw.fromElement;\n          if (bx.pageX == null && bw.clientX != null) {\n            by = bx.target.ownerDocument || ak;\n            bz = by.documentElement;\n            bu = by.body;\n            bx.pageX = bw.clientX + (bz && bz.scrollLeft || bu && bu.scrollLeft || 0) - (bz && bz.clientLeft || bu && bu.clientLeft || 0);\n            bx.pageY = bw.clientY + (bz && bz.scrollTop || bu && bu.scrollTop || 0) - (bz && bz.clientTop || bu && bu.clientTop || 0);\n          }\n          if (!bx.relatedTarget && bA) {\n            bx.relatedTarget = bA === bx.target ? bw.toElement : bA;\n          }\n          if (!bx.which && bv !== G) {\n            bx.which = bv & 1 ? 1 : bv & 2 ? 3 : bv & 4 ? 2 : 0;\n          }\n          return bx;\n        }\n      },\n      fix: function fix(bw) {\n        if (bw[C.expando]) {\n          return bw;\n        }\n        var bv,\n          bz,\n          bu = bw,\n          bx = C.event.fixHooks[bw.type] || {},\n          by = bx.props ? this.props.concat(bx.props) : this.props;\n        bw = C.Event(bu);\n        for (bv = by.length; bv;) {\n          bz = by[--bv];\n          bw[bz] = bu[bz];\n        }\n        if (!bw.target) {\n          bw.target = bu.srcElement || ak;\n        }\n        if (bw.target.nodeType === 3) {\n          bw.target = bw.target.parentNode;\n        }\n        bw.metaKey = !!bw.metaKey;\n        return bx.filter ? bx.filter(bw, bu) : bw;\n      },\n      special: {\n        load: {\n          noBubble: true\n        },\n        focus: {\n          delegateType: \"focusin\"\n        },\n        blur: {\n          delegateType: \"focusout\"\n        },\n        beforeunload: {\n          setup: function setup(bw, bv, bu) {\n            if (C.isWindow(this)) {\n              this.onbeforeunload = bu;\n            }\n          },\n          teardown: function teardown(bv, bu) {\n            if (this.onbeforeunload === bu) {\n              this.onbeforeunload = null;\n            }\n          }\n        }\n      },\n      simulate: function simulate(bv, bx, bw, bu) {\n        var by = C.extend(new C.Event(), bw, {\n          type: bv,\n          isSimulated: true,\n          originalEvent: {}\n        });\n        if (bu) {\n          C.event.trigger(by, null, bx);\n        } else {\n          C.event.dispatch.call(bx, by);\n        }\n        if (by.isDefaultPrevented()) {\n          bw.preventDefault();\n        }\n      }\n    };\n    C.event.handle = C.event.dispatch;\n    C.removeEvent = ak.removeEventListener ? function (bv, bu, bw) {\n      if (bv.removeEventListener) {\n        bv.removeEventListener(bu, bw, false);\n      }\n    } : function (bw, bv, bx) {\n      var bu = \"on\" + bv;\n      if (bw.detachEvent) {\n        if (typeof bw[bu] === \"undefined\") {\n          bw[bu] = null;\n        }\n        bw.detachEvent(bu, bx);\n      }\n    };\n    C.Event = function (bv, bu) {\n      if (!(this instanceof C.Event)) {\n        return new C.Event(bv, bu);\n      }\n      if (bv && bv.type) {\n        this.originalEvent = bv;\n        this.type = bv.type;\n        this.isDefaultPrevented = bv.defaultPrevented || bv.returnValue === false || bv.getPreventDefault && bv.getPreventDefault() ? f : bn;\n      } else {\n        this.type = bv;\n      }\n      if (bu) {\n        C.extend(this, bu);\n      }\n      this.timeStamp = bv && bv.timeStamp || C.now();\n      this[C.expando] = true;\n    };\n    function bn() {\n      return false;\n    }\n    function f() {\n      return true;\n    }\n    C.Event.prototype = {\n      preventDefault: function preventDefault() {\n        this.isDefaultPrevented = f;\n        var bu = this.originalEvent;\n        if (!bu) {\n          return;\n        }\n        if (bu.preventDefault) {\n          bu.preventDefault();\n        } else {\n          bu.returnValue = false;\n        }\n      },\n      stopPropagation: function stopPropagation() {\n        this.isPropagationStopped = f;\n        var bu = this.originalEvent;\n        if (!bu) {\n          return;\n        }\n        if (bu.stopPropagation) {\n          bu.stopPropagation();\n        }\n        bu.cancelBubble = true;\n      },\n      stopImmediatePropagation: function stopImmediatePropagation() {\n        this.isImmediatePropagationStopped = f;\n        this.stopPropagation();\n      },\n      isDefaultPrevented: bn,\n      isPropagationStopped: bn,\n      isImmediatePropagationStopped: bn\n    };\n    C.each({\n      mouseenter: \"mouseover\",\n      mouseleave: \"mouseout\"\n    }, function (bv, bu) {\n      C.event.special[bv] = {\n        delegateType: bu,\n        bindType: bu,\n        handle: function handle(bz) {\n          var bx,\n            bB = this,\n            bA = bz.relatedTarget,\n            by = bz.handleObj,\n            bw = by.selector;\n          if (!bA || bA !== bB && !C.contains(bB, bA)) {\n            bz.type = by.origType;\n            bx = by.handler.apply(this, arguments);\n            bz.type = bu;\n          }\n          return bx;\n        }\n      };\n    });\n    C.fn.extend({\n      on: function on(bw, bu, bz, by, bv) {\n        var bA, bx;\n        if (_typeof(bw) === \"object\") {\n          if (typeof bu !== \"string\") {\n            bz = bz || bu;\n            bu = G;\n          }\n          for (bx in bw) {\n            this.on(bx, bu, bz, bw[bx], bv);\n          }\n          return this;\n        }\n        if (bz == null && by == null) {\n          by = bu;\n          bz = bu = G;\n        } else {\n          if (by == null) {\n            if (typeof bu === \"string\") {\n              by = bz;\n              bz = G;\n            } else {\n              by = bz;\n              bz = bu;\n              bu = G;\n            }\n          }\n        }\n        if (by === false) {\n          by = bn;\n        } else {\n          if (!by) {\n            return this;\n          }\n        }\n        if (bv === 1) {\n          bA = by;\n          by = function by(bB) {\n            C().off(bB);\n            return bA.apply(this, arguments);\n          };\n          by.guid = bA.guid || (bA.guid = C.guid++);\n        }\n        return this.each(function () {\n          C.event.add(this, bw, by, bz, bu);\n        });\n      },\n      off: function off(bw, bu, by) {\n        var bv, bx;\n        if (bw && bw.preventDefault && bw.handleObj) {\n          bv = bw.handleObj;\n          C(bw.delegateTarget).off(bv.namespace ? bv.origType + \".\" + bv.namespace : bv.origType, bv.selector, bv.handler);\n          return this;\n        }\n        if (_typeof(bw) === \"object\") {\n          for (bx in bw) {\n            this.off(bx, bu, bw[bx]);\n          }\n          return this;\n        }\n        if (bu === false || typeof bu === \"function\") {\n          by = bu;\n          bu = G;\n        }\n        if (by === false) {\n          by = bn;\n        }\n        return this.each(function () {\n          C.event.remove(this, bw, by, bu);\n        });\n      },\n      delegate: function delegate(bu, bv, bx, bw) {\n        return this.on(bv, bu, bx, bw);\n      },\n      undelegate: function undelegate(bu, bv, bw) {\n        return arguments.length === 1 ? this.off(bu, \"**\") : this.off(bv, bu || \"**\", bw);\n      },\n      trigger: function trigger(bu, bv) {\n        return this.each(function () {\n          C.event.trigger(bu, bv, this);\n        });\n      },\n      triggerHandler: function triggerHandler(bu, bv) {\n        if (this[0]) {\n          return C.event.trigger(bu, bv, this[0], true);\n        }\n      },\n      toggle: function toggle(bx) {\n        var bv = arguments,\n          bu = bx.guid || C.guid++,\n          bw = 0,\n          by = function by(bz) {\n            var bA = (C._data(this, \"lastToggle\" + bx.guid) || 0) % bw;\n            C._data(this, \"lastToggle\" + bx.guid, bA + 1);\n            bz.preventDefault();\n            return bv[bA].apply(this, arguments) || false;\n          };\n        by.guid = bu;\n        while (bw < bv.length) {\n          bv[bw++].guid = bu;\n        }\n        return this.click(by);\n      },\n      hover: function hover(bu, bv) {\n        return this.mouseenter(bu).mouseleave(bv || bu);\n      }\n    });\n    C.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"), function (bv, bu) {\n      C.fn[bu] = function (bx, bw) {\n        if (bw == null) {\n          bw = bx;\n          bx = null;\n        }\n        return arguments.length > 0 ? this.on(bu, null, bx, bw) : this.trigger(bu);\n      };\n      if (aH.test(bu)) {\n        C.event.fixHooks[bu] = C.event.keyHooks;\n      }\n      if (bi.test(bu)) {\n        C.event.fixHooks[bu] = C.event.mouseHooks;\n      }\n    });\n    /*!\n             * Sizzle CSS Selector Engine\n             * Copyright 2012 JQXLite Foundation and other contributors\n             * Released under the MIT license\n             * http://sizzlejs.com/\n             */\n    (function (cn, bM) {\n      var cs,\n        bF,\n        cg,\n        bv,\n        bR,\n        b5,\n        bI,\n        bL,\n        bH,\n        ce,\n        bE = true,\n        bZ = \"undefined\",\n        cu = (\"sizcache\" + Math.random()).replace(\".\", \"\"),\n        bz = String,\n        bD = cn.document,\n        bG = bD.documentElement,\n        bW = 0,\n        bK = 0,\n        b9 = [].pop,\n        cr = [].push,\n        bQ = [].slice,\n        bT = [].indexOf || function (cE) {\n          var cD = 0,\n            cC = this.length;\n          for (; cD < cC; cD++) {\n            if (this[cD] === cE) {\n              return cD;\n            }\n          }\n          return -1;\n        },\n        cw = function cw(cC, cD) {\n          cC[cu] = cD == null || cD;\n          return cC;\n        },\n        cA = function cA() {\n          var cC = {},\n            cD = [];\n          return cw(function (cE, cF) {\n            if (cD.push(cE) > cg.cacheLength) {\n              delete cC[cD.shift()];\n            }\n            return cC[cE + \" \"] = cF;\n          }, cC);\n        },\n        cp = cA(),\n        cq = cA(),\n        bS = cA(),\n        b3 = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        bP = \"(?:\\\\\\\\.|[-\\\\w]|[^\\\\x00-\\\\xa0])+\",\n        bN = bP.replace(\"w\", \"w#\"),\n        cz = \"([*^$|!~]?=)\",\n        ck = \"\\\\[\" + b3 + \"*(\" + bP + \")\" + b3 + \"*(?:\" + cz + b3 + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + bN + \")|)|)\" + b3 + \"*\\\\]\",\n        cB = \":(\" + bP + \")(?:\\\\((?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\2|([^()[\\\\]]*|(?:(?:\" + ck + \")|[^:]|\\\\\\\\.)*|.*))\\\\)|)\",\n        b4 = \":(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + b3 + \"*((?:-\\\\d)?\\\\d*)\" + b3 + \"*\\\\)|)(?=[^-]|$)\",\n        co = new RegExp(\"^\" + b3 + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + b3 + \"+$\", \"g\"),\n        bA = new RegExp(\"^\" + b3 + \"*,\" + b3 + \"*\"),\n        cc = new RegExp(\"^\" + b3 + \"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\" + b3 + \"*\"),\n        ch = new RegExp(cB),\n        cj = /^(?:#([\\w\\-]+)|(\\w+)|\\.([\\w\\-]+))$/,\n        b8 = /^:not/,\n        cm = /[\\x20\\t\\r\\n\\f]*[+~]/,\n        cv = /:not\\($/,\n        bX = /h\\d/i,\n        ci = /input|select|textarea|button/i,\n        bY = /\\\\(?!\\\\)/g,\n        cb = {\n          ID: new RegExp(\"^#(\" + bP + \")\"),\n          CLASS: new RegExp(\"^\\\\.(\" + bP + \")\"),\n          NAME: new RegExp(\"^\\\\[name=['\\\"]?(\" + bP + \")['\\\"]?\\\\]\"),\n          TAG: new RegExp(\"^(\" + bP.replace(\"w\", \"w*\") + \")\"),\n          ATTR: new RegExp(\"^\" + ck),\n          PSEUDO: new RegExp(\"^\" + cB),\n          POS: new RegExp(b4, \"i\"),\n          CHILD: new RegExp(\"^:(only|nth|first|last)-child(?:\\\\(\" + b3 + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + b3 + \"*(?:([+-]|)\" + b3 + \"*(\\\\d+)|))\" + b3 + \"*\\\\)|)\", \"i\"),\n          needsContext: new RegExp(\"^\" + b3 + \"*[>+~]|\" + b4, \"i\")\n        },\n        cf = function cf(cC) {\n          var cE = bD.createElement(\"div\");\n          try {\n            return cC(cE);\n          } catch (cD) {\n            return false;\n          } finally {\n            cE = null;\n          }\n        },\n        bC = cf(function (cC) {\n          cC.appendChild(bD.createComment(\"\"));\n          return !cC.getElementsByTagName(\"*\").length;\n        }),\n        b7 = cf(function (cC) {\n          cC.innerHTML = \"<a href='#'></a>\";\n          return cC.firstChild && _typeof(cC.firstChild.getAttribute) !== bZ && cC.firstChild.getAttribute(\"href\") === \"#\";\n        }),\n        bV = cf(function (cD) {\n          cD.innerHTML = \"<select></select>\";\n          var cC = _typeof(cD.lastChild.getAttribute(\"multiple\"));\n          return cC !== \"boolean\" && cC !== \"string\";\n        }),\n        b6 = cf(function (cC) {\n          cC.innerHTML = \"<div class='hidden e'></div><div class='hidden'></div>\";\n          if (!cC.getElementsByClassName || !cC.getElementsByClassName(\"e\").length) {\n            return false;\n          }\n          cC.lastChild.className = \"e\";\n          return cC.getElementsByClassName(\"e\").length === 2;\n        }),\n        bu = cf(function (cD) {\n          cD.id = cu + 0;\n          cD.innerHTML = \"<a name='\" + cu + \"'></a><div name='\" + cu + \"'></div>\";\n          bG.insertBefore(cD, bG.firstChild);\n          var cC = bD.getElementsByName && bD.getElementsByName(cu).length === 2 + bD.getElementsByName(cu + 0).length;\n          bF = !bD.getElementById(cu);\n          bG.removeChild(cD);\n          return cC;\n        });\n      try {\n        bQ.call(bG.childNodes, 0)[0].nodeType;\n      } catch (cy) {\n        bQ = function bQ(cD) {\n          var cE,\n            cC = [];\n          for (; cE = this[cD]; cD++) {\n            cC.push(cE);\n          }\n          return cC;\n        };\n      }\n      function cl(cF, cC, cH, cK) {\n        cH = cH || [];\n        cC = cC || bD;\n        var cI,\n          cD,\n          cJ,\n          cE,\n          cG = cC.nodeType;\n        if (!cF || typeof cF !== \"string\") {\n          return cH;\n        }\n        if (cG !== 1 && cG !== 9) {\n          return [];\n        }\n        cJ = bR(cC);\n        if (!cJ && !cK) {\n          if (cI = cj.exec(cF)) {\n            if (cE = cI[1]) {\n              if (cG === 9) {\n                cD = cC.getElementById(cE);\n                if (cD && cD.parentNode) {\n                  if (cD.id === cE) {\n                    cH.push(cD);\n                    return cH;\n                  }\n                } else {\n                  return cH;\n                }\n              } else {\n                if (cC.ownerDocument && (cD = cC.ownerDocument.getElementById(cE)) && b5(cC, cD) && cD.id === cE) {\n                  cH.push(cD);\n                  return cH;\n                }\n              }\n            } else {\n              if (cI[2]) {\n                cr.apply(cH, bQ.call(cC.getElementsByTagName(cF), 0));\n                return cH;\n              } else {\n                if ((cE = cI[3]) && b6 && cC.getElementsByClassName) {\n                  cr.apply(cH, bQ.call(cC.getElementsByClassName(cE), 0));\n                  return cH;\n                }\n              }\n            }\n          }\n        }\n        return ct(cF.replace(co, \"$1\"), cC, cH, cK, cJ);\n      }\n      cl.matches = function (cD, cC) {\n        return cl(cD, null, null, cC);\n      };\n      cl.matchesSelector = function (cC, cD) {\n        return cl(cD, null, null, [cC]).length > 0;\n      };\n      function cd(cC) {\n        return function (cE) {\n          var cD = cE.nodeName.toLowerCase();\n          return cD === \"input\" && cE.type === cC;\n        };\n      }\n      function by(cC) {\n        return function (cE) {\n          var cD = cE.nodeName.toLowerCase();\n          return (cD === \"input\" || cD === \"button\") && cE.type === cC;\n        };\n      }\n      function ca(cC) {\n        return cw(function (cD) {\n          cD = +cD;\n          return cw(function (cE, cI) {\n            var cG,\n              cF = cC([], cE.length, cD),\n              cH = cF.length;\n            while (cH--) {\n              if (cE[cG = cF[cH]]) {\n                cE[cG] = !(cI[cG] = cE[cG]);\n              }\n            }\n          });\n        });\n      }\n      bv = cl.getText = function (cG) {\n        var cF,\n          cD = \"\",\n          cE = 0,\n          cC = cG.nodeType;\n        if (cC) {\n          if (cC === 1 || cC === 9 || cC === 11) {\n            if (typeof cG.textContent === \"string\") {\n              return cG.textContent;\n            } else {\n              for (cG = cG.firstChild; cG; cG = cG.nextSibling) {\n                cD += bv(cG);\n              }\n            }\n          } else {\n            if (cC === 3 || cC === 4) {\n              return cG.nodeValue;\n            }\n          }\n        } else {\n          for (; cF = cG[cE]; cE++) {\n            cD += bv(cF);\n          }\n        }\n        return cD;\n      };\n      bR = cl.isXML = function (cC) {\n        var cD = cC && (cC.ownerDocument || cC).documentElement;\n        return cD ? cD.nodeName !== \"HTML\" : false;\n      };\n      b5 = cl.contains = bG.contains ? function (cD, cC) {\n        var cF = cD.nodeType === 9 ? cD.documentElement : cD,\n          cE = cC && cC.parentNode;\n        return cD === cE || !!(cE && cE.nodeType === 1 && cF.contains && cF.contains(cE));\n      } : bG.compareDocumentPosition ? function (cD, cC) {\n        return cC && !!(cD.compareDocumentPosition(cC) & 16);\n      } : function (cD, cC) {\n        while (cC = cC.parentNode) {\n          if (cC === cD) {\n            return true;\n          }\n        }\n        return false;\n      };\n      cl.attr = function (cE, cD) {\n        var cF,\n          cC = bR(cE);\n        if (!cC) {\n          cD = cD.toLowerCase();\n        }\n        if (cF = cg.attrHandle[cD]) {\n          return cF(cE);\n        }\n        if (cC || bV) {\n          return cE.getAttribute(cD);\n        }\n        cF = cE.getAttributeNode(cD);\n        return cF ? typeof cE[cD] === \"boolean\" ? cE[cD] ? cD : null : cF.specified ? cF.value : null : null;\n      };\n      cg = cl.selectors = {\n        cacheLength: 50,\n        createPseudo: cw,\n        match: cb,\n        attrHandle: b7 ? {} : {\n          href: function href(cC) {\n            return cC.getAttribute(\"href\", 2);\n          },\n          type: function type(cC) {\n            return cC.getAttribute(\"type\");\n          }\n        },\n        find: {\n          ID: bF ? function (cF, cE, cD) {\n            if (_typeof(cE.getElementById) !== bZ && !cD) {\n              var cC = cE.getElementById(cF);\n              return cC && cC.parentNode ? [cC] : [];\n            }\n          } : function (cF, cE, cD) {\n            if (_typeof(cE.getElementById) !== bZ && !cD) {\n              var cC = cE.getElementById(cF);\n              return cC ? cC.id === cF || _typeof(cC.getAttributeNode) !== bZ && cC.getAttributeNode(\"id\").value === cF ? [cC] : bM : [];\n            }\n          },\n          TAG: bC ? function (cC, cD) {\n            if (_typeof(cD.getElementsByTagName) !== bZ) {\n              return cD.getElementsByTagName(cC);\n            }\n          } : function (cC, cG) {\n            var cF = cG.getElementsByTagName(cC);\n            if (cC === \"*\") {\n              var cH,\n                cE = [],\n                cD = 0;\n              for (; cH = cF[cD]; cD++) {\n                if (cH.nodeType === 1) {\n                  cE.push(cH);\n                }\n              }\n              return cE;\n            }\n            return cF;\n          },\n          NAME: bu && function (cC, cD) {\n            if (_typeof(cD.getElementsByName) !== bZ) {\n              return cD.getElementsByName(name);\n            }\n          },\n          CLASS: b6 && function (cE, cD, cC) {\n            if (_typeof(cD.getElementsByClassName) !== bZ && !cC) {\n              return cD.getElementsByClassName(cE);\n            }\n          }\n        },\n        relative: {\n          \">\": {\n            dir: \"parentNode\",\n            first: true\n          },\n          \" \": {\n            dir: \"parentNode\"\n          },\n          \"+\": {\n            dir: \"previousSibling\",\n            first: true\n          },\n          \"~\": {\n            dir: \"previousSibling\"\n          }\n        },\n        preFilter: {\n          ATTR: function ATTR(cC) {\n            cC[1] = cC[1].replace(bY, \"\");\n            cC[3] = (cC[4] || cC[5] || \"\").replace(bY, \"\");\n            if (cC[2] === \"~=\") {\n              cC[3] = \" \" + cC[3] + \" \";\n            }\n            return cC.slice(0, 4);\n          },\n          CHILD: function CHILD(cC) {\n            cC[1] = cC[1].toLowerCase();\n            if (cC[1] === \"nth\") {\n              if (!cC[2]) {\n                cl.error(cC[0]);\n              }\n              cC[3] = +(cC[3] ? cC[4] + (cC[5] || 1) : 2 * (cC[2] === \"even\" || cC[2] === \"odd\"));\n              cC[4] = +(cC[6] + cC[7] || cC[2] === \"odd\");\n            } else {\n              if (cC[2]) {\n                cl.error(cC[0]);\n              }\n            }\n            return cC;\n          },\n          PSEUDO: function PSEUDO(cD) {\n            var cE, cC;\n            if (cb.CHILD.test(cD[0])) {\n              return null;\n            }\n            if (cD[3]) {\n              cD[2] = cD[3];\n            } else {\n              if (cE = cD[4]) {\n                if (ch.test(cE) && (cC = bw(cE, true)) && (cC = cE.indexOf(\")\", cE.length - cC) - cE.length)) {\n                  cE = cE.slice(0, cC);\n                  cD[0] = cD[0].slice(0, cC);\n                }\n                cD[2] = cE;\n              }\n            }\n            return cD.slice(0, 3);\n          }\n        },\n        filter: {\n          ID: bF ? function (cC) {\n            cC = cC.replace(bY, \"\");\n            return function (cD) {\n              return cD.getAttribute(\"id\") === cC;\n            };\n          } : function (cC) {\n            cC = cC.replace(bY, \"\");\n            return function (cE) {\n              var cD = _typeof(cE.getAttributeNode) !== bZ && cE.getAttributeNode(\"id\");\n              return cD && cD.value === cC;\n            };\n          },\n          TAG: function TAG(cC) {\n            if (cC === \"*\") {\n              return function () {\n                return true;\n              };\n            }\n            cC = cC.replace(bY, \"\").toLowerCase();\n            return function (cD) {\n              return cD.nodeName && cD.nodeName.toLowerCase() === cC;\n            };\n          },\n          CLASS: function CLASS(cC) {\n            var cD = cp[cu][cC + \" \"];\n            return cD || (cD = new RegExp(\"(^|\" + b3 + \")\" + cC + \"(\" + b3 + \"|$)\")) && cp(cC, function (cE) {\n              return cD.test(cE.className || _typeof(cE.getAttribute) !== bZ && cE.getAttribute(\"class\") || \"\");\n            });\n          },\n          ATTR: function ATTR(cE, cD, cC) {\n            return function (cH, cG) {\n              var cF = cl.attr(cH, cE);\n              if (cF == null) {\n                return cD === \"!=\";\n              }\n              if (!cD) {\n                return true;\n              }\n              cF += \"\";\n              return cD === \"=\" ? cF === cC : cD === \"!=\" ? cF !== cC : cD === \"^=\" ? cC && cF.indexOf(cC) === 0 : cD === \"*=\" ? cC && cF.indexOf(cC) > -1 : cD === \"$=\" ? cC && cF.substr(cF.length - cC.length) === cC : cD === \"~=\" ? (\" \" + cF + \" \").indexOf(cC) > -1 : cD === \"|=\" ? cF === cC || cF.substr(0, cC.length + 1) === cC + \"-\" : false;\n            };\n          },\n          CHILD: function CHILD(cC, cE, cF, cD) {\n            if (cC === \"nth\") {\n              return function (cI) {\n                var cH,\n                  cJ,\n                  cG = cI.parentNode;\n                if (cF === 1 && cD === 0) {\n                  return true;\n                }\n                if (cG) {\n                  cJ = 0;\n                  for (cH = cG.firstChild; cH; cH = cH.nextSibling) {\n                    if (cH.nodeType === 1) {\n                      cJ++;\n                      if (cI === cH) {\n                        break;\n                      }\n                    }\n                  }\n                }\n                cJ -= cD;\n                return cJ === cF || cJ % cF === 0 && cJ / cF >= 0;\n              };\n            }\n            return function (cH) {\n              var cG = cH;\n              switch (cC) {\n                case \"only\":\n                case \"first\":\n                  while (cG = cG.previousSibling) {\n                    if (cG.nodeType === 1) {\n                      return false;\n                    }\n                  }\n                  if (cC === \"first\") {\n                    return true;\n                  }\n                  cG = cH;\n                case \"last\":\n                  while (cG = cG.nextSibling) {\n                    if (cG.nodeType === 1) {\n                      return false;\n                    }\n                  }\n                  return true;\n              }\n            };\n          },\n          PSEUDO: function PSEUDO(cF, cE) {\n            var cC,\n              cD = cg.pseudos[cF] || cg.setFilters[cF.toLowerCase()] || cl.error(\"unsupported pseudo: \" + cF);\n            if (cD[cu]) {\n              return cD(cE);\n            }\n            if (cD.length > 1) {\n              cC = [cF, cF, \"\", cE];\n              return cg.setFilters.hasOwnProperty(cF.toLowerCase()) ? cw(function (cI, cK) {\n                var cH,\n                  cG = cD(cI, cE),\n                  cJ = cG.length;\n                while (cJ--) {\n                  cH = bT.call(cI, cG[cJ]);\n                  cI[cH] = !(cK[cH] = cG[cJ]);\n                }\n              }) : function (cG) {\n                return cD(cG, 0, cC);\n              };\n            }\n            return cD;\n          }\n        },\n        pseudos: {\n          not: cw(function (cC) {\n            var cD = [],\n              cE = [],\n              cF = bI(cC.replace(co, \"$1\"));\n            return cF[cu] ? cw(function (cH, cM, cK, cI) {\n              var cL,\n                cG = cF(cH, null, cI, []),\n                cJ = cH.length;\n              while (cJ--) {\n                if (cL = cG[cJ]) {\n                  cH[cJ] = !(cM[cJ] = cL);\n                }\n              }\n            }) : function (cI, cH, cG) {\n              cD[0] = cI;\n              cF(cD, null, cG, cE);\n              return !cE.pop();\n            };\n          }),\n          has: cw(function (cC) {\n            return function (cD) {\n              return cl(cC, cD).length > 0;\n            };\n          }),\n          contains: cw(function (cC) {\n            return function (cD) {\n              return (cD.textContent || cD.innerText || bv(cD)).indexOf(cC) > -1;\n            };\n          }),\n          enabled: function enabled(cC) {\n            return cC.disabled === false;\n          },\n          disabled: function disabled(cC) {\n            return cC.disabled === true;\n          },\n          checked: function checked(cC) {\n            var cD = cC.nodeName.toLowerCase();\n            return cD === \"input\" && !!cC.checked || cD === \"option\" && !!cC.selected;\n          },\n          selected: function selected(cC) {\n            if (cC.parentNode) {\n              cC.parentNode.selectedIndex;\n            }\n            return cC.selected === true;\n          },\n          parent: function parent(cC) {\n            return !cg.pseudos.empty(cC);\n          },\n          empty: function empty(cD) {\n            var cC;\n            cD = cD.firstChild;\n            while (cD) {\n              if (cD.nodeName > \"@\" || (cC = cD.nodeType) === 3 || cC === 4) {\n                return false;\n              }\n              cD = cD.nextSibling;\n            }\n            return true;\n          },\n          header: function header(cC) {\n            return bX.test(cC.nodeName);\n          },\n          text: function text(cE) {\n            var cD, cC;\n            return cE.nodeName.toLowerCase() === \"input\" && (cD = cE.type) === \"text\" && ((cC = cE.getAttribute(\"type\")) == null || cC.toLowerCase() === cD);\n          },\n          radio: cd(\"radio\"),\n          checkbox: cd(\"checkbox\"),\n          file: cd(\"file\"),\n          password: cd(\"password\"),\n          image: cd(\"image\"),\n          submit: by(\"submit\"),\n          reset: by(\"reset\"),\n          button: function button(cD) {\n            var cC = cD.nodeName.toLowerCase();\n            return cC === \"input\" && cD.type === \"button\" || cC === \"button\";\n          },\n          input: function input(cC) {\n            return ci.test(cC.nodeName);\n          },\n          focus: function focus(cC) {\n            var cD = cC.ownerDocument;\n            return cC === cD.activeElement && (!cD.hasFocus || cD.hasFocus()) && !!(cC.type || cC.href || ~cC.tabIndex);\n          },\n          active: function active(cC) {\n            return cC === cC.ownerDocument.activeElement;\n          },\n          first: ca(function () {\n            return [0];\n          }),\n          last: ca(function (cC, cD) {\n            return [cD - 1];\n          }),\n          eq: ca(function (cC, cE, cD) {\n            return [cD < 0 ? cD + cE : cD];\n          }),\n          even: ca(function (cC, cE) {\n            for (var cD = 0; cD < cE; cD += 2) {\n              cC.push(cD);\n            }\n            return cC;\n          }),\n          odd: ca(function (cC, cE) {\n            for (var cD = 1; cD < cE; cD += 2) {\n              cC.push(cD);\n            }\n            return cC;\n          }),\n          lt: ca(function (cC, cF, cE) {\n            for (var cD = cE < 0 ? cE + cF : cE; --cD >= 0;) {\n              cC.push(cD);\n            }\n            return cC;\n          }),\n          gt: ca(function (cC, cF, cE) {\n            for (var cD = cE < 0 ? cE + cF : cE; ++cD < cF;) {\n              cC.push(cD);\n            }\n            return cC;\n          })\n        }\n      };\n      function bx(cD, cC, cE) {\n        if (cD === cC) {\n          return cE;\n        }\n        var cF = cD.nextSibling;\n        while (cF) {\n          if (cF === cC) {\n            return -1;\n          }\n          cF = cF.nextSibling;\n        }\n        return 1;\n      }\n      bL = bG.compareDocumentPosition ? function (cD, cC) {\n        if (cD === cC) {\n          bH = true;\n          return 0;\n        }\n        return (!cD.compareDocumentPosition || !cC.compareDocumentPosition ? cD.compareDocumentPosition : cD.compareDocumentPosition(cC) & 4) ? -1 : 1;\n      } : function (cK, cJ) {\n        if (cK === cJ) {\n          bH = true;\n          return 0;\n        } else {\n          if (cK.sourceIndex && cJ.sourceIndex) {\n            return cK.sourceIndex - cJ.sourceIndex;\n          }\n        }\n        var cH,\n          cD,\n          cE = [],\n          cC = [],\n          cG = cK.parentNode,\n          cI = cJ.parentNode,\n          cL = cG;\n        if (cG === cI) {\n          return bx(cK, cJ);\n        } else {\n          if (!cG) {\n            return -1;\n          } else {\n            if (!cI) {\n              return 1;\n            }\n          }\n        }\n        while (cL) {\n          cE.unshift(cL);\n          cL = cL.parentNode;\n        }\n        cL = cI;\n        while (cL) {\n          cC.unshift(cL);\n          cL = cL.parentNode;\n        }\n        cH = cE.length;\n        cD = cC.length;\n        for (var cF = 0; cF < cH && cF < cD; cF++) {\n          if (cE[cF] !== cC[cF]) {\n            return bx(cE[cF], cC[cF]);\n          }\n        }\n        return cF === cH ? bx(cK, cC[cF], -1) : bx(cE[cF], cJ, 1);\n      };\n      [0, 0].sort(bL);\n      bE = !bH;\n      cl.uniqueSort = function (cE) {\n        var cF,\n          cG = [],\n          cD = 1,\n          cC = 0;\n        bH = bE;\n        cE.sort(bL);\n        if (bH) {\n          for (; cF = cE[cD]; cD++) {\n            if (cF === cE[cD - 1]) {\n              cC = cG.push(cD);\n            }\n          }\n          while (cC--) {\n            cE.splice(cG[cC], 1);\n          }\n        }\n        return cE;\n      };\n      cl.error = function (cC) {\n        throw new Error(\"Syntax error, unrecognized expression: \" + cC);\n      };\n      function bw(cG, cL) {\n        var cD,\n          cH,\n          cJ,\n          cK,\n          cI,\n          cE,\n          cC,\n          cF = cq[cu][cG + \" \"];\n        if (cF) {\n          return cL ? 0 : cF.slice(0);\n        }\n        cI = cG;\n        cE = [];\n        cC = cg.preFilter;\n        while (cI) {\n          if (!cD || (cH = bA.exec(cI))) {\n            if (cH) {\n              cI = cI.slice(cH[0].length) || cI;\n            }\n            cE.push(cJ = []);\n          }\n          cD = false;\n          if (cH = cc.exec(cI)) {\n            cJ.push(cD = new bz(cH.shift()));\n            cI = cI.slice(cD.length);\n            cD.type = cH[0].replace(co, \" \");\n          }\n          for (cK in cg.filter) {\n            if ((cH = cb[cK].exec(cI)) && (!cC[cK] || (cH = cC[cK](cH)))) {\n              cJ.push(cD = new bz(cH.shift()));\n              cI = cI.slice(cD.length);\n              cD.type = cK;\n              cD.matches = cH;\n            }\n          }\n          if (!cD) {\n            break;\n          }\n        }\n        return cL ? cI.length : cI ? cl.error(cG) : cq(cG, cE).slice(0);\n      }\n      function b1(cG, cE, cF) {\n        var cC = cE.dir,\n          cH = cF && cE.dir === \"parentNode\",\n          cD = bK++;\n        return cE.first ? function (cK, cJ, cI) {\n          while (cK = cK[cC]) {\n            if (cH || cK.nodeType === 1) {\n              return cG(cK, cJ, cI);\n            }\n          }\n        } : function (cL, cK, cJ) {\n          if (!cJ) {\n            var cI,\n              cM = bW + \" \" + cD + \" \",\n              cN = cM + cs;\n            while (cL = cL[cC]) {\n              if (cH || cL.nodeType === 1) {\n                if ((cI = cL[cu]) === cN) {\n                  return cL.sizset;\n                } else {\n                  if (typeof cI === \"string\" && cI.indexOf(cM) === 0) {\n                    if (cL.sizset) {\n                      return cL;\n                    }\n                  } else {\n                    cL[cu] = cN;\n                    if (cG(cL, cK, cJ)) {\n                      cL.sizset = true;\n                      return cL;\n                    }\n                    cL.sizset = false;\n                  }\n                }\n              }\n            }\n          } else {\n            while (cL = cL[cC]) {\n              if (cH || cL.nodeType === 1) {\n                if (cG(cL, cK, cJ)) {\n                  return cL;\n                }\n              }\n            }\n          }\n        };\n      }\n      function bJ(cC) {\n        return cC.length > 1 ? function (cG, cF, cD) {\n          var cE = cC.length;\n          while (cE--) {\n            if (!cC[cE](cG, cF, cD)) {\n              return false;\n            }\n          }\n          return true;\n        } : cC[0];\n      }\n      function b0(cC, cD, cE, cF, cI) {\n        var cG,\n          cL = [],\n          cH = 0,\n          cJ = cC.length,\n          cK = cD != null;\n        for (; cH < cJ; cH++) {\n          if (cG = cC[cH]) {\n            if (!cE || cE(cG, cF, cI)) {\n              cL.push(cG);\n              if (cK) {\n                cD.push(cH);\n              }\n            }\n          }\n        }\n        return cL;\n      }\n      function cx(cE, cD, cG, cF, cH, cC) {\n        if (cF && !cF[cu]) {\n          cF = cx(cF);\n        }\n        if (cH && !cH[cu]) {\n          cH = cx(cH, cC);\n        }\n        return cw(function (cS, cP, cK, cR) {\n          var cU,\n            cQ,\n            cM,\n            cL = [],\n            cT = [],\n            cJ = cP.length,\n            cI = cS || bU(cD || \"*\", cK.nodeType ? [cK] : cK, []),\n            cN = cE && (cS || !cD) ? b0(cI, cL, cE, cK, cR) : cI,\n            cO = cG ? cH || (cS ? cE : cJ || cF) ? [] : cP : cN;\n          if (cG) {\n            cG(cN, cO, cK, cR);\n          }\n          if (cF) {\n            cU = b0(cO, cT);\n            cF(cU, [], cK, cR);\n            cQ = cU.length;\n            while (cQ--) {\n              if (cM = cU[cQ]) {\n                cO[cT[cQ]] = !(cN[cT[cQ]] = cM);\n              }\n            }\n          }\n          if (cS) {\n            if (cH || cE) {\n              if (cH) {\n                cU = [];\n                cQ = cO.length;\n                while (cQ--) {\n                  if (cM = cO[cQ]) {\n                    cU.push(cN[cQ] = cM);\n                  }\n                }\n                cH(null, cO = [], cU, cR);\n              }\n              cQ = cO.length;\n              while (cQ--) {\n                if ((cM = cO[cQ]) && (cU = cH ? bT.call(cS, cM) : cL[cQ]) > -1) {\n                  cS[cU] = !(cP[cU] = cM);\n                }\n              }\n            }\n          } else {\n            cO = b0(cO === cP ? cO.splice(cJ, cO.length) : cO);\n            if (cH) {\n              cH(null, cP, cO, cR);\n            } else {\n              cr.apply(cP, cO);\n            }\n          }\n        });\n      }\n      function b2(cI) {\n        var cD,\n          cG,\n          cE,\n          cH = cI.length,\n          cL = cg.relative[cI[0].type],\n          cM = cL || cg.relative[\" \"],\n          cF = cL ? 1 : 0,\n          cJ = b1(function (cN) {\n            return cN === cD;\n          }, cM, true),\n          cK = b1(function (cN) {\n            return bT.call(cD, cN) > -1;\n          }, cM, true),\n          cC = [function (cP, cO, cN) {\n            return !cL && (cN || cO !== ce) || ((cD = cO).nodeType ? cJ(cP, cO, cN) : cK(cP, cO, cN));\n          }];\n        for (; cF < cH; cF++) {\n          if (cG = cg.relative[cI[cF].type]) {\n            cC = [b1(bJ(cC), cG)];\n          } else {\n            cG = cg.filter[cI[cF].type].apply(null, cI[cF].matches);\n            if (cG[cu]) {\n              cE = ++cF;\n              for (; cE < cH; cE++) {\n                if (cg.relative[cI[cE].type]) {\n                  break;\n                }\n              }\n              return cx(cF > 1 && bJ(cC), cF > 1 && cI.slice(0, cF - 1).join(\"\").replace(co, \"$1\"), cG, cF < cE && b2(cI.slice(cF, cE)), cE < cH && b2(cI = cI.slice(cE)), cE < cH && cI.join(\"\"));\n            }\n            cC.push(cG);\n          }\n        }\n        return bJ(cC);\n      }\n      function bB(cF, cE) {\n        var cC = cE.length > 0,\n          cG = cF.length > 0,\n          cD = function cD(cQ, cK, cP, cO, cW) {\n            var cL,\n              cM,\n              cR,\n              cV = [],\n              cU = 0,\n              cN = \"0\",\n              cH = cQ && [],\n              cS = cW != null,\n              cT = ce,\n              cJ = cQ || cG && cg.find.TAG(\"*\", cW && cK.parentNode || cK),\n              cI = bW += cT == null ? 1 : Math.E;\n            if (cS) {\n              ce = cK !== bD && cK;\n              cs = cD.el;\n            }\n            for (; (cL = cJ[cN]) != null; cN++) {\n              if (cG && cL) {\n                for (cM = 0; cR = cF[cM]; cM++) {\n                  if (cR(cL, cK, cP)) {\n                    cO.push(cL);\n                    break;\n                  }\n                }\n                if (cS) {\n                  bW = cI;\n                  cs = ++cD.el;\n                }\n              }\n              if (cC) {\n                if (cL = !cR && cL) {\n                  cU--;\n                }\n                if (cQ) {\n                  cH.push(cL);\n                }\n              }\n            }\n            cU += cN;\n            if (cC && cN !== cU) {\n              for (cM = 0; cR = cE[cM]; cM++) {\n                cR(cH, cV, cK, cP);\n              }\n              if (cQ) {\n                if (cU > 0) {\n                  while (cN--) {\n                    if (!(cH[cN] || cV[cN])) {\n                      cV[cN] = b9.call(cO);\n                    }\n                  }\n                }\n                cV = b0(cV);\n              }\n              cr.apply(cO, cV);\n              if (cS && !cQ && cV.length > 0 && cU + cE.length > 1) {\n                cl.uniqueSort(cO);\n              }\n            }\n            if (cS) {\n              bW = cI;\n              ce = cT;\n            }\n            return cH;\n          };\n        cD.el = 0;\n        return cC ? cw(cD) : cD;\n      }\n      bI = cl.compile = function (cC, cH) {\n        var cE,\n          cD = [],\n          cG = [],\n          cF = bS[cu][cC + \" \"];\n        if (!cF) {\n          if (!cH) {\n            cH = bw(cC);\n          }\n          cE = cH.length;\n          while (cE--) {\n            cF = b2(cH[cE]);\n            if (cF[cu]) {\n              cD.push(cF);\n            } else {\n              cG.push(cF);\n            }\n          }\n          cF = bS(cC, bB(cG, cD));\n        }\n        return cF;\n      };\n      function bU(cD, cG, cF) {\n        var cE = 0,\n          cC = cG.length;\n        for (; cE < cC; cE++) {\n          cl(cD, cG[cE], cF);\n        }\n        return cF;\n      }\n      function ct(cE, cC, cG, cK, cJ) {\n        var cH,\n          cN,\n          cD,\n          cM,\n          cL,\n          cI = bw(cE),\n          cF = cI.length;\n        if (!cK) {\n          if (cI.length === 1) {\n            cN = cI[0] = cI[0].slice(0);\n            if (cN.length > 2 && (cD = cN[0]).type === \"ID\" && cC.nodeType === 9 && !cJ && cg.relative[cN[1].type]) {\n              cC = cg.find.ID(cD.matches[0].replace(bY, \"\"), cC, cJ)[0];\n              if (!cC) {\n                return cG;\n              }\n              cE = cE.slice(cN.shift().length);\n            }\n            for (cH = cb.POS.test(cE) ? -1 : cN.length - 1; cH >= 0; cH--) {\n              cD = cN[cH];\n              if (cg.relative[cM = cD.type]) {\n                break;\n              }\n              if (cL = cg.find[cM]) {\n                if (cK = cL(cD.matches[0].replace(bY, \"\"), cm.test(cN[0].type) && cC.parentNode || cC, cJ)) {\n                  cN.splice(cH, 1);\n                  cE = cK.length && cN.join(\"\");\n                  if (!cE) {\n                    cr.apply(cG, bQ.call(cK, 0));\n                    return cG;\n                  }\n                  break;\n                }\n              }\n            }\n          }\n        }\n        bI(cE, cI)(cK, cC, cJ, cG, cm.test(cE));\n        return cG;\n      }\n      if (bD.querySelectorAll) {\n        (function () {\n          var cH,\n            cI = ct,\n            cG = /'|\\\\/g,\n            cE = /\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,\n            cD = [\":focus\"],\n            cC = [\":active\"],\n            cF = bG.matchesSelector || bG.mozMatchesSelector || bG.webkitMatchesSelector || bG.oMatchesSelector || bG.msMatchesSelector;\n          cf(function (cJ) {\n            cJ.innerHTML = \"<select><option selected=''></option></select>\";\n            if (!cJ.querySelectorAll(\"[selected]\").length) {\n              cD.push(\"\\\\[\" + b3 + \"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\");\n            }\n            if (!cJ.querySelectorAll(\":checked\").length) {\n              cD.push(\":checked\");\n            }\n          });\n          cf(function (cJ) {\n            cJ.innerHTML = \"<p test=''></p>\";\n            if (cJ.querySelectorAll(\"[test^='']\").length) {\n              cD.push(\"[*^$]=\" + b3 + \"*(?:\\\"\\\"|'')\");\n            }\n            cJ.innerHTML = \"<input type='hidden'/>\";\n            if (!cJ.querySelectorAll(\":enabled\").length) {\n              cD.push(\":enabled\", \":disabled\");\n            }\n          });\n          cD = new RegExp(cD.join(\"|\"));\n          ct = function ct(cP, cK, cR, cU, cT) {\n            if (!cU && !cT && !cD.test(cP)) {\n              var cN,\n                cS,\n                cM = true,\n                cJ = cu,\n                cL = cK,\n                cQ = cK.nodeType === 9 && cP;\n              if (cK.nodeType === 1 && cK.nodeName.toLowerCase() !== \"object\") {\n                cN = bw(cP);\n                if (cM = cK.getAttribute(\"id\")) {\n                  cJ = cM.replace(cG, \"\\\\$&\");\n                } else {\n                  cK.setAttribute(\"id\", cJ);\n                }\n                cJ = \"[id='\" + cJ + \"'] \";\n                cS = cN.length;\n                while (cS--) {\n                  cN[cS] = cJ + cN[cS].join(\"\");\n                }\n                cL = cm.test(cP) && cK.parentNode || cK;\n                cQ = cN.join(\",\");\n              }\n              if (cQ) {\n                try {\n                  cr.apply(cR, bQ.call(cL.querySelectorAll(cQ), 0));\n                  return cR;\n                } catch (cO) {} finally {\n                  if (!cM) {\n                    cK.removeAttribute(\"id\");\n                  }\n                }\n              }\n            }\n            return cI(cP, cK, cR, cU, cT);\n          };\n          if (cF) {\n            cf(function (cK) {\n              cH = cF.call(cK, \"div\");\n              try {\n                cF.call(cK, \"[test!='']:sizzle\");\n                cC.push(\"!=\", cB);\n              } catch (cJ) {}\n            });\n            cC = new RegExp(cC.join(\"|\"));\n            cl.matchesSelector = function (cK, cM) {\n              cM = cM.replace(cE, \"='$1']\");\n              if (!bR(cK) && !cC.test(cM) && !cD.test(cM)) {\n                try {\n                  var cJ = cF.call(cK, cM);\n                  if (cJ || cH || cK.document && cK.document.nodeType !== 11) {\n                    return cJ;\n                  }\n                } catch (cL) {}\n              }\n              return cl(cM, null, null, [cK]).length > 0;\n            };\n          }\n        })();\n      }\n      cg.pseudos.nth = cg.pseudos.eq;\n      function bO() {}\n      cg.filters = bO.prototype = cg.pseudos;\n      cg.setFilters = new bO();\n      cl.attr = C.attr;\n      C.find = cl;\n      C.expr = cl.selectors;\n      C.expr[\":\"] = C.expr.pseudos;\n      C.unique = cl.uniqueSort;\n      C.text = cl.getText;\n      C.isXMLDoc = cl.isXML;\n      C.contains = cl.contains;\n    })(bd);\n    var U = /Until$/,\n      ag = /^(?:parents|prev(?:Until|All))/,\n      bq = /^.[^:#\\[\\.,]*$/,\n      aQ = C.expr.match.needsContext,\n      ao = {\n        children: true,\n        contents: true,\n        next: true,\n        prev: true\n      };\n    C.fn.extend({\n      find: function find(bu) {\n        var by,\n          bv,\n          bA,\n          bB,\n          bz,\n          bx,\n          bw = this;\n        if (typeof bu !== \"string\") {\n          return C(bu).filter(function () {\n            for (by = 0, bv = bw.length; by < bv; by++) {\n              if (C.contains(bw[by], this)) {\n                return true;\n              }\n            }\n          });\n        }\n        bx = this.pushStack(\"\", \"find\", bu);\n        for (by = 0, bv = this.length; by < bv; by++) {\n          bA = bx.length;\n          C.find(bu, this[by], bx);\n          if (by > 0) {\n            for (bB = bA; bB < bx.length; bB++) {\n              for (bz = 0; bz < bA; bz++) {\n                if (bx[bz] === bx[bB]) {\n                  bx.splice(bB--, 1);\n                  break;\n                }\n              }\n            }\n          }\n        }\n        return bx;\n      },\n      has: function has(bx) {\n        var bw,\n          bv = C(bx, this),\n          bu = bv.length;\n        return this.filter(function () {\n          for (bw = 0; bw < bu; bw++) {\n            if (C.contains(this, bv[bw])) {\n              return true;\n            }\n          }\n        });\n      },\n      not: function not(bu) {\n        return this.pushStack(az(this, bu, false), \"not\", bu);\n      },\n      filter: function filter(bu) {\n        return this.pushStack(az(this, bu, true), \"filter\", bu);\n      },\n      is: function is(bu) {\n        return !!bu && (typeof bu === \"string\" ? aQ.test(bu) ? C(bu, this.context).index(this[0]) >= 0 : C.filter(bu, this).length > 0 : this.filter(bu).length > 0);\n      },\n      closest: function closest(by, bx) {\n        var bz,\n          bw = 0,\n          bu = this.length,\n          bv = [],\n          bA = aQ.test(by) || typeof by !== \"string\" ? C(by, bx || this.context) : 0;\n        for (; bw < bu; bw++) {\n          bz = this[bw];\n          while (bz && bz.ownerDocument && bz !== bx && bz.nodeType !== 11) {\n            if (bA ? bA.index(bz) > -1 : C.find.matchesSelector(bz, by)) {\n              bv.push(bz);\n              break;\n            }\n            bz = bz.parentNode;\n          }\n        }\n        bv = bv.length > 1 ? C.unique(bv) : bv;\n        return this.pushStack(bv, \"closest\", by);\n      },\n      index: function index(bu) {\n        if (!bu) {\n          return this[0] && this[0].parentNode ? this.prevAll().length : -1;\n        }\n        if (typeof bu === \"string\") {\n          return C.inArray(this[0], C(bu));\n        }\n        return C.inArray(bu.jqx ? bu[0] : bu, this);\n      },\n      add: function add(bu, bv) {\n        var bx = typeof bu === \"string\" ? C(bu, bv) : C.makeArray(bu && bu.nodeType ? [bu] : bu),\n          bw = C.merge(this.get(), bx);\n        return this.pushStack(x(bx[0]) || x(bw[0]) ? bw : C.unique(bw));\n      },\n      addBack: function addBack(bu) {\n        return this.add(bu == null ? this.prevObject : this.prevObject.filter(bu));\n      }\n    });\n    C.fn.andSelf = C.fn.addBack;\n    function x(bu) {\n      return !bu || !bu.parentNode || bu.parentNode.nodeType === 11;\n    }\n    function aB(bv, bu) {\n      do {\n        bv = bv[bu];\n      } while (bv && bv.nodeType !== 1);\n      return bv;\n    }\n    C.each({\n      parent: function parent(bv) {\n        var bu = bv.parentNode;\n        return bu && bu.nodeType !== 11 ? bu : null;\n      },\n      parents: function parents(bu) {\n        return C.dir(bu, \"parentNode\");\n      },\n      parentsUntil: function parentsUntil(bv, bu, bw) {\n        return C.dir(bv, \"parentNode\", bw);\n      },\n      next: function next(bu) {\n        return aB(bu, \"nextSibling\");\n      },\n      prev: function prev(bu) {\n        return aB(bu, \"previousSibling\");\n      },\n      nextAll: function nextAll(bu) {\n        return C.dir(bu, \"nextSibling\");\n      },\n      prevAll: function prevAll(bu) {\n        return C.dir(bu, \"previousSibling\");\n      },\n      nextUntil: function nextUntil(bv, bu, bw) {\n        return C.dir(bv, \"nextSibling\", bw);\n      },\n      prevUntil: function prevUntil(bv, bu, bw) {\n        return C.dir(bv, \"previousSibling\", bw);\n      },\n      siblings: function siblings(bu) {\n        return C.sibling((bu.parentNode || {}).firstChild, bu);\n      },\n      children: function children(bu) {\n        return C.sibling(bu.firstChild);\n      },\n      contents: function contents(bu) {\n        return C.nodeName(bu, \"iframe\") ? bu.contentDocument || bu.contentWindow.document : C.merge([], bu.childNodes);\n      }\n    }, function (bu, bv) {\n      C.fn[bu] = function (by, bw) {\n        var bx = C.map(this, bv, by);\n        if (!U.test(bu)) {\n          bw = by;\n        }\n        if (bw && typeof bw === \"string\") {\n          bx = C.filter(bw, bx);\n        }\n        bx = this.length > 1 && !ao[bu] ? C.unique(bx) : bx;\n        if (this.length > 1 && ag.test(bu)) {\n          bx = bx.reverse();\n        }\n        return this.pushStack(bx, bu, aD.call(arguments).join(\",\"));\n      };\n    });\n    C.extend({\n      filter: function filter(bw, bu, bv) {\n        if (bv) {\n          bw = \":not(\" + bw + \")\";\n        }\n        return bu.length === 1 ? C.find.matchesSelector(bu[0], bw) ? [bu[0]] : [] : C.find.matches(bw, bu);\n      },\n      dir: function dir(bw, bv, by) {\n        var bu = [],\n          bx = bw[bv];\n        while (bx && bx.nodeType !== 9 && (by === G || bx.nodeType !== 1 || !C(bx).is(by))) {\n          if (bx.nodeType === 1) {\n            bu.push(bx);\n          }\n          bx = bx[bv];\n        }\n        return bu;\n      },\n      sibling: function sibling(bw, bv) {\n        var bu = [];\n        for (; bw; bw = bw.nextSibling) {\n          if (bw.nodeType === 1 && bw !== bv) {\n            bu.push(bw);\n          }\n        }\n        return bu;\n      }\n    });\n    function az(bx, bw, bu) {\n      bw = bw || 0;\n      if (C.isFunction(bw)) {\n        return C.grep(bx, function (bz, by) {\n          var bA = !!bw.call(bz, by, bz);\n          return bA === bu;\n        });\n      } else {\n        if (bw.nodeType) {\n          return C.grep(bx, function (bz, by) {\n            return bz === bw === bu;\n          });\n        } else {\n          if (typeof bw === \"string\") {\n            var bv = C.grep(bx, function (by) {\n              return by.nodeType === 1;\n            });\n            if (bq.test(bw)) {\n              return C.filter(bw, bv, !bu);\n            } else {\n              bw = C.filter(bw, bv);\n            }\n          }\n        }\n      }\n      return C.grep(bx, function (bz, by) {\n        return C.inArray(bz, bw) >= 0 === bu;\n      });\n    }\n    function a(bu) {\n      var bw = aJ.split(\"|\"),\n        bv = bu.createDocumentFragment();\n      if (bv.createElement) {\n        while (bw.length) {\n          bv.createElement(bw.pop());\n        }\n      }\n      return bv;\n    }\n    var aJ = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n      aa = / JQXLite\\d+=\"(?:null|\\d+)\"/g,\n      ah = /^\\s+/,\n      L = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n      c = /<([\\w:]+)/,\n      v = /<tbody/i,\n      P = /<|&#?\\w+;/,\n      W = /<(?:script|style|link)/i,\n      I = /<(?:script|object|embed|option|style)/i,\n      ac = new RegExp(\"<(?:\" + aJ + \")[\\\\s/>]\", \"i\"),\n      R = /^(?:checkbox|radio)$/,\n      o = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      bp = /\\/(java|ecma)script/i,\n      aG = /^\\s*<!(?:\\[CDATA\\[|\\-\\-)|[\\]\\-]{2}>\\s*$/g,\n      am = {\n        option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n        legend: [1, \"<fieldset>\", \"</fieldset>\"],\n        thead: [1, \"<table>\", \"</table>\"],\n        tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n        td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n        col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n        area: [1, \"<map>\", \"</map>\"],\n        _default: [0, \"\", \"\"]\n      },\n      T = a(ak),\n      bg = T.appendChild(ak.createElement(\"div\"));\n    am.optgroup = am.option;\n    am.tbody = am.tfoot = am.colgroup = am.caption = am.thead;\n    am.th = am.td;\n    if (!C.support.htmlSerialize) {\n      am._default = [1, \"X<div>\", \"</div>\"];\n    }\n    C.fn.extend({\n      text: function text(bu) {\n        return C.access(this, function (bv) {\n          return bv === G ? C.text(this) : this.empty().append((this[0] && this[0].ownerDocument || ak).createTextNode(bv));\n        }, null, bu, arguments.length);\n      },\n      wrapAll: function wrapAll(bu) {\n        if (C.isFunction(bu)) {\n          return this.each(function (bw) {\n            C(this).wrapAll(bu.call(this, bw));\n          });\n        }\n        if (this[0]) {\n          var bv = C(bu, this[0].ownerDocument).eq(0).clone(true);\n          if (this[0].parentNode) {\n            bv.insertBefore(this[0]);\n          }\n          bv.map(function () {\n            var bw = this;\n            while (bw.firstChild && bw.firstChild.nodeType === 1) {\n              bw = bw.firstChild;\n            }\n            return bw;\n          }).append(this);\n        }\n        return this;\n      },\n      wrapInner: function wrapInner(bu) {\n        if (C.isFunction(bu)) {\n          return this.each(function (bv) {\n            C(this).wrapInner(bu.call(this, bv));\n          });\n        }\n        return this.each(function () {\n          var bv = C(this),\n            bw = bv.contents();\n          if (bw.length) {\n            bw.wrapAll(bu);\n          } else {\n            bv.append(bu);\n          }\n        });\n      },\n      wrap: function wrap(bu) {\n        var bv = C.isFunction(bu);\n        return this.each(function (bw) {\n          C(this).wrapAll(bv ? bu.call(this, bw) : bu);\n        });\n      },\n      unwrap: function unwrap() {\n        return this.parent().each(function () {\n          if (!C.nodeName(this, \"body\")) {\n            C(this).replaceWith(this.childNodes);\n          }\n        }).end();\n      },\n      append: function append() {\n        return this.domManip(arguments, true, function (bu) {\n          if (this.nodeType === 1 || this.nodeType === 11) {\n            this.appendChild(bu);\n          }\n        });\n      },\n      prepend: function prepend() {\n        return this.domManip(arguments, true, function (bu) {\n          if (this.nodeType === 1 || this.nodeType === 11) {\n            this.insertBefore(bu, this.firstChild);\n          }\n        });\n      },\n      before: function before() {\n        if (!x(this[0])) {\n          return this.domManip(arguments, false, function (bv) {\n            this.parentNode.insertBefore(bv, this);\n          });\n        }\n        if (arguments.length) {\n          var bu = C.clean(arguments);\n          return this.pushStack(C.merge(bu, this), \"before\", this.selector);\n        }\n      },\n      after: function after() {\n        if (!x(this[0])) {\n          return this.domManip(arguments, false, function (bv) {\n            this.parentNode.insertBefore(bv, this.nextSibling);\n          });\n        }\n        if (arguments.length) {\n          var bu = C.clean(arguments);\n          return this.pushStack(C.merge(this, bu), \"after\", this.selector);\n        }\n      },\n      remove: function remove(bu, bx) {\n        var bw,\n          bv = 0;\n        for (; (bw = this[bv]) != null; bv++) {\n          if (!bu || C.filter(bu, [bw]).length) {\n            if (!bx && bw.nodeType === 1) {\n              C.cleanData(bw.getElementsByTagName(\"*\"));\n              C.cleanData([bw]);\n            }\n            if (bw.parentNode) {\n              bw.parentNode.removeChild(bw);\n            }\n          }\n        }\n        return this;\n      },\n      empty: function empty() {\n        var bv,\n          bu = 0;\n        for (; (bv = this[bu]) != null; bu++) {\n          if (bv.nodeType === 1) {\n            C.cleanData(bv.getElementsByTagName(\"*\"));\n          }\n          while (bv.firstChild) {\n            bv.removeChild(bv.firstChild);\n          }\n        }\n        return this;\n      },\n      clone: function clone(bv, bu) {\n        bv = bv == null ? false : bv;\n        bu = bu == null ? bv : bu;\n        return this.map(function () {\n          return C.clone(this, bv, bu);\n        });\n      },\n      html: function html(bu) {\n        return C.access(this, function (by) {\n          var bx = this[0] || {},\n            bw = 0,\n            bv = this.length;\n          if (by === G) {\n            return bx.nodeType === 1 ? bx.innerHTML.replace(aa, \"\") : G;\n          }\n          if (typeof by === \"string\" && !W.test(by) && (C.support.htmlSerialize || !ac.test(by)) && (C.support.leadingWhitespace || !ah.test(by)) && !am[(c.exec(by) || [\"\", \"\"])[1].toLowerCase()]) {\n            by = by.replace(L, \"<$1></$2>\");\n            try {\n              for (; bw < bv; bw++) {\n                bx = this[bw] || {};\n                if (bx.nodeType === 1) {\n                  C.cleanData(bx.getElementsByTagName(\"*\"));\n                  bx.innerHTML = by;\n                }\n              }\n              bx = 0;\n            } catch (bz) {}\n          }\n          if (bx) {\n            this.empty().append(by);\n          }\n        }, null, bu, arguments.length);\n      },\n      replaceWith: function replaceWith(bu) {\n        if (!x(this[0])) {\n          if (C.isFunction(bu)) {\n            return this.each(function (bx) {\n              var bw = C(this),\n                bv = bw.html();\n              bw.replaceWith(bu.call(this, bx, bv));\n            });\n          }\n          if (typeof bu !== \"string\") {\n            bu = C(bu).detach();\n          }\n          return this.each(function () {\n            var bw = this.nextSibling,\n              bv = this.parentNode;\n            C(this).remove();\n            if (bw) {\n              C(bw).before(bu);\n            } else {\n              C(bv).append(bu);\n            }\n          });\n        }\n        return this.length ? this.pushStack(C(C.isFunction(bu) ? bu() : bu), \"replaceWith\", bu) : this;\n      },\n      detach: function detach(bu) {\n        return this.remove(bu, true);\n      },\n      domManip: function domManip(bA, bE, bD) {\n        bA = [].concat.apply([], bA);\n        var bw,\n          by,\n          bz,\n          bC,\n          bx = 0,\n          bB = bA[0],\n          bv = [],\n          bu = this.length;\n        if (!C.support.checkClone && bu > 1 && typeof bB === \"string\" && o.test(bB)) {\n          return this.each(function () {\n            C(this).domManip(bA, bE, bD);\n          });\n        }\n        if (C.isFunction(bB)) {\n          return this.each(function (bG) {\n            var bF = C(this);\n            bA[0] = bB.call(this, bG, bE ? bF.html() : G);\n            bF.domManip(bA, bE, bD);\n          });\n        }\n        if (this[0]) {\n          bw = C.buildFragment(bA, this, bv);\n          bz = bw.fragment;\n          by = bz.firstChild;\n          if (bz.childNodes.length === 1) {\n            bz = by;\n          }\n          if (by) {\n            bE = bE && C.nodeName(by, \"tr\");\n            for (bC = bw.cacheable || bu - 1; bx < bu; bx++) {\n              bD.call(bE && C.nodeName(this[bx], \"table\") ? a3(this[bx], \"tbody\") : this[bx], bx === bC ? bz : C.clone(bz, true, true));\n            }\n          }\n          bz = by = null;\n          if (bv.length) {\n            C.each(bv, function (bF, bG) {\n              if (bG.src) {\n                if (C.ajax) {\n                  C.ajax({\n                    url: bG.src,\n                    type: \"GET\",\n                    dataType: \"script\",\n                    async: false,\n                    global: false,\n                    \"throws\": true\n                  });\n                } else {\n                  C.error(\"no ajax\");\n                }\n              } else {\n                C.globalEval((bG.text || bG.textContent || bG.innerHTML || \"\").replace(aG, \"\"));\n              }\n              if (bG.parentNode) {\n                bG.parentNode.removeChild(bG);\n              }\n            });\n          }\n        }\n        return this;\n      }\n    });\n    function a3(bv, bu) {\n      return bv.getElementsByTagName(bu)[0] || bv.appendChild(bv.ownerDocument.createElement(bu));\n    }\n    function r(bB, bv) {\n      if (bv.nodeType !== 1 || !C.hasData(bB)) {\n        return;\n      }\n      var by,\n        bx,\n        bu,\n        bA = C._data(bB),\n        bz = C._data(bv, bA),\n        bw = bA.events;\n      if (bw) {\n        delete bz.handle;\n        bz.events = {};\n        for (by in bw) {\n          for (bx = 0, bu = bw[by].length; bx < bu; bx++) {\n            C.event.add(bv, by, bw[by][bx]);\n          }\n        }\n      }\n      if (bz.data) {\n        bz.data = C.extend({}, bz.data);\n      }\n    }\n    function ab(bv, bu) {\n      var bw;\n      if (bu.nodeType !== 1) {\n        return;\n      }\n      if (bu.clearAttributes) {\n        bu.clearAttributes();\n      }\n      if (bu.mergeAttributes) {\n        bu.mergeAttributes(bv);\n      }\n      bw = bu.nodeName.toLowerCase();\n      if (bw === \"object\") {\n        if (bu.parentNode) {\n          bu.outerHTML = bv.outerHTML;\n        }\n        if (C.support.html5Clone && bv.innerHTML && !C.trim(bu.innerHTML)) {\n          bu.innerHTML = bv.innerHTML;\n        }\n      } else {\n        if (bw === \"input\" && R.test(bv.type)) {\n          bu.defaultChecked = bu.checked = bv.checked;\n          if (bu.value !== bv.value) {\n            bu.value = bv.value;\n          }\n        } else {\n          if (bw === \"option\") {\n            bu.selected = bv.defaultSelected;\n          } else {\n            if (bw === \"input\" || bw === \"textarea\") {\n              bu.defaultValue = bv.defaultValue;\n            } else {\n              if (bw === \"script\" && bu.text !== bv.text) {\n                bu.text = bv.text;\n              }\n            }\n          }\n        }\n      }\n      bu.removeAttribute(C.expando);\n    }\n    C.buildFragment = function (bx, by, bv) {\n      var bw,\n        bu,\n        bz,\n        bA = bx[0];\n      by = by || ak;\n      by = !by.nodeType && by[0] || by;\n      by = by.ownerDocument || by;\n      if (bx.length === 1 && typeof bA === \"string\" && bA.length < 512 && by === ak && bA.charAt(0) === \"<\" && !I.test(bA) && (C.support.checkClone || !o.test(bA)) && (C.support.html5Clone || !ac.test(bA))) {\n        bu = true;\n        bw = C.fragments[bA];\n        bz = bw !== G;\n      }\n      if (!bw) {\n        bw = by.createDocumentFragment();\n        C.clean(bx, by, bw, bv);\n        if (bu) {\n          C.fragments[bA] = bz && bw;\n        }\n      }\n      return {\n        fragment: bw,\n        cacheable: bu\n      };\n    };\n    C.fragments = {};\n    C.each({\n      appendTo: \"append\",\n      prependTo: \"prepend\",\n      insertBefore: \"before\",\n      insertAfter: \"after\",\n      replaceAll: \"replaceWith\"\n    }, function (bu, bv) {\n      C.fn[bu] = function (bw) {\n        var by,\n          bA = 0,\n          bz = [],\n          bC = C(bw),\n          bx = bC.length,\n          bB = this.length === 1 && this[0].parentNode;\n        if ((bB == null || bB && bB.nodeType === 11 && bB.childNodes.length === 1) && bx === 1) {\n          bC[bv](this[0]);\n          return this;\n        } else {\n          for (; bA < bx; bA++) {\n            by = (bA > 0 ? this.clone(true) : this).get();\n            C(bC[bA])[bv](by);\n            bz = bz.concat(by);\n          }\n          return this.pushStack(bz, bu, bC.selector);\n        }\n      };\n    });\n    function bk(bu) {\n      if (typeof bu.getElementsByTagName !== \"undefined\") {\n        return bu.getElementsByTagName(\"*\");\n      } else {\n        if (typeof bu.querySelectorAll !== \"undefined\") {\n          return bu.querySelectorAll(\"*\");\n        } else {\n          return [];\n        }\n      }\n    }\n    function al(bu) {\n      if (R.test(bu.type)) {\n        bu.defaultChecked = bu.checked;\n      }\n    }\n    C.extend({\n      clone: function clone(by, bA, bw) {\n        var bu, bv, bx, bz;\n        if (C.support.html5Clone || C.isXMLDoc(by) || !ac.test(\"<\" + by.nodeName + \">\")) {\n          bz = by.cloneNode(true);\n        } else {\n          bg.innerHTML = by.outerHTML;\n          bg.removeChild(bz = bg.firstChild);\n        }\n        if ((!C.support.noCloneEvent || !C.support.noCloneChecked) && (by.nodeType === 1 || by.nodeType === 11) && !C.isXMLDoc(by)) {\n          ab(by, bz);\n          bu = bk(by);\n          bv = bk(bz);\n          for (bx = 0; bu[bx]; ++bx) {\n            if (bv[bx]) {\n              ab(bu[bx], bv[bx]);\n            }\n          }\n        }\n        if (bA) {\n          r(by, bz);\n          if (bw) {\n            bu = bk(by);\n            bv = bk(bz);\n            for (bx = 0; bu[bx]; ++bx) {\n              r(bu[bx], bv[bx]);\n            }\n          }\n        }\n        bu = bv = null;\n        return bz;\n      },\n      clean: function clean(bH, bw, bu, bx) {\n        var bE,\n          bD,\n          bG,\n          bL,\n          bA,\n          bK,\n          bB,\n          by,\n          bv,\n          bF,\n          bJ,\n          bC,\n          bz = bw === ak && T,\n          bI = [];\n        if (!bw || typeof bw.createDocumentFragment === \"undefined\") {\n          bw = ak;\n        }\n        for (bE = 0; (bG = bH[bE]) != null; bE++) {\n          if (typeof bG === \"number\") {\n            bG += \"\";\n          }\n          if (!bG) {\n            continue;\n          }\n          if (typeof bG === \"string\") {\n            if (!P.test(bG)) {\n              bG = bw.createTextNode(bG);\n            } else {\n              bz = bz || a(bw);\n              bB = bw.createElement(\"div\");\n              bz.appendChild(bB);\n              bG = bG.replace(L, \"<$1></$2>\");\n              bL = (c.exec(bG) || [\"\", \"\"])[1].toLowerCase();\n              bA = am[bL] || am._default;\n              bK = bA[0];\n              bB.innerHTML = bA[1] + bG + bA[2];\n              while (bK--) {\n                bB = bB.lastChild;\n              }\n              if (!C.support.tbody) {\n                by = v.test(bG);\n                bv = bL === \"table\" && !by ? bB.firstChild && bB.firstChild.childNodes : bA[1] === \"<table>\" && !by ? bB.childNodes : [];\n                for (bD = bv.length - 1; bD >= 0; --bD) {\n                  if (C.nodeName(bv[bD], \"tbody\") && !bv[bD].childNodes.length) {\n                    bv[bD].parentNode.removeChild(bv[bD]);\n                  }\n                }\n              }\n              if (!C.support.leadingWhitespace && ah.test(bG)) {\n                bB.insertBefore(bw.createTextNode(ah.exec(bG)[0]), bB.firstChild);\n              }\n              bG = bB.childNodes;\n              bB.parentNode.removeChild(bB);\n            }\n          }\n          if (bG.nodeType) {\n            bI.push(bG);\n          } else {\n            C.merge(bI, bG);\n          }\n        }\n        if (bB) {\n          bG = bB = bz = null;\n        }\n        if (!C.support.appendChecked) {\n          for (bE = 0; (bG = bI[bE]) != null; bE++) {\n            if (C.nodeName(bG, \"input\")) {\n              al(bG);\n            } else {\n              if (typeof bG.getElementsByTagName !== \"undefined\") {\n                C.grep(bG.getElementsByTagName(\"input\"), al);\n              }\n            }\n          }\n        }\n        if (bu) {\n          bJ = function bJ(bM) {\n            if (!bM.type || bp.test(bM.type)) {\n              return bx ? bx.push(bM.parentNode ? bM.parentNode.removeChild(bM) : bM) : bu.appendChild(bM);\n            }\n          };\n          for (bE = 0; (bG = bI[bE]) != null; bE++) {\n            if (!(C.nodeName(bG, \"script\") && bJ(bG))) {\n              bu.appendChild(bG);\n              if (typeof bG.getElementsByTagName !== \"undefined\") {\n                bC = C.grep(C.merge([], bG.getElementsByTagName(\"script\")), bJ);\n                bI.splice.apply(bI, [bE + 1, 0].concat(bC));\n                bE += bC.length;\n              }\n            }\n          }\n        }\n        return bI;\n      },\n      cleanData: function cleanData(bv, bD) {\n        var by,\n          bw,\n          bx,\n          bC,\n          bz = 0,\n          bE = C.expando,\n          bu = C.cache,\n          bA = C.support.deleteExpando,\n          bB = C.event.special;\n        for (; (bx = bv[bz]) != null; bz++) {\n          if (bD || C.acceptData(bx)) {\n            bw = bx[bE];\n            by = bw && bu[bw];\n            if (by) {\n              if (by.events) {\n                for (bC in by.events) {\n                  if (bB[bC]) {\n                    C.event.remove(bx, bC);\n                  } else {\n                    C.removeEvent(bx, bC, by.handle);\n                  }\n                }\n              }\n              if (bu[bw]) {\n                delete bu[bw];\n                if (bA) {\n                  delete bx[bE];\n                } else {\n                  if (bx.removeAttribute) {\n                    bx.removeAttribute(bE);\n                  } else {\n                    bx[bE] = null;\n                  }\n                }\n                C.deletedIds.push(bw);\n              }\n            }\n          }\n        }\n      }\n    });\n    (function () {\n      var bu, bv;\n      C.uaMatch = function (bx) {\n        bx = bx.toLowerCase();\n        var bw = /(chrome)[ \\/]([\\w.]+)/.exec(bx) || /(webkit)[ \\/]([\\w.]+)/.exec(bx) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(bx) || /(msie) ([\\w.]+)/.exec(bx) || bx.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(bx) || [];\n        return {\n          browser: bw[1] || \"\",\n          version: bw[2] || \"0\"\n        };\n      };\n      bu = C.uaMatch(bt.userAgent);\n      bv = {};\n      if (bu.browser) {\n        bv[bu.browser] = true;\n        bv.version = bu.version;\n      }\n      if (bv.chrome) {\n        bv.webkit = true;\n      } else {\n        if (bv.webkit) {\n          bv.safari = true;\n        }\n      }\n      C.browser = bv;\n      C.sub = function () {\n        function bx(bz, bA) {\n          return new bx.fn.init(bz, bA);\n        }\n        C.extend(true, bx, this);\n        bx.superclass = this;\n        bx.fn = bx.prototype = this();\n        bx.fn.constructor = bx;\n        bx.sub = this.sub;\n        bx.fn.init = function by(bz, bA) {\n          if (bA && bA instanceof C && !(bA instanceof bx)) {\n            bA = bx(bA);\n          }\n          return C.fn.init.call(this, bz, bA, bw);\n        };\n        bx.fn.init.prototype = bx.fn;\n        var bw = bx(ak);\n        return bx;\n      };\n    })();\n    var Q,\n      bc,\n      l,\n      ad = /alpha\\([^)]*\\)/i,\n      aj = /opacity=([^)]*)/,\n      w = /^(top|right|bottom|left)$/,\n      ai = /^(none|table(?!-c[ea]).+)/,\n      av = /^margin/,\n      i = new RegExp(\"^(\" + aE + \")(.*)$\", \"i\"),\n      aV = new RegExp(\"^(\" + aE + \")(?!px)[a-z%]+$\", \"i\"),\n      E = new RegExp(\"^([-+])=(\" + aE + \")\", \"i\"),\n      J = {\n        BODY: \"block\"\n      },\n      ba = {\n        position: \"absolute\",\n        visibility: \"hidden\",\n        display: \"block\"\n      },\n      aL = {\n        letterSpacing: 0,\n        fontWeight: 400\n      },\n      D = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      O = [\"Webkit\", \"O\", \"Moz\", \"ms\"],\n      be = C.fn.toggle;\n    function a2(bx, bv) {\n      if (bv in bx) {\n        return bv;\n      }\n      var by = bv.charAt(0).toUpperCase() + bv.slice(1),\n        bu = bv,\n        bw = O.length;\n      while (bw--) {\n        bv = O[bw] + by;\n        if (bv in bx) {\n          return bv;\n        }\n      }\n      return bu;\n    }\n    function ap(bv, bu) {\n      bv = bu || bv;\n      return C.css(bv, \"display\") === \"none\" || !C.contains(bv.ownerDocument, bv);\n    }\n    function bb(bz, bu) {\n      var by,\n        bA,\n        bv = [],\n        bw = 0,\n        bx = bz.length;\n      for (; bw < bx; bw++) {\n        by = bz[bw];\n        if (!by.style) {\n          continue;\n        }\n        bv[bw] = C._data(by, \"olddisplay\");\n        if (bu) {\n          if (!bv[bw] && by.style.display === \"none\") {\n            by.style.display = \"\";\n          }\n          if (by.style.display === \"\" && ap(by)) {\n            bv[bw] = C._data(by, \"olddisplay\", aN(by.nodeName));\n          }\n        } else {\n          bA = Q(by, \"display\");\n          if (!bv[bw] && bA !== \"none\") {\n            C._data(by, \"olddisplay\", bA);\n          }\n        }\n      }\n      for (bw = 0; bw < bx; bw++) {\n        by = bz[bw];\n        if (!by.style) {\n          continue;\n        }\n        if (!bu || by.style.display === \"none\" || by.style.display === \"\") {\n          by.style.display = bu ? bv[bw] || \"\" : \"none\";\n        }\n      }\n      return bz;\n    }\n    C.fn.extend({\n      css: function css(bu, bv) {\n        return C.access(this, function (bx, bw, by) {\n          return by !== G ? C.style(bx, bw, by) : C.css(bx, bw);\n        }, bu, bv, arguments.length > 1);\n      },\n      show: function show() {\n        return bb(this, true);\n      },\n      hide: function hide() {\n        return bb(this);\n      },\n      toggle: function toggle(bw, bv) {\n        var bu = typeof bw === \"boolean\";\n        if (C.isFunction(bw) && C.isFunction(bv)) {\n          return be.apply(this, arguments);\n        }\n        return this.each(function () {\n          if (bu ? bw : ap(this)) {\n            C(this).show();\n          } else {\n            C(this).hide();\n          }\n        });\n      }\n    });\n    C.extend({\n      cssHooks: {\n        opacity: {\n          get: function get(bw, bv) {\n            if (bv) {\n              var bu = Q(bw, \"opacity\");\n              return bu === \"\" ? \"1\" : bu;\n            }\n          }\n        }\n      },\n      cssNumber: {\n        fillOpacity: true,\n        fontWeight: true,\n        lineHeight: true,\n        opacity: true,\n        orphans: true,\n        widows: true,\n        zIndex: true,\n        zoom: true\n      },\n      cssProps: {\n        \"float\": C.support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n      },\n      style: function style(bw, bv, bC, bx) {\n        if (!bw || bw.nodeType === 3 || bw.nodeType === 8 || !bw.style) {\n          return;\n        }\n        var bA,\n          bB,\n          bD,\n          by = C.camelCase(bv),\n          bu = bw.style;\n        bv = C.cssProps[by] || (C.cssProps[by] = a2(bu, by));\n        bD = C.cssHooks[bv] || C.cssHooks[by];\n        if (bC !== G) {\n          bB = _typeof(bC);\n          if (bB === \"string\" && (bA = E.exec(bC))) {\n            bC = (bA[1] + 1) * bA[2] + parseFloat(C.css(bw, bv));\n            bB = \"number\";\n          }\n          if (bC == null || bB === \"number\" && isNaN(bC)) {\n            return;\n          }\n          if (bB === \"number\" && !C.cssNumber[by]) {\n            bC += \"px\";\n          }\n          if (!bD || !(\"set\" in bD) || (bC = bD.set(bw, bC, bx)) !== G) {\n            try {\n              bu[bv] = bC;\n            } catch (bz) {}\n          }\n        } else {\n          if (bD && \"get\" in bD && (bA = bD.get(bw, false, bx)) !== G) {\n            return bA;\n          }\n          return bu[bv];\n        }\n      },\n      css: function css(bA, by, bz, bv) {\n        var bB,\n          bx,\n          bu,\n          bw = C.camelCase(by);\n        by = C.cssProps[bw] || (C.cssProps[bw] = a2(bA.style, bw));\n        bu = C.cssHooks[by] || C.cssHooks[bw];\n        if (bu && \"get\" in bu) {\n          bB = bu.get(bA, true, bv);\n        }\n        if (bB === G) {\n          bB = Q(bA, by);\n        }\n        if (bB === \"normal\" && by in aL) {\n          bB = aL[by];\n        }\n        if (bz || bv !== G) {\n          bx = parseFloat(bB);\n          return bz || C.isNumeric(bx) ? bx || 0 : bB;\n        }\n        return bB;\n      },\n      swap: function swap(by, bx, bz) {\n        var bw,\n          bv,\n          bu = {};\n        for (bv in bx) {\n          bu[bv] = by.style[bv];\n          by.style[bv] = bx[bv];\n        }\n        bw = bz.call(by);\n        for (bv in bx) {\n          by.style[bv] = bu[bv];\n        }\n        return bw;\n      }\n    });\n    if (bd.getComputedStyle) {\n      Q = function Q(bB, bv) {\n        var bu,\n          by,\n          bx,\n          bA,\n          bz = bd.getComputedStyle(bB, null),\n          bw = bB.style;\n        if (bz) {\n          bu = bz.getPropertyValue(bv) || bz[bv];\n          if (bu === \"\" && !C.contains(bB.ownerDocument, bB)) {\n            bu = C.style(bB, bv);\n          }\n          if (aV.test(bu) && av.test(bv)) {\n            by = bw.width;\n            bx = bw.minWidth;\n            bA = bw.maxWidth;\n            bw.minWidth = bw.maxWidth = bw.width = bu;\n            bu = bz.width;\n            bw.width = by;\n            bw.minWidth = bx;\n            bw.maxWidth = bA;\n          }\n        }\n        return bu;\n      };\n    } else {\n      if (ak.documentElement.currentStyle) {\n        Q = function Q(by, bw) {\n          var bz,\n            bu,\n            bv = by.currentStyle && by.currentStyle[bw],\n            bx = by.style;\n          if (bv == null && bx && bx[bw]) {\n            bv = bx[bw];\n          }\n          if (aV.test(bv) && !w.test(bw)) {\n            bz = bx.left;\n            bu = by.runtimeStyle && by.runtimeStyle.left;\n            if (bu) {\n              by.runtimeStyle.left = by.currentStyle.left;\n            }\n            bx.left = bw === \"fontSize\" ? \"1em\" : bv;\n            bv = bx.pixelLeft + \"px\";\n            bx.left = bz;\n            if (bu) {\n              by.runtimeStyle.left = bu;\n            }\n          }\n          return bv === \"\" ? \"auto\" : bv;\n        };\n      }\n    }\n    function aO(bu, bw, bx) {\n      var bv = i.exec(bw);\n      return bv ? Math.max(0, bv[1] - (bx || 0)) + (bv[2] || \"px\") : bw;\n    }\n    function aZ(bx, bv, bu, bz) {\n      var bw = bu === (bz ? \"border\" : \"content\") ? 4 : bv === \"width\" ? 1 : 0,\n        by = 0;\n      for (; bw < 4; bw += 2) {\n        if (bu === \"margin\") {\n          by += C.css(bx, bu + D[bw], true);\n        }\n        if (bz) {\n          if (bu === \"content\") {\n            by -= parseFloat(Q(bx, \"padding\" + D[bw])) || 0;\n          }\n          if (bu !== \"margin\") {\n            by -= parseFloat(Q(bx, \"border\" + D[bw] + \"Width\")) || 0;\n          }\n        } else {\n          by += parseFloat(Q(bx, \"padding\" + D[bw])) || 0;\n          if (bu !== \"padding\") {\n            by += parseFloat(Q(bx, \"border\" + D[bw] + \"Width\")) || 0;\n          }\n        }\n      }\n      return by;\n    }\n    function Y(bx, bv, bu) {\n      var by = bv === \"width\" ? bx.offsetWidth : bx.offsetHeight,\n        bw = true,\n        bz = C.support.boxSizing && C.css(bx, \"boxSizing\") === \"border-box\";\n      if (by <= 0 || by == null) {\n        by = Q(bx, bv);\n        if (by < 0 || by == null) {\n          by = bx.style[bv];\n        }\n        if (aV.test(by)) {\n          return by;\n        }\n        bw = bz && (C.support.boxSizingReliable || by === bx.style[bv]);\n        by = parseFloat(by) || 0;\n      }\n      return by + aZ(bx, bv, bu || (bz ? \"border\" : \"content\"), bw) + \"px\";\n    }\n    function aN(bw) {\n      if (J[bw]) {\n        return J[bw];\n      }\n      var bu = C(\"<\" + bw + \">\").appendTo(ak.body),\n        bv = bu.css(\"display\");\n      bu.remove();\n      if (bv === \"none\" || bv === \"\") {\n        bc = ak.body.appendChild(bc || C.extend(ak.createElement(\"iframe\"), {\n          frameBorder: 0,\n          width: 0,\n          height: 0\n        }));\n        if (!l || !bc.createElement) {\n          l = (bc.contentWindow || bc.contentDocument).document;\n          l.write(\"<!doctype html><html><body>\");\n          l.close();\n        }\n        bu = l.body.appendChild(l.createElement(bw));\n        bv = Q(bu, \"display\");\n        ak.body.removeChild(bc);\n      }\n      J[bw] = bv;\n      return bv;\n    }\n    C.each([\"height\", \"width\"], function (bv, bu) {\n      C.cssHooks[bu] = {\n        get: function get(by, bx, bw) {\n          if (bx) {\n            if (by.offsetWidth === 0 && ai.test(Q(by, \"display\"))) {\n              return C.swap(by, ba, function () {\n                return Y(by, bu, bw);\n              });\n            } else {\n              return Y(by, bu, bw);\n            }\n          }\n        },\n        set: function set(bx, by, bw) {\n          return aO(bx, by, bw ? aZ(bx, bu, bw, C.support.boxSizing && C.css(bx, \"boxSizing\") === \"border-box\") : 0);\n        }\n      };\n    });\n    if (!C.support.opacity) {\n      C.cssHooks.opacity = {\n        get: function get(bv, bu) {\n          return aj.test((bu && bv.currentStyle ? bv.currentStyle.filter : bv.style.filter) || \"\") ? 0.01 * parseFloat(RegExp.$1) + \"\" : bu ? \"1\" : \"\";\n        },\n        set: function set(by, bz) {\n          var bx = by.style,\n            bv = by.currentStyle,\n            bu = C.isNumeric(bz) ? \"alpha(opacity=\" + bz * 100 + \")\" : \"\",\n            bw = bv && bv.filter || bx.filter || \"\";\n          bx.zoom = 1;\n          if (bz >= 1 && C.trim(bw.replace(ad, \"\")) === \"\" && bx.removeAttribute) {\n            bx.removeAttribute(\"filter\");\n            if (bv && !bv.filter) {\n              return;\n            }\n          }\n          bx.filter = ad.test(bw) ? bw.replace(ad, bu) : bw + \" \" + bu;\n        }\n      };\n    }\n    C(function () {\n      if (!C.support.reliableMarginRight) {\n        C.cssHooks.marginRight = {\n          get: function get(bv, bu) {\n            return C.swap(bv, {\n              display: \"inline-block\"\n            }, function () {\n              if (bu) {\n                return Q(bv, \"marginRight\");\n              }\n            });\n          }\n        };\n      }\n      if (!C.support.pixelPosition && C.fn.position) {\n        C.each([\"top\", \"left\"], function (bu, bv) {\n          C.cssHooks[bv] = {\n            get: function get(by, bx) {\n              if (bx) {\n                var bw = Q(by, bv);\n                return aV.test(bw) ? C(by).position()[bv] + \"px\" : bw;\n              }\n            }\n          };\n        });\n      }\n    });\n    if (C.expr && C.expr.filters) {\n      C.expr.filters.hidden = function (bu) {\n        return bu.offsetWidth === 0 && bu.offsetHeight === 0 || !C.support.reliableHiddenOffsets && (bu.style && bu.style.display || Q(bu, \"display\")) === \"none\";\n      };\n      C.expr.filters.visible = function (bu) {\n        return !C.expr.filters.hidden(bu);\n      };\n    }\n    C.each({\n      margin: \"\",\n      padding: \"\",\n      border: \"Width\"\n    }, function (bu, bv) {\n      C.cssHooks[bu + bv] = {\n        expand: function expand(by) {\n          var bx,\n            bz = typeof by === \"string\" ? by.split(\" \") : [by],\n            bw = {};\n          for (bx = 0; bx < 4; bx++) {\n            bw[bu + D[bx] + bv] = bz[bx] || bz[bx - 2] || bz[0];\n          }\n          return bw;\n        }\n      };\n      if (!av.test(bu)) {\n        C.cssHooks[bu + bv].set = aO;\n      }\n    });\n    var g = /%20/g,\n      af = /\\[\\]$/,\n      br = /\\r?\\n/g,\n      aU = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,\n      p = /^(?:select|textarea)/i;\n    C.fn.extend({\n      serialize: function serialize() {\n        return C.param(this.serializeArray());\n      },\n      serializeArray: function serializeArray() {\n        return this.map(function () {\n          return this.elements ? C.makeArray(this.elements) : this;\n        }).filter(function () {\n          return this.name && !this.disabled && (this.checked || p.test(this.nodeName) || aU.test(this.type));\n        }).map(function (bu, bv) {\n          var bw = C(this).val();\n          return bw == null ? null : C.isArray(bw) ? C.map(bw, function (by, bx) {\n            return {\n              name: bv.name,\n              value: by.replace(br, \"\\r\\n\")\n            };\n          }) : {\n            name: bv.name,\n            value: bw.replace(br, \"\\r\\n\")\n          };\n        }).get();\n      }\n    });\n    C.param = function (bu, bw) {\n      var bx,\n        bv = [],\n        by = function by(bz, bA) {\n          bA = C.isFunction(bA) ? bA() : bA == null ? \"\" : bA;\n          bv[bv.length] = encodeURIComponent(bz) + \"=\" + encodeURIComponent(bA);\n        };\n      if (bw === G) {\n        bw = C.ajaxSettings && C.ajaxSettings.traditional;\n      }\n      if (C.isArray(bu) || bu.jqx && !C.isPlainObject(bu)) {\n        C.each(bu, function () {\n          by(this.name, this.value);\n        });\n      } else {\n        for (bx in bu) {\n          s(bx, bu[bx], bw, by);\n        }\n      }\n      return bv.join(\"&\").replace(g, \"+\");\n    };\n    function s(bw, by, bv, bx) {\n      var bu;\n      if (C.isArray(by)) {\n        C.each(by, function (bA, bz) {\n          if (bv || af.test(bw)) {\n            bx(bw, bz);\n          } else {\n            s(bw + \"[\" + (_typeof(bz) === \"object\" ? bA : \"\") + \"]\", bz, bv, bx);\n          }\n        });\n      } else {\n        if (!bv && C.type(by) === \"object\") {\n          for (bu in by) {\n            s(bw + \"[\" + bu + \"]\", by[bu], bv, bx);\n          }\n        } else {\n          bx(bw, by);\n        }\n      }\n    }\n    if (C.support.ajax) {\n      C.ajaxTransport(function (bu) {\n        if (!bu.crossDomain || C.support.cors) {\n          var _bv;\n          return {\n            send: function send(bB, bw) {\n              var bz,\n                by,\n                bA = bu.xhr();\n              if (bu.username) {\n                bA.open(bu.type, bu.url, bu.async, bu.username, bu.password);\n              } else {\n                bA.open(bu.type, bu.url, bu.async);\n              }\n              if (bu.xhrFields) {\n                for (by in bu.xhrFields) {\n                  bA[by] = bu.xhrFields[by];\n                }\n              }\n              if (bu.mimeType && bA.overrideMimeType) {\n                bA.overrideMimeType(bu.mimeType);\n              }\n              if (!bu.crossDomain && !bB[\"X-Requested-With\"]) {\n                bB[\"X-Requested-With\"] = \"XMLHttpRequest\";\n              }\n              try {\n                for (by in bB) {\n                  bA.setRequestHeader(by, bB[by]);\n                }\n              } catch (bx) {}\n              bA.send(bu.hasContent && bu.data || null);\n              _bv = function bv(bK, bE) {\n                var bF, bD, bC, bI, bH;\n                try {\n                  if (_bv && (bE || bA.readyState === 4)) {\n                    _bv = G;\n                    if (bz) {\n                      bA.onreadystatechange = C.noop;\n                      if (xhrOnUnloadAbort) {\n                        delete xhrCallbacks[bz];\n                      }\n                    }\n                    if (bE) {\n                      if (bA.readyState !== 4) {\n                        bA.abort();\n                      }\n                    } else {\n                      bF = bA.status;\n                      bC = bA.getAllResponseHeaders();\n                      bI = {};\n                      bH = bA.responseXML;\n                      if (bH && bH.documentElement) {\n                        bI.xml = bH;\n                      }\n                      try {\n                        bI.text = bA.responseText;\n                      } catch (bJ) {}\n                      try {\n                        bD = bA.statusText;\n                      } catch (bJ) {\n                        bD = \"\";\n                      }\n                      if (!bF && bu.isLocal && !bu.crossDomain) {\n                        bF = bI.text ? 200 : 404;\n                      } else {\n                        if (bF === 1223) {\n                          bF = 204;\n                        }\n                      }\n                    }\n                  }\n                } catch (bG) {\n                  if (!bE) {\n                    bw(-1, bG);\n                  }\n                }\n                if (bI) {\n                  bw(bF, bD, bI, bC);\n                }\n              };\n              if (!bu.async) {\n                _bv();\n              } else {\n                if (bA.readyState === 4) {\n                  setTimeout(_bv, 0);\n                } else {\n                  bz = ++xhrId;\n                  if (xhrOnUnloadAbort) {\n                    if (!xhrCallbacks) {\n                      xhrCallbacks = {};\n                      C(bd).unload(xhrOnUnloadAbort);\n                    }\n                    xhrCallbacks[bz] = _bv;\n                  }\n                  bA.onreadystatechange = _bv;\n                }\n              }\n            },\n            abort: function abort() {\n              if (_bv) {\n                _bv(0, 1);\n              }\n            }\n          };\n        }\n      });\n    }\n    var a6,\n      a1,\n      ar = /^(?:toggle|show|hide)$/,\n      aM = new RegExp(\"^(?:([-+])=|)(\" + aE + \")([a-z%]*)$\", \"i\"),\n      a7 = /queueHooks$/,\n      k = [bm],\n      H = {\n        \"*\": [function (bu, bB) {\n          var bx,\n            bC,\n            bD = this.createTween(bu, bB),\n            by = aM.exec(bB),\n            bz = bD.cur(),\n            bv = +bz || 0,\n            bw = 1,\n            bA = 20;\n          if (by) {\n            bx = +by[2];\n            bC = by[3] || (C.cssNumber[bu] ? \"\" : \"px\");\n            if (bC !== \"px\" && bv) {\n              bv = C.css(bD.elem, bu, true) || bx || 1;\n              do {\n                bw = bw || \".5\";\n                bv = bv / bw;\n                C.style(bD.elem, bu, bv + bC);\n              } while (bw !== (bw = bD.cur() / bz) && bw !== 1 && --bA);\n            }\n            bD.unit = bC;\n            bD.start = bv;\n            bD.end = by[1] ? bv + (by[1] + 1) * bx : bx;\n          }\n          return bD;\n        }]\n      };\n    function bl() {\n      setTimeout(function () {\n        a6 = G;\n      }, 0);\n      return a6 = C.now();\n    }\n    function Z(bv, bu) {\n      C.each(bu, function (bA, by) {\n        var bz = (H[bA] || []).concat(H[\"*\"]),\n          bw = 0,\n          bx = bz.length;\n        for (; bw < bx; bw++) {\n          if (bz[bw].call(bv, bA, by)) {\n            return;\n          }\n        }\n      });\n    }\n    function bj(bw, bA, bD) {\n      var bE,\n        bz = 0,\n        bu = 0,\n        bv = k.length,\n        bC = C.Deferred().always(function () {\n          delete by.elem;\n        }),\n        by = function by() {\n          var bK = a6 || bl(),\n            bH = Math.max(0, bx.startTime + bx.duration - bK),\n            bF = bH / bx.duration || 0,\n            bJ = 1 - bF,\n            bG = 0,\n            bI = bx.tweens.length;\n          for (; bG < bI; bG++) {\n            bx.tweens[bG].run(bJ);\n          }\n          bC.notifyWith(bw, [bx, bJ, bH]);\n          if (bJ < 1 && bI) {\n            return bH;\n          } else {\n            bC.resolveWith(bw, [bx]);\n            return false;\n          }\n        },\n        bx = bC.promise({\n          elem: bw,\n          props: C.extend({}, bA),\n          opts: C.extend(true, {\n            specialEasing: {}\n          }, bD),\n          originalProperties: bA,\n          originalOptions: bD,\n          startTime: a6 || bl(),\n          duration: bD.duration,\n          tweens: [],\n          createTween: function createTween(bI, bF, bH) {\n            var bG = C.Tween(bw, bx.opts, bI, bF, bx.opts.specialEasing[bI] || bx.opts.easing);\n            bx.tweens.push(bG);\n            return bG;\n          },\n          stop: function stop(bG) {\n            var bF = 0,\n              bH = bG ? bx.tweens.length : 0;\n            for (; bF < bH; bF++) {\n              bx.tweens[bF].run(1);\n            }\n            if (bG) {\n              bC.resolveWith(bw, [bx, bG]);\n            } else {\n              bC.rejectWith(bw, [bx, bG]);\n            }\n            return this;\n          }\n        }),\n        bB = bx.props;\n      aW(bB, bx.opts.specialEasing);\n      for (; bz < bv; bz++) {\n        bE = k[bz].call(bx, bw, bB, bx.opts);\n        if (bE) {\n          return bE;\n        }\n      }\n      Z(bx, bB);\n      if (C.isFunction(bx.opts.start)) {\n        bx.opts.start.call(bw, bx);\n      }\n      C.fx.timer(C.extend(by, {\n        anim: bx,\n        queue: bx.opts.queue,\n        elem: bw\n      }));\n      return bx.progress(bx.opts.progress).done(bx.opts.done, bx.opts.complete).fail(bx.opts.fail).always(bx.opts.always);\n    }\n    function aW(bx, bz) {\n      var bw, bv, bA, by, bu;\n      for (bw in bx) {\n        bv = C.camelCase(bw);\n        bA = bz[bv];\n        by = bx[bw];\n        if (C.isArray(by)) {\n          bA = by[1];\n          by = bx[bw] = by[0];\n        }\n        if (bw !== bv) {\n          bx[bv] = by;\n          delete bx[bw];\n        }\n        bu = C.cssHooks[bv];\n        if (bu && \"expand\" in bu) {\n          by = bu.expand(by);\n          delete bx[bv];\n          for (bw in by) {\n            if (!(bw in bx)) {\n              bx[bw] = by[bw];\n              bz[bw] = bA;\n            }\n          }\n        } else {\n          bz[bv] = bA;\n        }\n      }\n    }\n    C.Animation = C.extend(bj, {\n      tweener: function tweener(bv, by) {\n        if (C.isFunction(bv)) {\n          by = bv;\n          bv = [\"*\"];\n        } else {\n          bv = bv.split(\" \");\n        }\n        var bx,\n          bu = 0,\n          bw = bv.length;\n        for (; bu < bw; bu++) {\n          bx = bv[bu];\n          H[bx] = H[bx] || [];\n          H[bx].unshift(by);\n        }\n      },\n      prefilter: function prefilter(bv, bu) {\n        if (bu) {\n          k.unshift(bv);\n        } else {\n          k.push(bv);\n        }\n      }\n    });\n    function bm(by, bE, bu) {\n      var bD,\n        bw,\n        bG,\n        bx,\n        bK,\n        bA,\n        bJ,\n        bI,\n        bH,\n        bz = this,\n        bv = by.style,\n        bF = {},\n        bC = [],\n        bB = by.nodeType && ap(by);\n      if (!bu.queue) {\n        bI = C._queueHooks(by, \"fx\");\n        if (bI.unqueued == null) {\n          bI.unqueued = 0;\n          bH = bI.empty.fire;\n          bI.empty.fire = function () {\n            if (!bI.unqueued) {\n              bH();\n            }\n          };\n        }\n        bI.unqueued++;\n        bz.always(function () {\n          bz.always(function () {\n            bI.unqueued--;\n            if (!C.queue(by, \"fx\").length) {\n              bI.empty.fire();\n            }\n          });\n        });\n      }\n      if (by.nodeType === 1 && (\"height\" in bE || \"width\" in bE)) {\n        bu.overflow = [bv.overflow, bv.overflowX, bv.overflowY];\n        if (C.css(by, \"display\") === \"inline\" && C.css(by, \"float\") === \"none\") {\n          if (!C.support.inlineBlockNeedsLayout || aN(by.nodeName) === \"inline\") {\n            bv.display = \"inline-block\";\n          } else {\n            bv.zoom = 1;\n          }\n        }\n      }\n      if (bu.overflow) {\n        bv.overflow = \"hidden\";\n        if (!C.support.shrinkWrapBlocks) {\n          bz.done(function () {\n            bv.overflow = bu.overflow[0];\n            bv.overflowX = bu.overflow[1];\n            bv.overflowY = bu.overflow[2];\n          });\n        }\n      }\n      for (bD in bE) {\n        bG = bE[bD];\n        if (ar.exec(bG)) {\n          delete bE[bD];\n          bA = bA || bG === \"toggle\";\n          if (bG === (bB ? \"hide\" : \"show\")) {\n            continue;\n          }\n          bC.push(bD);\n        }\n      }\n      bx = bC.length;\n      if (bx) {\n        bK = C._data(by, \"fxshow\") || C._data(by, \"fxshow\", {});\n        if (\"hidden\" in bK) {\n          bB = bK.hidden;\n        }\n        if (bA) {\n          bK.hidden = !bB;\n        }\n        if (bB) {\n          C(by).show();\n        } else {\n          bz.done(function () {\n            C(by).hide();\n          });\n        }\n        bz.done(function () {\n          var bL;\n          C.removeData(by, \"fxshow\", true);\n          for (bL in bF) {\n            C.style(by, bL, bF[bL]);\n          }\n        });\n        for (bD = 0; bD < bx; bD++) {\n          bw = bC[bD];\n          bJ = bz.createTween(bw, bB ? bK[bw] : 0);\n          bF[bw] = bK[bw] || C.style(by, bw);\n          if (!(bw in bK)) {\n            bK[bw] = bJ.start;\n            if (bB) {\n              bJ.end = bJ.start;\n              bJ.start = bw === \"width\" || bw === \"height\" ? 1 : 0;\n            }\n          }\n        }\n      }\n    }\n    function u(bw, bv, by, bu, bx) {\n      return new u.prototype.init(bw, bv, by, bu, bx);\n    }\n    C.Tween = u;\n    u.prototype = {\n      constructor: u,\n      init: function init(bx, bv, bz, bu, by, bw) {\n        this.elem = bx;\n        this.prop = bz;\n        this.easing = by || \"swing\";\n        this.options = bv;\n        this.start = this.now = this.cur();\n        this.end = bu;\n        this.unit = bw || (C.cssNumber[bz] ? \"\" : \"px\");\n      },\n      cur: function cur() {\n        var bu = u.propHooks[this.prop];\n        return bu && bu.get ? bu.get(this) : u.propHooks._default.get(this);\n      },\n      run: function run(bw) {\n        var bv,\n          bu = u.propHooks[this.prop];\n        if (this.options.duration) {\n          this.pos = bv = C.easing[this.easing](bw, this.options.duration * bw, 0, 1, this.options.duration);\n        } else {\n          this.pos = bv = bw;\n        }\n        this.now = (this.end - this.start) * bv + this.start;\n        if (this.options.step) {\n          this.options.step.call(this.elem, this.now, this);\n        }\n        if (bu && bu.set) {\n          bu.set(this);\n        } else {\n          u.propHooks._default.set(this);\n        }\n        return this;\n      }\n    };\n    u.prototype.init.prototype = u.prototype;\n    u.propHooks = {\n      _default: {\n        get: function get(bv) {\n          var bu;\n          if (bv.elem[bv.prop] != null && (!bv.elem.style || bv.elem.style[bv.prop] == null)) {\n            return bv.elem[bv.prop];\n          }\n          bu = C.css(bv.elem, bv.prop, false, \"\");\n          return !bu || bu === \"auto\" ? 0 : bu;\n        },\n        set: function set(bu) {\n          if (C.fx.step[bu.prop]) {\n            C.fx.step[bu.prop](bu);\n          } else {\n            if (bu.elem.style && (bu.elem.style[C.cssProps[bu.prop]] != null || C.cssHooks[bu.prop])) {\n              C.style(bu.elem, bu.prop, bu.now + bu.unit);\n            } else {\n              bu.elem[bu.prop] = bu.now;\n            }\n          }\n        }\n      }\n    };\n    u.propHooks.scrollTop = u.propHooks.scrollLeft = {\n      set: function set(bu) {\n        if (bu.elem.nodeType && bu.elem.parentNode) {\n          bu.elem[bu.prop] = bu.now;\n        }\n      }\n    };\n    C.each([\"toggle\", \"show\", \"hide\"], function (bv, bu) {\n      var bw = C.fn[bu];\n      C.fn[bu] = function (bx, bz, by) {\n        return bx == null || typeof bx === \"boolean\" || !bv && C.isFunction(bx) && C.isFunction(bz) ? bw.apply(this, arguments) : this.animate(aY(bu, true), bx, bz, by);\n      };\n    });\n    C.fn.extend({\n      fadeTo: function fadeTo(bu, bx, bw, bv) {\n        return this.filter(ap).css(\"opacity\", 0).show().end().animate({\n          opacity: bx\n        }, bu, bw, bv);\n      },\n      animate: function animate(bA, bx, bz, by) {\n        var bw = C.isEmptyObject(bA),\n          bu = C.speed(bx, bz, by),\n          bv = function bv() {\n            var bB = bj(this, C.extend({}, bA), bu);\n            if (bw) {\n              bB.stop(true);\n            }\n          };\n        return bw || bu.queue === false ? this.each(bv) : this.queue(bu.queue, bv);\n      },\n      stop: function stop(bw, bv, bu) {\n        var bx = function bx(by) {\n          var bz = by.stop;\n          delete by.stop;\n          bz(bu);\n        };\n        if (typeof bw !== \"string\") {\n          bu = bv;\n          bv = bw;\n          bw = G;\n        }\n        if (bv && bw !== false) {\n          this.queue(bw || \"fx\", []);\n        }\n        return this.each(function () {\n          var bB = true,\n            by = bw != null && bw + \"queueHooks\",\n            bA = C.timers,\n            bz = C._data(this);\n          if (by) {\n            if (bz[by] && bz[by].stop) {\n              bx(bz[by]);\n            }\n          } else {\n            for (by in bz) {\n              if (bz[by] && bz[by].stop && a7.test(by)) {\n                bx(bz[by]);\n              }\n            }\n          }\n          for (by = bA.length; by--;) {\n            if (bA[by].elem === this && (bw == null || bA[by].queue === bw)) {\n              bA[by].anim.stop(bu);\n              bB = false;\n              bA.splice(by, 1);\n            }\n          }\n          if (bB || !bu) {\n            C.dequeue(this, bw);\n          }\n        });\n      }\n    });\n    function aY(bw, by) {\n      var bx,\n        bu = {\n          height: bw\n        },\n        bv = 0;\n      by = by ? 1 : 0;\n      for (; bv < 4; bv += 2 - by) {\n        bx = D[bv];\n        bu[\"margin\" + bx] = bu[\"padding\" + bx] = bw;\n      }\n      if (by) {\n        bu.opacity = bu.width = bw;\n      }\n      return bu;\n    }\n    C.each({\n      slideDown: aY(\"show\"),\n      slideUp: aY(\"hide\"),\n      slideToggle: aY(\"toggle\"),\n      fadeIn: {\n        opacity: \"show\"\n      },\n      fadeOut: {\n        opacity: \"hide\"\n      },\n      fadeToggle: {\n        opacity: \"toggle\"\n      }\n    }, function (bu, bv) {\n      C.fn[bu] = function (bw, by, bx) {\n        return this.animate(bv, bw, by, bx);\n      };\n    });\n    C.speed = function (bw, bx, bv) {\n      var bu = bw && _typeof(bw) === \"object\" ? C.extend({}, bw) : {\n        complete: bv || !bv && bx || C.isFunction(bw) && bw,\n        duration: bw,\n        easing: bv && bx || bx && !C.isFunction(bx) && bx\n      };\n      bu.duration = C.fx.off ? 0 : typeof bu.duration === \"number\" ? bu.duration : bu.duration in C.fx.speeds ? C.fx.speeds[bu.duration] : C.fx.speeds._default;\n      if (bu.queue == null || bu.queue === true) {\n        bu.queue = \"fx\";\n      }\n      bu.old = bu.complete;\n      bu.complete = function () {\n        if (C.isFunction(bu.old)) {\n          bu.old.call(this);\n        }\n        if (bu.queue) {\n          C.dequeue(this, bu.queue);\n        }\n      };\n      return bu;\n    };\n    C.easing = {\n      linear: function linear(bu) {\n        return bu;\n      },\n      swing: function swing(bu) {\n        return 0.5 - Math.cos(bu * Math.PI) / 2;\n      }\n    };\n    C.timers = [];\n    C.fx = u.prototype.init;\n    C.fx.tick = function () {\n      var bw,\n        bv = C.timers,\n        bu = 0;\n      a6 = C.now();\n      for (; bu < bv.length; bu++) {\n        bw = bv[bu];\n        if (!bw() && bv[bu] === bw) {\n          bv.splice(bu--, 1);\n        }\n      }\n      if (!bv.length) {\n        C.fx.stop();\n      }\n      a6 = G;\n    };\n    C.fx.timer = function (bu) {\n      if (bu() && C.timers.push(bu) && !a1) {\n        a1 = setInterval(C.fx.tick, C.fx.interval);\n      }\n    };\n    C.fx.interval = 13;\n    C.fx.stop = function () {\n      clearInterval(a1);\n      a1 = null;\n    };\n    C.fx.speeds = {\n      slow: 600,\n      fast: 200,\n      _default: 400\n    };\n    C.fx.step = {};\n    if (C.expr && C.expr.filters) {\n      C.expr.filters.animated = function (bu) {\n        return C.grep(C.timers, function (bv) {\n          return bu === bv.elem;\n        }).length;\n      };\n    }\n    var V = /^(?:body|html)$/i;\n    C.fn.offset = function (bE) {\n      if (arguments.length) {\n        return bE === G ? this : this.each(function (bF) {\n          C.offset.setOffset(this, bE, bF);\n        });\n      }\n      var bv,\n        bA,\n        bB,\n        by,\n        bC,\n        bu,\n        bx,\n        bz = {\n          top: 0,\n          left: 0\n        },\n        bw = this[0],\n        bD = bw && bw.ownerDocument;\n      if (!bD) {\n        return;\n      }\n      if ((bA = bD.body) === bw) {\n        return C.offset.bodyOffset(bw);\n      }\n      bv = bD.documentElement;\n      if (!C.contains(bv, bw)) {\n        return bz;\n      }\n      if (typeof bw.getBoundingClientRect !== \"undefined\") {\n        bz = bw.getBoundingClientRect();\n      }\n      bB = aC(bD);\n      by = bv.clientTop || bA.clientTop || 0;\n      bC = bv.clientLeft || bA.clientLeft || 0;\n      bu = bB.pageYOffset || bv.scrollTop;\n      bx = bB.pageXOffset || bv.scrollLeft;\n      return {\n        top: bz.top + bu - by,\n        left: bz.left + bx - bC\n      };\n    };\n    C.offset = {\n      bodyOffset: function bodyOffset(bu) {\n        var bw = bu.offsetTop,\n          bv = bu.offsetLeft;\n        if (C.support.doesNotIncludeMarginInBodyOffset) {\n          bw += parseFloat(C.css(bu, \"marginTop\")) || 0;\n          bv += parseFloat(C.css(bu, \"marginLeft\")) || 0;\n        }\n        return {\n          top: bw,\n          left: bv\n        };\n      },\n      setOffset: function setOffset(bx, bG, bA) {\n        var bB = C.css(bx, \"position\");\n        if (bB === \"static\") {\n          bx.style.position = \"relative\";\n        }\n        var bz = C(bx),\n          bv = bz.offset(),\n          bu = C.css(bx, \"top\"),\n          bE = C.css(bx, \"left\"),\n          bF = (bB === \"absolute\" || bB === \"fixed\") && C.inArray(\"auto\", [bu, bE]) > -1,\n          bD = {},\n          bC = {},\n          bw,\n          by;\n        if (bF) {\n          bC = bz.position();\n          bw = bC.top;\n          by = bC.left;\n        } else {\n          bw = parseFloat(bu) || 0;\n          by = parseFloat(bE) || 0;\n        }\n        if (C.isFunction(bG)) {\n          bG = bG.call(bx, bA, bv);\n        }\n        if (bG.top != null) {\n          bD.top = bG.top - bv.top + bw;\n        }\n        if (bG.left != null) {\n          bD.left = bG.left - bv.left + by;\n        }\n        if (\"using\" in bG) {\n          bG.using.call(bx, bD);\n        } else {\n          bz.css(bD);\n        }\n      }\n    };\n    C.fn.extend({\n      isRendered: function isRendered() {\n        var bv = this;\n        var bu = this[0];\n        if (bu.parentNode == null || bu.offsetWidth === 0 || bu.offsetHeight === 0) {\n          return false;\n        }\n        return true;\n      },\n      getSizeFromStyle: function getSizeFromStyle() {\n        var by = this;\n        var bx = null;\n        var bu = null;\n        var bw = this[0];\n        var bv;\n        if (bw.style.width) {\n          bx = bw.style.width;\n        }\n        if (bw.style.height) {\n          bu = bw.style.height;\n        }\n        if (bd.getComputedStyle) {\n          bv = getComputedStyle(bw, null);\n        } else {\n          bv = bw.currentStyle;\n        }\n        if (bv) {\n          if (bv.width) {\n            bx = bv.width;\n          }\n          if (bv.height) {\n            bu = bv.height;\n          }\n        }\n        if (bx === \"0px\") {\n          bx = 0;\n        }\n        if (bu === \"0px\") {\n          bu = 0;\n        }\n        if (bx === null) {\n          bx = 0;\n        }\n        if (bu === null) {\n          bu = 0;\n        }\n        return {\n          width: bx,\n          height: bu\n        };\n      },\n      initAnimate: function initAnimate() {},\n      sizeStyleChanged: function sizeStyleChanged(bx) {\n        var bw = this;\n        var by;\n        var bu = function bu(bz) {\n          var bA = by;\n          if (bz && bz[0] && bz[0].attributeName === \"style\" && bz[0].type === \"attributes\") {\n            if (bA.element.offsetWidth !== bA.offsetWidth || bA.element.offsetHeight !== bA.offsetHeight) {\n              bA.offsetWidth = bA.element.offsetWidth;\n              bA.offsetHeight = bA.element.offsetHeight;\n              if (bw.isRendered()) {\n                bA.callback();\n              }\n            }\n          }\n        };\n        by = {\n          element: bw[0],\n          offsetWidth: bw[0].offsetWidth,\n          offsetHeight: bw[0].offsetHeight,\n          callback: bx\n        };\n        try {\n          if (!bw.elementStyleObserver) {\n            bw.elementStyleObserver = new MutationObserver(bu);\n            bw.elementStyleObserver.observe(bw[0], {\n              attributes: true,\n              childList: false,\n              characterData: false\n            });\n          }\n        } catch (bv) {}\n      },\n      position: function position() {\n        if (!this[0]) {\n          return;\n        }\n        var bw = this[0],\n          bv = this.offsetParent(),\n          bx = this.offset(),\n          bu = V.test(bv[0].nodeName) ? {\n            top: 0,\n            left: 0\n          } : bv.offset();\n        bx.top -= parseFloat(C.css(bw, \"marginTop\")) || 0;\n        bx.left -= parseFloat(C.css(bw, \"marginLeft\")) || 0;\n        bu.top += parseFloat(C.css(bv[0], \"borderTopWidth\")) || 0;\n        bu.left += parseFloat(C.css(bv[0], \"borderLeftWidth\")) || 0;\n        return {\n          top: bx.top - bu.top,\n          left: bx.left - bu.left\n        };\n      },\n      offsetParent: function offsetParent() {\n        return this.map(function () {\n          var bu = this.offsetParent || ak.body;\n          while (bu && !V.test(bu.nodeName) && C.css(bu, \"position\") === \"static\") {\n            bu = bu.offsetParent;\n          }\n          return bu || ak.body;\n        });\n      }\n    });\n    C.each({\n      scrollLeft: \"pageXOffset\",\n      scrollTop: \"pageYOffset\"\n    }, function (bw, bv) {\n      var bu = /Y/.test(bv);\n      C.fn[bw] = function (bx) {\n        return C.access(this, function (by, bB, bA) {\n          var bz = aC(by);\n          if (bA === G) {\n            return bz ? bv in bz ? bz[bv] : bz.document.documentElement[bB] : by[bB];\n          }\n          if (bz) {\n            bz.scrollTo(!bu ? bA : C(bz).scrollLeft(), bu ? bA : C(bz).scrollTop());\n          } else {\n            by[bB] = bA;\n          }\n        }, bw, bx, arguments.length, null);\n      };\n    });\n    function aC(bu) {\n      return C.isWindow(bu) ? bu : bu.nodeType === 9 ? bu.defaultView || bu.parentWindow : false;\n    }\n    C.each({\n      Height: \"height\",\n      Width: \"width\"\n    }, function (bu, bv) {\n      C.each({\n        padding: \"inner\" + bu,\n        content: bv,\n        \"\": \"outer\" + bu\n      }, function (bw, bx) {\n        C.fn[bx] = function (bB, bA) {\n          var bz = arguments.length && (bw || typeof bB !== \"boolean\"),\n            by = bw || (bB === true || bA === true ? \"margin\" : \"border\");\n          return C.access(this, function (bD, bC, bE) {\n            var bF;\n            if (C.isWindow(bD)) {\n              return bD.document.documentElement[\"client\" + bu];\n            }\n            if (bD.nodeType === 9) {\n              bF = bD.documentElement;\n              return Math.max(bD.body[\"scroll\" + bu], bF[\"scroll\" + bu], bD.body[\"offset\" + bu], bF[\"offset\" + bu], bF[\"client\" + bu]);\n            }\n            return bE === G ? C.css(bD, bC, bE, by) : C.style(bD, bC, bE, by);\n          }, bv, bz ? bB : G, bz, null);\n        };\n      });\n    });\n    bd.JQXLite = bd.jqxHelper = C;\n    if ( true && __webpack_require__.amdO.JQXLite) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return C;\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  })(window);\n}\n(function (a) {\n  if (a.jqxCore) {\n    a.$$ = a.minQuery = a.JQXLite;\n    if (!a.$) {\n      a.$ = a.minQuery;\n    }\n    return;\n  }\n  if (a.jQuery) {\n    a.minQuery = a.JQXLite = a.jQuery;\n    return;\n  }\n  if (!a.$) {\n    a.$ = a.minQuery = a.JQXLite;\n  } else {\n    a.minQuery = a.JQXLite = a.$;\n  }\n})(window);\nJQXLite.generateID = function () {\n  var a = function a() {\n    return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);\n  };\n  var b = \"\";\n  do {\n    b = \"jqx\" + a() + a() + a();\n  } while ($(\"#\" + b).length > 0);\n  return b;\n};\nvar jqxBaseFramework = window.jqxBaseFramework = window.minQuery || window.jQuery;\n(function (b) {\n  b.jqx = b.jqx || {};\n  window.jqx = b.jqx;\n  var a = {\n    createInstance: function createInstance(c, e, g) {\n      if (e == \"jqxDataAdapter\") {\n        var f = g[0];\n        var d = g[1] || {};\n        return new b.jqx.dataAdapter(f, d);\n      }\n      b(c)[e](g || {});\n      return b(c)[e](\"getInstance\");\n    }\n  };\n  window.jqwidgets = a;\n  b.jqx.define = function (c, d, e) {\n    c[d] = function () {\n      if (this.baseType) {\n        this.base = new c[this.baseType]();\n        this.base.defineInstance();\n      }\n      this.defineInstance();\n      this.metaInfo();\n    };\n    c[d].prototype.defineInstance = function () {};\n    c[d].prototype.metaInfo = function () {};\n    c[d].prototype.base = null;\n    c[d].prototype.baseType = undefined;\n    if (e && c[e]) {\n      c[d].prototype.baseType = e;\n    }\n  };\n  b.jqx.invoke = function (f, e) {\n    if (e.length == 0) {\n      return;\n    }\n    var g = _typeof(e) == Array || e.length > 0 ? e[0] : e;\n    var d = _typeof(e) == Array || e.length > 1 ? Array.prototype.slice.call(e, 1) : b({}).toArray();\n    while (f[g] == undefined && f.base != null) {\n      if (f[g] != undefined && b.isFunction(f[g])) {\n        return f[g].apply(f, d);\n      }\n      if (typeof g == \"string\") {\n        var c = g.toLowerCase();\n        if (f[c] != undefined && b.isFunction(f[c])) {\n          return f[c].apply(f, d);\n        }\n      }\n      f = f.base;\n    }\n    if (f[g] != undefined && b.isFunction(f[g])) {\n      return f[g].apply(f, d);\n    }\n    if (typeof g == \"string\") {\n      var c = g.toLowerCase();\n      if (f[c] != undefined && b.isFunction(f[c])) {\n        return f[c].apply(f, d);\n      }\n    }\n    return;\n  };\n  b.jqx.getByPriority = function (c) {\n    var e = undefined;\n    for (var d = 0; d < c.length && e == undefined; d++) {\n      if (e == undefined && c[d] != undefined) {\n        e = c[d];\n      }\n    }\n    return e;\n  };\n  b.jqx.hasProperty = function (d, c) {\n    if (_typeof(c) == \"object\") {\n      for (var f in c) {\n        var e = d;\n        while (e) {\n          if (e.hasOwnProperty(f)) {\n            return true;\n          }\n          if (e.hasOwnProperty(f.toLowerCase())) {\n            return true;\n          }\n          e = e.base;\n        }\n        return false;\n      }\n    } else {\n      while (d) {\n        if (d.hasOwnProperty(c)) {\n          return true;\n        }\n        if (d.hasOwnProperty(c.toLowerCase())) {\n          return true;\n        }\n        d = d.base;\n      }\n    }\n    return false;\n  };\n  b.jqx.hasFunction = function (f, e) {\n    if (e.length == 0) {\n      return false;\n    }\n    if (f == undefined) {\n      return false;\n    }\n    var g = _typeof(e) == Array || e.length > 0 ? e[0] : e;\n    var d = _typeof(e) == Array || e.length > 1 ? Array.prototype.slice.call(e, 1) : {};\n    while (f[g] == undefined && f.base != null) {\n      if (f[g] && b.isFunction(f[g])) {\n        return true;\n      }\n      if (typeof g == \"string\") {\n        var c = g.toLowerCase();\n        if (f[c] && b.isFunction(f[c])) {\n          return true;\n        }\n      }\n      f = f.base;\n    }\n    if (f[g] && b.isFunction(f[g])) {\n      return true;\n    }\n    if (typeof g == \"string\") {\n      var c = g.toLowerCase();\n      if (f[c] && b.isFunction(f[c])) {\n        return true;\n      }\n    }\n    return false;\n  };\n  b.jqx.isPropertySetter = function (d, c) {\n    if (c.length == 1 && _typeof(c[0]) == \"object\") {\n      return true;\n    }\n    if (c.length == 2 && typeof c[0] == \"string\" && !b.jqx.hasFunction(d, c)) {\n      return true;\n    }\n    return false;\n  };\n  b.jqx.validatePropertySetter = function (g, e, c) {\n    if (!b.jqx.propertySetterValidation) {\n      return true;\n    }\n    if (e.length == 1 && _typeof(e[0]) == \"object\") {\n      for (var f in e[0]) {\n        var h = g;\n        while (!h.hasOwnProperty(f) && h.base) {\n          h = h.base;\n        }\n        if (!h || !h.hasOwnProperty(f)) {\n          if (!c) {\n            var d = h.hasOwnProperty(f.toString().toLowerCase());\n            if (!d) {\n              throw \"Invalid property: \" + f;\n            } else {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n      return true;\n    }\n    if (e.length != 2) {\n      if (!c) {\n        throw \"Invalid property: \" + e.length >= 0 ? e[0] : \"\";\n      }\n      return false;\n    }\n    while (!g.hasOwnProperty(e[0]) && g.base) {\n      g = g.base;\n    }\n    if (!g || !g.hasOwnProperty(e[0])) {\n      if (!c) {\n        throw \"Invalid property: \" + e[0];\n      }\n      return false;\n    }\n    return true;\n  };\n  if (!Object.keys) {\n    Object.keys = function () {\n      var e = Object.prototype.hasOwnProperty,\n        f = !{\n          toString: null\n        }.propertyIsEnumerable(\"toString\"),\n        d = [\"toString\", \"toLocaleString\", \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"constructor\"],\n        c = d.length;\n      return function (j) {\n        if (_typeof(j) !== \"object\" && (typeof j !== \"function\" || j === null)) {\n          throw new TypeError(\"Object.keys called on non-object\");\n        }\n        var g = [],\n          k,\n          h;\n        for (k in j) {\n          if (e.call(j, k)) {\n            g.push(k);\n          }\n        }\n        if (f) {\n          for (h = 0; h < c; h++) {\n            if (e.call(j, d[h])) {\n              g.push(d[h]);\n            }\n          }\n        }\n        return g;\n      };\n    }();\n  }\n  b.jqx.set = function (f, i) {\n    var d = 0;\n    if (i.length == 1 && _typeof(i[0]) == \"object\") {\n      if (f.isInitialized && Object.keys && Object.keys(i[0]).length > 1) {\n        var g = !f.base ? f.element : f.base.element;\n        var c = b.data(g, f.widgetName).initArgs;\n        if (c && JSON && JSON.stringify && i[0] && c[0]) {\n          try {\n            if (JSON.stringify(i[0]) == JSON.stringify(c[0])) {\n              var h = true;\n              b.each(i[0], function (l, m) {\n                if (f[l] != m) {\n                  h = false;\n                  return false;\n                }\n              });\n              if (h) {\n                return;\n              }\n            }\n          } catch (e) {}\n        }\n        f.batchUpdate = i[0];\n        var j = {};\n        var k = {};\n        b.each(i[0], function (l, m) {\n          var n = f;\n          while (!n.hasOwnProperty(l) && n.base != null) {\n            n = n.base;\n          }\n          if (n.hasOwnProperty(l)) {\n            if (f[l] != m) {\n              j[l] = f[l];\n              k[l] = m;\n              d++;\n            }\n          } else {\n            if (n.hasOwnProperty(l.toLowerCase())) {\n              if (f[l.toLowerCase()] != m) {\n                j[l.toLowerCase()] = f[l.toLowerCase()];\n                k[l.toLowerCase()] = m;\n                d++;\n              }\n            }\n          }\n        });\n        if (d < 2) {\n          f.batchUpdate = null;\n        }\n      }\n      b.each(i[0], function (l, m) {\n        var n = f;\n        while (!n.hasOwnProperty(l) && n.base != null) {\n          n = n.base;\n        }\n        if (n.hasOwnProperty(l)) {\n          b.jqx.setvalueraiseevent(n, l, m);\n        } else {\n          if (n.hasOwnProperty(l.toLowerCase())) {\n            b.jqx.setvalueraiseevent(n, l.toLowerCase(), m);\n          } else {\n            if (b.jqx.propertySetterValidation) {\n              throw \"jqxCore: invalid property '\" + l + \"'\";\n            }\n          }\n        }\n      });\n      if (f.batchUpdate != null) {\n        f.batchUpdate = null;\n        if (f.propertiesChangedHandler && d > 1) {\n          f.propertiesChangedHandler(f, j, k);\n        }\n      }\n    } else {\n      if (i.length == 2) {\n        while (!f.hasOwnProperty(i[0]) && f.base) {\n          f = f.base;\n        }\n        if (f.hasOwnProperty(i[0])) {\n          b.jqx.setvalueraiseevent(f, i[0], i[1]);\n        } else {\n          if (f.hasOwnProperty(i[0].toLowerCase())) {\n            b.jqx.setvalueraiseevent(f, i[0].toLowerCase(), i[1]);\n          } else {\n            if (b.jqx.propertySetterValidation) {\n              throw \"jqxCore: invalid property '\" + i[0] + \"'\";\n            }\n          }\n        }\n      }\n    }\n  };\n  b.jqx.setvalueraiseevent = function (d, e, f) {\n    var c = d[e];\n    d[e] = f;\n    if (!d.isInitialized) {\n      return;\n    }\n    if (d.propertyChangedHandler != undefined) {\n      d.propertyChangedHandler(d, e, c, f);\n    }\n    if (d.propertyChangeMap != undefined && d.propertyChangeMap[e] != undefined) {\n      d.propertyChangeMap[e](d, e, c, f);\n    }\n  };\n  b.jqx.get = function (f, e) {\n    if (e == undefined || e == null) {\n      return undefined;\n    }\n    if (f.propertyMap) {\n      var d = f.propertyMap(e);\n      if (d != null) {\n        return d;\n      }\n    }\n    if (f.hasOwnProperty(e)) {\n      return f[e];\n    }\n    if (f.hasOwnProperty(e.toLowerCase())) {\n      return f[e.toLowerCase()];\n    }\n    var c = undefined;\n    if (_typeof(e) == Array) {\n      if (e.length != 1) {\n        return undefined;\n      }\n      c = e[0];\n    } else {\n      if (typeof e == \"string\") {\n        c = e;\n      }\n    }\n    while (!f.hasOwnProperty(c) && f.base) {\n      f = f.base;\n    }\n    if (f) {\n      return f[c];\n    }\n    return undefined;\n  };\n  b.jqx.serialize = function (f) {\n    var c = \"\";\n    if (b.isArray(f)) {\n      c = \"[\";\n      for (var e = 0; e < f.length; e++) {\n        if (e > 0) {\n          c += \", \";\n        }\n        c += b.jqx.serialize(f[e]);\n      }\n      c += \"]\";\n    } else {\n      if (_typeof(f) == \"object\") {\n        c = \"{\";\n        var d = 0;\n        for (var e in f) {\n          if (d++ > 0) {\n            c += \", \";\n          }\n          c += e + \": \" + b.jqx.serialize(f[e]);\n        }\n        c += \"}\";\n      } else {\n        c = f.toString();\n      }\n    }\n    return c;\n  };\n  b.jqx.propertySetterValidation = true;\n  b.jqx.jqxWidgetProxy = function (h, d, c) {\n    var e = b(d);\n    var g = b.data(d, h);\n    if (g == undefined) {\n      return undefined;\n    }\n    var f = g.instance;\n    if (b.jqx.hasFunction(f, c)) {\n      return b.jqx.invoke(f, c);\n    }\n    if (b.jqx.isPropertySetter(f, c)) {\n      if (b.jqx.validatePropertySetter(f, c)) {\n        b.jqx.set(f, c);\n        return undefined;\n      }\n    } else {\n      if (_typeof(c) == \"object\" && c.length == 0) {\n        return;\n      } else {\n        if (_typeof(c) == \"object\" && c.length == 1 && b.jqx.hasProperty(f, c[0])) {\n          return b.jqx.get(f, c[0]);\n        } else {\n          if (typeof c == \"string\" && b.jqx.hasProperty(f, c[0])) {\n            return b.jqx.get(f, c);\n          }\n        }\n      }\n    }\n    throw \"jqxCore: Invalid parameter '\" + b.jqx.serialize(c) + \"' does not exist.\";\n  };\n  b.jqx.applyWidget = function (d, f, l, m) {\n    var h = false;\n    try {\n      h = window.MSApp != undefined;\n    } catch (g) {}\n    var n = b(d);\n    if (!m) {\n      m = new b.jqx[\"_\" + f]();\n    } else {\n      m.host = n;\n      m.element = d;\n    }\n    if (d.id == \"\") {\n      d.id = b.jqx.utilities.createId();\n    }\n    var k = {\n      host: n,\n      element: d,\n      instance: m,\n      initArgs: l\n    };\n    m.widgetName = f;\n    b.data(d, f, k);\n    b.data(d, \"jqxWidget\", k.instance);\n    var j = new Array();\n    var m = k.instance;\n    while (m) {\n      m.isInitialized = false;\n      j.push(m);\n      m = m.base;\n    }\n    j.reverse();\n    j[0].theme = b.jqx.theme || \"\";\n    b.jqx.jqxWidgetProxy(f, d, l);\n    for (var c in j) {\n      m = j[c];\n      if (c == 0) {\n        m.host = n;\n        m.element = d;\n        m.WinJS = h;\n      }\n      if (m != undefined) {\n        if (m.definedInstance) {\n          m.definedInstance();\n        }\n        if (m.createInstance != null) {\n          if (h) {\n            MSApp.execUnsafeLocalFunction(function () {\n              m.createInstance(l);\n            });\n          } else {\n            m.createInstance(l);\n          }\n        }\n      }\n    }\n    for (var c in j) {\n      if (j[c] != undefined) {\n        j[c].isInitialized = true;\n      }\n    }\n    if (h) {\n      MSApp.execUnsafeLocalFunction(function () {\n        k.instance.refresh(true);\n      });\n    } else {\n      k.instance.refresh(true);\n    }\n  };\n  b.jqx.jqxWidget = function (c, d, g) {\n    var j = false;\n    try {\n      var l = Array.prototype.slice.call(g, 0);\n    } catch (i) {\n      var l = \"\";\n    }\n    try {\n      j = window.MSApp != undefined;\n    } catch (i) {}\n    var h = c;\n    var m = \"\";\n    if (d) {\n      m = \"_\" + d;\n    }\n    b.jqx.define(b.jqx, \"_\" + h, m);\n    var k = new Array();\n    if (!window[h]) {\n      var f = function f(n) {\n        if (n == null) {\n          return \"\";\n        }\n        var e = b.type(n);\n        switch (e) {\n          case \"string\":\n          case \"number\":\n          case \"date\":\n          case \"boolean\":\n          case \"bool\":\n            if (n === null) {\n              return \"\";\n            }\n            return n.toString();\n        }\n        var o = \"\";\n        b.each(n, function (q, r) {\n          var t = r;\n          if (q > 0) {\n            o += \", \";\n          }\n          o += \"[\";\n          var p = 0;\n          if (b.type(t) == \"object\") {\n            for (var s in t) {\n              if (p > 0) {\n                o += \", \";\n              }\n              o += \"{\" + s + \":\" + t[s] + \"}\";\n              p++;\n            }\n          } else {\n            if (p > 0) {\n              o += \", \";\n            }\n            o += \"{\" + q + \":\" + t + \"}\";\n            p++;\n          }\n          o += \"]\";\n        });\n        return o;\n      };\n      a[h] = window[h] = function (e, s) {\n        var n = [];\n        if (!s) {\n          s = {};\n        }\n        n.push(s);\n        var o = e;\n        if (b.type(o) === \"object\" && e[0]) {\n          o = e[0].id;\n          if (o === \"\") {\n            o = e[0].id = b.jqx.utilities.createId();\n          }\n        } else {\n          if (b.type(e) === \"object\" && e && e.nodeName) {\n            o = e.id;\n            if (o === \"\") {\n              o = e.id = b.jqx.utilities.createId();\n            }\n          }\n        }\n        if (window.jqxWidgets && window.jqxWidgets[o]) {\n          if (s) {\n            b.each(window.jqxWidgets[o], function (t) {\n              var u = b(this.element).data();\n              if (u && u.jqxWidget) {\n                b(this.element)[h](s);\n              }\n            });\n          }\n          if (window.jqxWidgets[o].length == 1) {\n            var q = b(window.jqxWidgets[o][0].widgetInstance.element).data();\n            if (q && q.jqxWidget) {\n              return window.jqxWidgets[o][0];\n            }\n          }\n          var q = b(window.jqxWidgets[o][0].widgetInstance.element).data();\n          if (q && q.jqxWidget) {\n            return window.jqxWidgets[o];\n          }\n        }\n        var p = b(e);\n        if (p.length === 0) {\n          p = b(\"<div></div>\");\n          if (h === \"jqxInput\" || h === \"jqxPasswordInput\" || h === \"jqxMaskedInput\") {\n            p = b(\"<input/>\");\n          }\n          if (h === \"jqxTextArea\") {\n            p = b(\"<textarea></textarea>\");\n          }\n          if (h === \"jqxButton\" || h === \"jqxRepeatButton\" || h === \"jqxToggleButton\") {\n            p = b(\"<button/>\");\n          }\n          if (h === \"jqxSplitter\") {\n            p = b(\"<div><div>Panel 1</div><div>Panel 2</div></div>\");\n          }\n          if (h === \"jqxTabs\") {\n            p = b(\"<div><ul><li>Tab 1</li><li>Tab 2</li></ul><div>Content 1</div><div>Content 2</div></div>\");\n          }\n          if (h === \"jqxRibbon\") {\n            p = b(\"<div><ul><li>Tab 1</li><li>Tab 2</li></ul><div><div>Content 1</div><div>Content 2</div></div></div>\");\n          }\n          if (h === \"jqxDocking\") {\n            p = b(\"<div><div><div><div>Title 1</div><div>Content 1</div></div></div></div>\");\n          }\n          if (h === \"jqxWindow\") {\n            p = b(\"<div><div>Title 1</div><div>Content 1</div></div>\");\n          }\n        }\n        var r = [];\n        b.each(p, function (w) {\n          var y = p[w];\n          b.jqx.applyWidget(y, h, n, undefined);\n          if (!k[h]) {\n            var u = b.data(y, \"jqxWidget\");\n            var x = b.jqx[\"_\" + h].prototype.defineInstance();\n            var v = {};\n            if (b.jqx[\"_\" + h].prototype.metaInfo) {\n              v = b.jqx[\"_\" + h].prototype.metaInfo();\n            }\n            if (h == \"jqxDockingLayout\") {\n              x = b.extend(x, b.jqx._jqxLayout.prototype.defineInstance());\n            }\n            if (h == \"jqxToggleButton\" || h == \"jqxRepeatButton\") {\n              x = b.extend(x, b.jqx._jqxButton.prototype.defineInstance());\n            }\n            if (h == \"jqxTreeGrid\") {\n              x = b.extend(x, b.jqx._jqxDataTable.prototype.defineInstance());\n            }\n            var t = function t(A) {\n              var z = b.data(A, \"jqxWidget\");\n              this.widgetInstance = z;\n              var B = b.extend(this, z);\n              B.on = B.addEventListener = function (D, E) {\n                B.addHandler(!B.base ? B.host : B.base.host, D, E);\n              };\n              B.off = B.removeEventListener = function (D) {\n                B.removeHandler(!B.base ? B.host : B.base.host, D);\n              };\n              for (var C in z) {\n                if (b.type(z[C]) == \"function\") {\n                  B[C] = b.proxy(z[C], z);\n                }\n              }\n              return B;\n            };\n            k[h] = t;\n            b.each(x, function (A, z) {\n              Object.defineProperty(t.prototype, A, {\n                get: function get() {\n                  if (this.widgetInstance) {\n                    return this.widgetInstance[A];\n                  }\n                  return z;\n                },\n                set: function set(H) {\n                  if (this.widgetInstance && (this.widgetInstance[A] != H || A === \"width\" || A === \"height\")) {\n                    var F = this.widgetInstance[A];\n                    var E = H;\n                    var D = b.type(F);\n                    var B = b.type(E);\n                    var G = false;\n                    if (D != B || A === \"source\" || A === \"width\" || A === \"height\") {\n                      G = true;\n                    }\n                    if (G || f(F) != f(E)) {\n                      var C = {};\n                      C[A] = H;\n                      if (this.widgetInstance.host) {\n                        this.widgetInstance.host[h](C);\n                      } else {\n                        this.widgetInstance.base.host[h](C);\n                      }\n                      this.widgetInstance[A] = H;\n                      if (this.widgetInstance.propertyUpdated) {\n                        this.widgetInstance.propertyUpdated(A, F, H);\n                      }\n                    }\n                  }\n                }\n              });\n            });\n          }\n          var u = new k[h](y);\n          r.push(u);\n          if (!window.jqxWidgets) {\n            window.jqxWidgets = new Array();\n          }\n          if (!window.jqxWidgets[o]) {\n            window.jqxWidgets[o] = new Array();\n          }\n          window.jqxWidgets[o].push(u);\n        });\n        if (r.length === 1) {\n          return r[0];\n        }\n        return r;\n      };\n    }\n    b.fn[h] = function () {\n      var e = Array.prototype.slice.call(arguments, 0);\n      if (e.length == 0 || e.length == 1 && _typeof(e[0]) == \"object\") {\n        if (this.length == 0) {\n          if (this.selector) {\n            throw new Error(\"Invalid Selector - \" + this.selector + \"! Please, check whether the used ID or CSS Class name is correct.\");\n          } else {\n            throw new Error(\"Invalid Selector! Please, check whether the used ID or CSS Class name is correct.\");\n          }\n        }\n        return this.each(function () {\n          var q = b(this);\n          var p = this;\n          var r = b.data(p, h);\n          if (r == null) {\n            b.jqx.applyWidget(p, h, e, undefined);\n          } else {\n            b.jqx.jqxWidgetProxy(h, this, e);\n          }\n        });\n      } else {\n        if (this.length == 0) {\n          if (this.selector) {\n            throw new Error(\"Invalid Selector - \" + this.selector + \"! Please, check whether the used ID or CSS Class name is correct.\");\n          } else {\n            throw new Error(\"Invalid Selector! Please, check whether the used ID or CSS Class name is correct.\");\n          }\n        }\n        var o = null;\n        var n = 0;\n        this.each(function () {\n          var p = b.jqx.jqxWidgetProxy(h, this, e);\n          if (n == 0) {\n            o = p;\n            n++;\n          } else {\n            if (n == 1) {\n              var q = [];\n              q.push(o);\n              o = q;\n            }\n            o.push(p);\n          }\n        });\n      }\n      return o;\n    };\n    try {\n      b.extend(b.jqx[\"_\" + h].prototype, Array.prototype.slice.call(g, 0)[0]);\n    } catch (i) {}\n    b.extend(b.jqx[\"_\" + h].prototype, {\n      toThemeProperty: function toThemeProperty(e, n) {\n        return b.jqx.toThemeProperty(this, e, n);\n      },\n      isMaterialized: function isMaterialized() {\n        if (!this.theme) {\n          return false;\n        }\n        if (this.theme === \"fluent\") {\n          return true;\n        }\n        if (this.theme === \"light\") {\n          return true;\n        }\n        if (this.theme === \"dark\") {\n          return true;\n        }\n        if (this.theme === \"deepblue\") {\n          return true;\n        }\n        if (this.theme.indexOf(\"material\") >= 0) {\n          return true;\n        }\n      },\n      isModern: function isModern() {\n        if (!this.theme) {\n          return false;\n        }\n        if (this.theme.indexOf(\"light\") >= 0) {\n          return true;\n        }\n        if (this.theme === \"dark\") {\n          return true;\n        }\n      },\n      _addBarAndLabel: function _addBarAndLabel(p) {\n        var o = this;\n        var e = b(\"<label></label\");\n        e[0].innerHTML = this.placeHolder;\n        e.addClass(o.toThemeProperty(\"jqx-input-label\"));\n        p.after(e);\n        o.label = e;\n        var n = b(\"<span></span>\");\n        p.after(n);\n        n.addClass(o.toThemeProperty(\"jqx-input-bar\"));\n        o.bar = n;\n        o.bar.css(\"top\", this.host.height());\n      }\n    });\n    b.jqx[\"_\" + h].prototype.refresh = function () {\n      if (this.base) {\n        this.base.refresh(true);\n      }\n    };\n    b.jqx[\"_\" + h].prototype.createInstance = function () {};\n    b.jqx.isPassiveSupported = function () {\n      var o = this;\n      if (o.supportsPassive !== undefined) {\n        return o.supportsPassive;\n      }\n      o.supportsPassive = false;\n      try {\n        var n = Object.defineProperty({}, \"passive\", {\n          get: function get() {\n            o.supportsPassive = true;\n          }\n        });\n        window.addEventListener(\"testPassive\", null, n);\n        window.removeEventListener(\"testPassive\", null, n);\n      } catch (p) {}\n      return o.supportsPassive;\n    };\n    b.jqx[\"_\" + h].prototype.addEventHandler = function (n, e) {\n      if (this.base) {\n        this.base.host.on(n, e);\n      } else {\n        this.host.on(n, e);\n      }\n    };\n    b.jqx[\"_\" + h].prototype.removeEventHandler = function (n, e) {\n      if (this.base) {\n        this.base.host.off(n);\n      } else {\n        this.host.off(n);\n      }\n    };\n    b.jqx[\"_\" + h].prototype.applyTo = function (o, n) {\n      if (!(n instanceof Array)) {\n        var e = [];\n        e.push(n);\n        n = e;\n      }\n      b.jqx.applyWidget(o, h, n, this);\n    };\n    b.jqx[\"_\" + h].prototype.getInstance = function () {\n      return this;\n    };\n    b.jqx[\"_\" + h].prototype.propertyChangeMap = {};\n    b.jqx[\"_\" + h].prototype.addHandler = function (p, e, n, o) {\n      b.jqx.addHandler(b(p), e, n, o);\n    };\n    b.jqx[\"_\" + h].prototype.removeHandler = function (o, e, n) {\n      b.jqx.removeHandler(b(o), e, n);\n    };\n    b.jqx[\"_\" + h].prototype.setOptions = function () {\n      if (!this.host || !this.host.length || this.host.length != 1) {\n        return;\n      }\n      return b.jqx.jqxWidgetProxy(h, this.host[0], arguments);\n    };\n  };\n  b.jqx.toThemeProperty = function (d, e, j) {\n    if (d.theme == \"\") {\n      return e;\n    }\n    var h = e.split(\" \");\n    var c = \"\";\n    for (var g = 0; g < h.length; g++) {\n      if (g > 0) {\n        c += \" \";\n      }\n      var f = h[g];\n      if (j != null && j) {\n        c += f + \"-\" + d.theme;\n      } else {\n        c += f + \" \" + f + \"-\" + d.theme;\n      }\n    }\n    return c;\n  };\n  b.jqx.addHandler = function (h, j, f, g) {\n    var d = j.split(\" \");\n    for (var c = 0; c < d.length; c++) {\n      var e = d[c];\n      if (window.addEventListener && h[0]) {\n        switch (e) {\n          case \"mousewheel\":\n            if (b.jqx.browser.mozilla) {\n              h[0].addEventListener(\"DOMMouseScroll\", f, b.jqx.isPassiveSupported() ? {\n                passive: false\n              } : false);\n            } else {\n              h[0].addEventListener(\"mousewheel\", f, b.jqx.isPassiveSupported() ? {\n                passive: false\n              } : false);\n            }\n            continue;\n          case \"mousemove\":\n            if (!g) {\n              h[0].addEventListener(\"mousemove\", f, false);\n              continue;\n            }\n            break;\n          case \"touchmove\":\n            if (!g) {\n              h[0].addEventListener(\"touchmove\", f, false);\n              continue;\n            } else {\n              if (g && g.passive) {\n                h[0].addEventListener(\"touchmove\", f, g);\n                continue;\n              }\n            }\n            break;\n        }\n      }\n      if (g == undefined || g == null) {\n        if (h.on) {\n          h.on(e, f);\n        } else {\n          h.bind(e, f);\n        }\n      } else {\n        if (h.on) {\n          h.on(e, g, f);\n        } else {\n          h.bind(e, g, f);\n        }\n      }\n    }\n  };\n  b.jqx.removeHandler = function (g, h, f) {\n    if (!h) {\n      if (g.off) {\n        g.off();\n      } else {\n        g.unbind();\n      }\n      return;\n    }\n    var d = h.split(\" \");\n    for (var c = 0; c < d.length; c++) {\n      var e = d[c];\n      if (window.removeEventListener) {\n        switch (e) {\n          case \"mousewheel\":\n            if (b.jqx.browser.mozilla) {\n              g[0].removeEventListener(\"DOMMouseScroll\", f, false);\n            } else {\n              g[0].removeEventListener(\"mousewheel\", f, false);\n            }\n            continue;\n          case \"mousemove\":\n            if (f) {\n              g[0].removeEventListener(\"mousemove\", f, false);\n              continue;\n            }\n            break;\n          case \"touchmove\":\n            if (f) {\n              g[0].removeEventListener(\"touchmove\", f, false);\n              continue;\n            }\n            break;\n        }\n      }\n      if (e == undefined) {\n        if (g.off) {\n          g.off();\n        } else {\n          g.unbind();\n        }\n        continue;\n      }\n      if (f == undefined) {\n        if (g.off) {\n          g.off(e);\n        } else {\n          g.unbind(e);\n        }\n      } else {\n        if (g.off) {\n          g.off(e, f);\n        } else {\n          g.unbind(e, f);\n        }\n      }\n    }\n  };\n  b.jqx.credits = b.jqx.credits || \"\";\n  b.jqx.theme = b.jqx.theme || \"\";\n  b.jqx.scrollAnimation = b.jqx.scrollAnimation || false;\n  b.jqx.resizeDelay = b.jqx.resizeDelay || 10;\n  b.jqx.ready = function () {\n    b(window).trigger(\"jqxReady\");\n  };\n  b.jqx.init = function () {\n    b.each(arguments[0], function (c, d) {\n      if (c == \"theme\") {\n        b.jqx.theme = d;\n      }\n      if (c == \"scrollBarSize\") {\n        b.jqx.utilities.scrollBarSize = d;\n      }\n      if (c == \"touchScrollBarSize\") {\n        b.jqx.utilities.touchScrollBarSize = d;\n      }\n      if (c == \"scrollBarButtonsVisibility\") {\n        b.jqx.utilities.scrollBarButtonsVisibility = d;\n      }\n    });\n  };\n  b.jqx.utilities = b.jqx.utilities || {};\n  b.extend(b.jqx.utilities, {\n    scrollBarSize: 13,\n    touchScrollBarSize: 8,\n    scrollBarButtonsVisibility: \"visible\",\n    createId: function createId() {\n      var c = function c() {\n        return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);\n      };\n      return \"jqxWidget\" + c() + c() + c();\n    },\n    setTheme: function setTheme(g, h, f) {\n      if (typeof f === \"undefined\") {\n        return;\n      }\n      if (!f[0].className.split) {\n        return;\n      }\n      if (g === undefined) {\n        g = \"\";\n      }\n      if (h === undefined) {\n        h = \"\";\n      }\n      var j = f[0].className.split(\" \"),\n        c = [],\n        k = [],\n        e = f.children();\n      for (var d = 0; d < j.length; d += 1) {\n        if (j[d].indexOf(g) >= 0) {\n          if (g.length > 0) {\n            c.push(j[d]);\n            k.push(j[d].replace(g, h));\n          } else {\n            k.push(j[d].replace(\"-\" + h, \"\") + \"-\" + h);\n          }\n        }\n      }\n      this._removeOldClasses(c, f);\n      this._addNewClasses(k, f);\n      for (var d = 0; d < e.length; d += 1) {\n        this.setTheme(g, h, b(e[d]));\n      }\n    },\n    _removeOldClasses: function _removeOldClasses(e, d) {\n      for (var c = 0; c < e.length; c += 1) {\n        d.removeClass(e[c]);\n      }\n    },\n    _addNewClasses: function _addNewClasses(e, d) {\n      for (var c = 0; c < e.length; c += 1) {\n        d.addClass(e[c]);\n      }\n    },\n    getOffset: function getOffset(c) {\n      var e = b.jqx.mobile.getLeftPos(c[0]);\n      var d = b.jqx.mobile.getTopPos(c[0]);\n      return {\n        top: d,\n        left: e\n      };\n    },\n    resize: function resize(h, t, q, p) {\n      if (p === undefined) {\n        p = true;\n      }\n      var m = -1;\n      var l = this;\n      var e = function e(v) {\n        if (!l.hiddenWidgets) {\n          return -1;\n        }\n        var w = -1;\n        for (var u = 0; u < l.hiddenWidgets.length; u++) {\n          if (v.id) {\n            if (l.hiddenWidgets[u].id == v.id) {\n              w = u;\n              break;\n            }\n          } else {\n            if (l.hiddenWidgets[u].id == v[0].id) {\n              w = u;\n              break;\n            }\n          }\n        }\n        return w;\n      };\n      if (this.resizeHandlers) {\n        for (var j = 0; j < this.resizeHandlers.length; j++) {\n          if (h.id) {\n            if (this.resizeHandlers[j].id == h.id) {\n              m = j;\n              break;\n            }\n          } else {\n            if (this.resizeHandlers[j].id == h[0].id) {\n              m = j;\n              break;\n            }\n          }\n        }\n        if (q === true) {\n          if (m != -1) {\n            this.resizeHandlers.splice(m, 1);\n            if (this.watchedElementData && this.watchedElementData.length > 0) {\n              this.watchedElementData.splice(m, 1);\n            }\n          }\n          if (this.resizeHandlers.length == 0) {\n            var o = b(window);\n            if (o.off) {\n              o.off(\"resize.jqx\");\n              o.off(\"orientationchange.jqx\");\n              o.off(\"orientationchanged.jqx\");\n            } else {\n              o.unbind(\"resize.jqx\");\n              o.unbind(\"orientationchange.jqx\");\n              o.unbind(\"orientationchanged.jqx\");\n            }\n            this.resizeHandlers = null;\n          }\n          var c = e(h);\n          if (c != -1 && this.hiddenWidgets) {\n            this.hiddenWidgets.splice(c, 1);\n          }\n          return;\n        }\n      } else {\n        if (q === true) {\n          var c = e(h);\n          if (c != -1 && this.hiddenWidgets) {\n            this.hiddenWidgets.splice(c, 1);\n          }\n          return;\n        }\n      }\n      var l = this;\n      var n = function n(w, F) {\n        if (!l.resizeHandlers) {\n          return;\n        }\n        var G = function G(J) {\n          var i = -1;\n          var K = J.parentNode;\n          while (K) {\n            i++;\n            K = K.parentNode;\n          }\n          return i;\n        };\n        var v = function v(L, J) {\n          if (!L.widget || !J.widget) {\n            return 0;\n          }\n          var K = G(L.widget[0]);\n          var i = G(J.widget[0]);\n          try {\n            if (K < i) {\n              return -1;\n            }\n            if (K > i) {\n              return 1;\n            }\n          } catch (M) {\n            var N = M;\n          }\n          return 0;\n        };\n        var x = function x(J) {\n          if (l.hiddenWidgets.length > 0) {\n            l.hiddenWidgets.sort(v);\n            var i = function i() {\n              var L = false;\n              var N = new Array();\n              for (var M = 0; M < l.hiddenWidgets.length; M++) {\n                var K = l.hiddenWidgets[M];\n                if (b.jqx.isHidden(K.widget)) {\n                  L = true;\n                  N.push(K);\n                } else {\n                  if (K.callback) {\n                    K.callback(F);\n                  }\n                }\n              }\n              l.hiddenWidgets = N;\n              if (!L) {\n                clearInterval(l.__resizeInterval);\n              }\n            };\n            if (J == false) {\n              i();\n              if (l.__resizeInterval) {\n                clearInterval(l.__resizeInterval);\n              }\n              return;\n            }\n            if (l.__resizeInterval) {\n              clearInterval(l.__resizeInterval);\n            }\n            l.__resizeInterval = setInterval(function () {\n              i();\n            }, 100);\n          }\n        };\n        if (l.hiddenWidgets && l.hiddenWidgets.length > 0) {\n          x(false);\n        }\n        l.hiddenWidgets = new Array();\n        l.resizeHandlers.sort(v);\n        for (var C = 0; C < l.resizeHandlers.length; C++) {\n          var I = l.resizeHandlers[C];\n          var E = I.widget;\n          var B = I.data;\n          if (!B) {\n            continue;\n          }\n          if (!B.jqxWidget) {\n            continue;\n          }\n          var u = B.jqxWidget.width;\n          var H = B.jqxWidget.height;\n          if (B.jqxWidget.base) {\n            if (u == undefined) {\n              u = B.jqxWidget.base.width;\n            }\n            if (H == undefined) {\n              H = B.jqxWidget.base.height;\n            }\n          }\n          if (u === undefined && H === undefined) {\n            u = B.jqxWidget.element.style.width;\n            H = B.jqxWidget.element.style.height;\n          }\n          var D = false;\n          if (u != null && u.toString().indexOf(\"%\") != -1) {\n            D = true;\n          }\n          if (H != null && H.toString().indexOf(\"%\") != -1) {\n            D = true;\n          }\n          if (b.jqx.isHidden(E)) {\n            if (e(E) === -1) {\n              if (D || w === true) {\n                if (I.data.nestedWidget !== true) {\n                  l.hiddenWidgets.push(I);\n                }\n              }\n            }\n          } else {\n            if (w === undefined || w !== true) {\n              if (D) {\n                I.callback(F);\n                if (l.watchedElementData) {\n                  for (var z = 0; z < l.watchedElementData.length; z++) {\n                    if (l.watchedElementData[z].element == B.jqxWidget.element) {\n                      l.watchedElementData[z].offsetWidth = B.jqxWidget.element.offsetWidth;\n                      l.watchedElementData[z].offsetHeight = B.jqxWidget.element.offsetHeight;\n                      break;\n                    }\n                  }\n                }\n                if (l.hiddenWidgets.indexOf(I) >= 0) {\n                  l.hiddenWidgets.splice(l.hiddenWidgets.indexOf(I), 1);\n                }\n              }\n              if (B.jqxWidget.element) {\n                var y = B.jqxWidget.element.className;\n                if (y.indexOf(\"dropdownlist\") >= 0 || y.indexOf(\"datetimeinput\") >= 0 || y.indexOf(\"combobox\") >= 0 || y.indexOf(\"menu\") >= 0) {\n                  if (B.jqxWidget.isOpened) {\n                    var A = B.jqxWidget.isOpened();\n                    if (A) {\n                      if (F && F == \"resize\" && b.jqx.mobile.isTouchDevice()) {\n                        continue;\n                      }\n                      B.jqxWidget.close();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        x();\n      };\n      if (!this.resizeHandlers) {\n        this.resizeHandlers = new Array();\n        var o = b(window);\n        if (o.on) {\n          this._resizeTimer = null;\n          this._initResize = null;\n          o.on(\"resize.jqx\", function (i) {\n            if (l._resizeTimer != undefined) {\n              clearTimeout(l._resizeTimer);\n            }\n            if (!l._initResize) {\n              l._initResize = true;\n              n(null, \"resize\");\n            } else {\n              l._resizeTimer = setTimeout(function () {\n                n(null, \"resize\");\n              }, b.jqx.resizeDelay);\n            }\n          });\n          o.on(\"orientationchange.jqx\", function (i) {\n            n(null, \"orientationchange\");\n          });\n          o.on(\"orientationchanged.jqx\", function (i) {\n            n(null, \"orientationchange\");\n          });\n        } else {\n          o.bind(\"resize.jqx\", function (i) {\n            n(null, \"orientationchange\");\n          });\n          o.bind(\"orientationchange.jqx\", function (i) {\n            n(null, \"orientationchange\");\n          });\n          o.bind(\"orientationchanged.jqx\", function (i) {\n            n(null, \"orientationchange\");\n          });\n        }\n      }\n      var f = h.data();\n      if (p) {\n        if (m === -1) {\n          this.resizeHandlers.push({\n            id: h[0].id,\n            widget: h,\n            callback: t,\n            data: f\n          });\n        }\n      }\n      try {\n        var d = f.jqxWidget.width;\n        var s = f.jqxWidget.height;\n        if (f.jqxWidget.base) {\n          if (d == undefined) {\n            d = f.jqxWidget.base.width;\n          }\n          if (s == undefined) {\n            s = f.jqxWidget.base.height;\n          }\n        }\n        if (d === undefined && s === undefined) {\n          d = f.jqxWidget.element.style.width;\n          s = f.jqxWidget.element.style.height;\n        }\n        var k = false;\n        if (d != null && d.toString().indexOf(\"%\") != -1) {\n          k = true;\n        }\n        if (s != null && s.toString().indexOf(\"%\") != -1) {\n          k = true;\n        }\n        if (k) {\n          if (!this.watchedElementData) {\n            this.watchedElementData = [];\n          }\n          var l = this;\n          var g = function g(i) {\n            if (l.watchedElementData.forEach) {\n              l.watchedElementData.forEach(function (u) {\n                if (u.element.offsetWidth !== u.offsetWidth || u.element.offsetHeight !== u.offsetHeight) {\n                  u.offsetWidth = u.element.offsetWidth;\n                  u.offsetHeight = u.element.offsetHeight;\n                  if (u.timer) {\n                    clearTimeout(u.timer);\n                  }\n                  u.timer = setTimeout(function () {\n                    if (!b.jqx.isHidden(b(u.element))) {\n                      u.callback();\n                    } else {\n                      u.timer = setInterval(function () {\n                        if (!b.jqx.isHidden(b(u.element))) {\n                          clearInterval(u.timer);\n                          u.callback();\n                        }\n                      }, 100);\n                    }\n                  });\n                }\n              });\n            }\n          };\n          l.watchedElementData.push({\n            element: h[0],\n            offsetWidth: h[0].offsetWidth,\n            offsetHeight: h[0].offsetHeight,\n            callback: t\n          });\n          if (!l.observer) {\n            l.observer = new MutationObserver(g);\n            l.observer.observe(document.body, {\n              attributes: true,\n              childList: true,\n              characterData: true\n            });\n          }\n        }\n      } catch (r) {}\n      if (b.jqx.isHidden(h) && p === true) {\n        n(true);\n      }\n      b.jqx.resize = function () {\n        n(null, \"resize\");\n      };\n    },\n    parseJSON: function parseJSON(e) {\n      if (!e || typeof e !== \"string\") {\n        return null;\n      }\n      var c = /^[\\],:{}\\s]*$/,\n        g = /(?:^|:|,)(?:\\s*\\[)+/g,\n        d = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n        f = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/g;\n      e = b.trim(e);\n      if (window.JSON && window.JSON.parse) {\n        return window.JSON.parse(e);\n      }\n      if (c.test(e.replace(d, \"@\").replace(f, \"]\").replace(g, \"\"))) {\n        return new Function(\"return \" + e)();\n      }\n      throw new Error(\"Invalid JSON: \" + e);\n    },\n    html: function html(d, e) {\n      if (!b(d).on) {\n        return b(d).html(e);\n      }\n      try {\n        return b.access(d, function (s) {\n          var f = d[0] || {},\n            m = 0,\n            j = d.length;\n          if (s === undefined) {\n            return f.nodeType === 1 ? f.innerHTML.replace(rinlinejQuery, \"\") : undefined;\n          }\n          var r = /<(?:script|style|link)/i,\n            n = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n            h = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n            p = /<([\\w:]+)/,\n            g = /<(?:script|object|embed|option|style)/i,\n            k = new RegExp(\"<(?:\" + n + \")[\\\\s/>]\", \"i\"),\n            q = /^\\s+/,\n            t = {\n              option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n              legend: [1, \"<fieldset>\", \"</fieldset>\"],\n              thead: [1, \"<table>\", \"</table>\"],\n              tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n              td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n              col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n              area: [1, \"<map>\", \"</map>\"],\n              _default: [0, \"\", \"\"]\n            };\n          if (typeof s === \"string\" && !r.test(s) && (b.support.htmlSerialize || !k.test(s)) && (b.support.leadingWhitespace || !q.test(s)) && !t[(p.exec(s) || [\"\", \"\"])[1].toLowerCase()]) {\n            s = s.replace(h, \"<$1></$2>\");\n            try {\n              for (; m < j; m++) {\n                f = this[m] || {};\n                if (f.nodeType === 1) {\n                  b.cleanData(f.getElementsByTagName(\"*\"));\n                  f.innerHTML = s;\n                }\n              }\n              f = 0;\n            } catch (o) {}\n          }\n          if (f) {\n            d.empty().append(s);\n          }\n        }, null, e, arguments.length);\n      } catch (c) {\n        return b(d).html(e);\n      }\n    },\n    hasTransform: function hasTransform(e) {\n      var d = \"\";\n      d = e.css(\"transform\");\n      if (d == \"\" || d == \"none\") {\n        d = e.parents().css(\"transform\");\n        if (d == \"\" || d == \"none\") {\n          var c = b.jqx.utilities.getBrowser();\n          if (c.browser == \"msie\") {\n            d = e.css(\"-ms-transform\");\n            if (d == \"\" || d == \"none\") {\n              d = e.parents().css(\"-ms-transform\");\n            }\n          } else {\n            if (c.browser == \"chrome\") {\n              d = e.css(\"-webkit-transform\");\n              if (d == \"\" || d == \"none\") {\n                d = e.parents().css(\"-webkit-transform\");\n              }\n            } else {\n              if (c.browser == \"opera\") {\n                d = e.css(\"-o-transform\");\n                if (d == \"\" || d == \"none\") {\n                  d = e.parents().css(\"-o-transform\");\n                }\n              } else {\n                if (c.browser == \"mozilla\") {\n                  d = e.css(\"-moz-transform\");\n                  if (d == \"\" || d == \"none\") {\n                    d = e.parents().css(\"-moz-transform\");\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          return d != \"\" && d != \"none\";\n        }\n      }\n      if (d == \"\" || d == \"none\") {\n        d = b(document.body).css(\"transform\");\n      }\n      return d != \"\" && d != \"none\" && d != null;\n    },\n    getBrowser: function getBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = /(chrome)[ \\/]([\\w.]+)/.exec(d) || /(webkit)[ \\/]([\\w.]+)/.exec(d) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(d) || /(msie) ([\\w.]+)/.exec(d) || d.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(d) || [];\n      var e = {\n        browser: c[1] || \"\",\n        version: c[2] || \"0\"\n      };\n      if (d.indexOf(\"rv:11.0\") >= 0 && d.indexOf(\".net4.0c\") >= 0) {\n        e.browser = \"msie\";\n        e.version = \"11\";\n        c[1] = \"msie\";\n      }\n      if (d.indexOf(\"edge\") >= 0) {\n        e.browser = \"msie\";\n        e.version = \"12\";\n        c[1] = \"msie\";\n      }\n      e[c[1]] = c[1];\n      return e;\n    }\n  });\n  b.jqx.browser = b.jqx.utilities.getBrowser();\n  b.jqx.isHidden = function (d) {\n    if (!d || !d[0]) {\n      return false;\n    }\n    var c = d[0].offsetWidth,\n      e = d[0].offsetHeight;\n    if (c === 0 || e === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  b.jqx.ariaEnabled = true;\n  b.jqx.aria = function (d, f, e) {\n    if (!b.jqx.ariaEnabled) {\n      return;\n    }\n    if (f == undefined) {\n      b.each(d.aria, function (h, i) {\n        var k = !d.base ? d.host.attr(h) : d.base.host.attr(h);\n        if (k != undefined && !b.isFunction(k)) {\n          var j = k;\n          switch (i.type) {\n            case \"number\":\n              j = new Number(k);\n              if (isNaN(j)) {\n                j = k;\n              }\n              break;\n            case \"boolean\":\n              j = k == \"true\" ? true : false;\n              break;\n            case \"date\":\n              j = new Date(k);\n              if (j == \"Invalid Date\" || isNaN(j)) {\n                j = k;\n              }\n              break;\n          }\n          d[i.name] = j;\n        } else {\n          var k = d[i.name];\n          if (b.isFunction(k)) {\n            k = d[i.name]();\n          }\n          if (k == undefined) {\n            k = \"\";\n          }\n          try {\n            !d.base ? d.host.attr(h, k.toString()) : d.base.host.attr(h, k.toString());\n          } catch (g) {}\n        }\n      });\n    } else {\n      try {\n        if (d.host) {\n          if (!d.base) {\n            if (d.host) {\n              if (d.element.setAttribute) {\n                d.element.setAttribute(f, e.toString());\n              } else {\n                d.host.attr(f, e.toString());\n              }\n            } else {\n              d.attr(f, e.toString());\n            }\n          } else {\n            if (d.base.host) {\n              d.base.host.attr(f, e.toString());\n            } else {\n              d.attr(f, e.toString());\n            }\n          }\n        } else {\n          if (d.setAttribute) {\n            d.setAttribute(f, e.toString());\n          }\n        }\n      } catch (c) {}\n    }\n  };\n  if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (d) {\n      var c = this.length;\n      var e = Number(arguments[1]) || 0;\n      e = e < 0 ? Math.ceil(e) : Math.floor(e);\n      if (e < 0) {\n        e += c;\n      }\n      for (; e < c; e++) {\n        if (e in this && this[e] === d) {\n          return e;\n        }\n      }\n      return -1;\n    };\n  }\n  b.jqx.mobile = b.jqx.mobile || {};\n  b.jqx.position = function (c) {\n    var f = parseInt(c.pageX);\n    var e = parseInt(c.pageY);\n    if (b.jqx.mobile.isTouchDevice()) {\n      var d = b.jqx.mobile.getTouches(c);\n      var g = d[0];\n      f = parseInt(g.pageX);\n      e = parseInt(g.pageY);\n    }\n    return {\n      left: f,\n      top: e\n    };\n  };\n  b.extend(b.jqx.mobile, {\n    _touchListener: function _touchListener(i, g) {\n      var c = function c(j, l) {\n        var k = document.createEvent(\"MouseEvents\");\n        k.initMouseEvent(j, l.bubbles, l.cancelable, l.view, l.detail, l.screenX, l.screenY, l.clientX, l.clientY, l.ctrlKey, l.altKey, l.shiftKey, l.metaKey, l.button, l.relatedTarget);\n        k._pageX = l.pageX;\n        k._pageY = l.pageY;\n        return k;\n      };\n      var h = {\n        mousedown: \"touchstart\",\n        mouseup: \"touchend\",\n        mousemove: \"touchmove\"\n      };\n      var f = c(h[i.type], i);\n      i.target.dispatchEvent(f);\n      var d = i.target[\"on\" + h[i.type]];\n      if (typeof d === \"function\") {\n        d(i);\n      }\n    },\n    setMobileSimulator: function setMobileSimulator(d, f) {\n      if (this.isTouchDevice()) {\n        return;\n      }\n      this.simulatetouches = true;\n      if (f == false) {\n        this.simulatetouches = false;\n      }\n      var e = {\n        mousedown: \"touchstart\",\n        mouseup: \"touchend\",\n        mousemove: \"touchmove\"\n      };\n      var c = this;\n      if (window.addEventListener) {\n        var g = function g() {\n          for (var h in e) {\n            if (d.addEventListener) {\n              d.removeEventListener(h, c._touchListener);\n              d.addEventListener(h, c._touchListener, false);\n            }\n          }\n        };\n        if (b.jqx.browser.msie) {\n          g();\n        } else {\n          g();\n        }\n      }\n    },\n    isTouchDevice: function isTouchDevice() {\n      if (this.touchDevice != undefined) {\n        return this.touchDevice;\n      }\n      var d = \"Browser CodeName: \" + navigator.appCodeName + \"\";\n      d += \"Browser Name: \" + navigator.appName + \"\";\n      d += \"Browser Version: \" + navigator.appVersion + \"\";\n      d += \"Platform: \" + navigator.platform + \"\";\n      d += \"User-agent header: \" + navigator.userAgent + \"\";\n      if (navigator.maxTouchPoints > 1) {}\n      if (d.indexOf(\"Android\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"IEMobile\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"Windows Phone\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"WPDesktop\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"ZuneWP7\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"BlackBerry\") != -1 && d.indexOf(\"Mobile Safari\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"ipod\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"nokia\") != -1 || d.indexOf(\"Nokia\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"Chrome/17\") != -1) {\n        return false;\n      }\n      if (d.indexOf(\"CrOS\") != -1) {\n        return false;\n      }\n      if (d.indexOf(\"Opera\") != -1 && d.indexOf(\"Mobi\") == -1 && d.indexOf(\"Mini\") == -1 && d.indexOf(\"Platform: Win\") != -1) {\n        return false;\n      }\n      if (d.indexOf(\"HybridDeviceTouch\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"HybridDeviceMouse\") != -1) {\n        return false;\n      }\n      if (d.indexOf(\"Opera\") != -1 && d.indexOf(\"Mobi\") != -1 && d.indexOf(\"Opera Mobi\") != -1) {\n        return true;\n      }\n      if (d.indexOf(\"Mozilla/5.0 (X11; Linux x86_64)\") != -1) {\n        return false;\n      }\n      var f = {\n        ios: \"i(?:Pad|Phone|Pod)(?:.*)CPU(?: iPhone)? OS \",\n        android: \"(Android |HTC_|Silk/)\",\n        blackberry: \"BlackBerry(?:.*)Version/\",\n        rimTablet: \"RIM Tablet OS \",\n        webos: \"(?:webOS|hpwOS)/\",\n        bada: \"Bada/\"\n      };\n      try {\n        if (this.touchDevice != undefined) {\n          return this.touchDevice;\n        }\n        this.touchDevice = false;\n        for (var h in f) {\n          if (f.hasOwnProperty(h)) {\n            var k = f[h];\n            var g = d.match(new RegExp(\"(?:\" + k + \")([^\\\\s;]+)\"));\n            if (g) {\n              if (h.toString() == \"blackberry\") {\n                this.touchDevice = false;\n                return false;\n              }\n              this.touchDevice = true;\n              return true;\n            }\n          }\n        }\n        var j = navigator.userAgent;\n        if (navigator.platform.toLowerCase().indexOf(\"win\") != -1) {\n          if (j.indexOf(\"Windows Phone\") >= 0 || j.indexOf(\"WPDesktop\") >= 0 || j.indexOf(\"IEMobile\") >= 0 || j.indexOf(\"ZuneWP7\") >= 0) {\n            this.touchDevice = true;\n            return true;\n          } else {\n            if (j.indexOf(\"Touch\") >= 0) {\n              var c = \"MSPointerDown\" in window || \"pointerdown\" in window;\n              if (c) {\n                this.touchDevice = true;\n                return true;\n              }\n              if (j.indexOf(\"ARM\") >= 0) {\n                this.touchDevice = true;\n                return true;\n              }\n              this.touchDevice = false;\n              return false;\n            }\n          }\n        }\n        if (navigator.platform.toLowerCase().indexOf(\"win\") != -1) {\n          this.touchDevice = false;\n          return false;\n        }\n        if (\"ontouchstart\" in window || window.DocumentTouch && document instanceof DocumentTouch) {\n          this.touchDevice = true;\n        }\n        return this.touchDevice;\n      } catch (l) {\n        this.touchDevice = false;\n        return false;\n      }\n    },\n    getLeftPos: function getLeftPos(c) {\n      var d = c.offsetLeft;\n      while ((c = c.offsetParent) != null) {\n        if (c.tagName != \"HTML\") {\n          d += c.offsetLeft;\n          if (document.all) {\n            d += c.clientLeft;\n          }\n        }\n      }\n      return d;\n    },\n    getTopPos: function getTopPos(d) {\n      var f = d.offsetTop;\n      var c = b(d).coord();\n      while ((d = d.offsetParent) != null) {\n        if (d.tagName != \"HTML\") {\n          f += d.offsetTop - d.scrollTop;\n          if (document.all) {\n            f += d.clientTop;\n          }\n        }\n      }\n      var e = navigator.userAgent.toLowerCase();\n      var g = (e.indexOf(\"windows phone\") != -1 || e.indexOf(\"WPDesktop\") != -1 || e.indexOf(\"ZuneWP7\") != -1 || e.indexOf(\"msie 9\") != -1 || e.indexOf(\"msie 11\") != -1 || e.indexOf(\"msie 10\") != -1) && e.indexOf(\"touch\") != -1;\n      if (g) {\n        return c.top;\n      }\n      if (this.isSafariMobileBrowser()) {\n        if (this.isSafari4MobileBrowser() && this.isIPadSafariMobileBrowser()) {\n          return f;\n        }\n        if (e.indexOf(\"version/7\") != -1) {\n          return c.top;\n        }\n        if (e.indexOf(\"version/6\") != -1 || e.indexOf(\"version/5\") != -1) {\n          f = f + b(window).scrollTop();\n        }\n        if (/(Android.*Chrome\\/[.0-9]* (!?Mobile))/.exec(navigator.userAgent)) {\n          return f + b(window).scrollTop();\n        }\n        if (/(Android.*Chrome\\/[.0-9]* Mobile)/.exec(navigator.userAgent)) {\n          return f + b(window).scrollTop();\n        }\n        return c.top;\n      }\n      return f;\n    },\n    isChromeMobileBrowser: function isChromeMobileBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"android\") != -1;\n      return c;\n    },\n    isOperaMiniMobileBrowser: function isOperaMiniMobileBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"opera mini\") != -1 || d.indexOf(\"opera mobi\") != -1;\n      return c;\n    },\n    isOperaMiniBrowser: function isOperaMiniBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"opera mini\") != -1;\n      return c;\n    },\n    isNewSafariMobileBrowser: function isNewSafariMobileBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"ipad\") != -1 || d.indexOf(\"iphone\") != -1 || d.indexOf(\"ipod\") != -1;\n      c = c && d.indexOf(\"version/5\") != -1;\n      return c;\n    },\n    isSafari4MobileBrowser: function isSafari4MobileBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"ipad\") != -1 || d.indexOf(\"iphone\") != -1 || d.indexOf(\"ipod\") != -1;\n      c = c && d.indexOf(\"version/4\") != -1;\n      return c;\n    },\n    isWindowsPhone: function isWindowsPhone() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"windows phone\") != -1 || d.indexOf(\"WPDesktop\") != -1 || d.indexOf(\"ZuneWP7\") != -1 || d.indexOf(\"msie 9\") != -1 || d.indexOf(\"msie 11\") != -1 || d.indexOf(\"msie 10\") != -1 && d.indexOf(\"touch\") != -1;\n      return c;\n    },\n    isSafariMobileBrowser: function isSafariMobileBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      if (/(Android.*Chrome\\/[.0-9]* (!?Mobile))/.exec(navigator.userAgent)) {\n        return true;\n      }\n      if (/(Android.*Chrome\\/[.0-9]* Mobile)/.exec(navigator.userAgent)) {\n        return true;\n      }\n      var c = d.indexOf(\"ipad\") != -1 || d.indexOf(\"iphone\") != -1 || d.indexOf(\"ipod\") != -1 || d.indexOf(\"mobile safari\") != -1;\n      return c;\n    },\n    isIPadSafariMobileBrowser: function isIPadSafariMobileBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"ipad\") != -1;\n      return c;\n    },\n    isMobileBrowser: function isMobileBrowser() {\n      var d = navigator.userAgent.toLowerCase();\n      var c = d.indexOf(\"ipad\") != -1 || d.indexOf(\"iphone\") != -1 || d.indexOf(\"android\") != -1;\n      return c;\n    },\n    getTouches: function getTouches(c) {\n      if (c.originalEvent) {\n        if (c.originalEvent.touches && c.originalEvent.touches.length) {\n          return c.originalEvent.touches;\n        } else {\n          if (c.originalEvent.changedTouches && c.originalEvent.changedTouches.length) {\n            return c.originalEvent.changedTouches;\n          }\n        }\n      }\n      if (!c.touches) {\n        c.touches = new Array();\n        c.touches[0] = c.originalEvent != undefined ? c.originalEvent : c;\n        if (c.originalEvent != undefined && c.pageX) {\n          c.touches[0] = c;\n        }\n        if (c.type == \"mousemove\") {\n          c.touches[0] = c;\n        }\n      }\n      return c.touches;\n    },\n    getTouchEventName: function getTouchEventName(c) {\n      if (this.isWindowsPhone()) {\n        var d = navigator.userAgent.toLowerCase();\n        if (d.indexOf(\"windows phone 7\") != -1) {\n          if (c.toLowerCase().indexOf(\"start\") != -1) {\n            return \"MSPointerDown\";\n          }\n          if (c.toLowerCase().indexOf(\"move\") != -1) {\n            return \"MSPointerMove\";\n          }\n          if (c.toLowerCase().indexOf(\"end\") != -1) {\n            return \"MSPointerUp\";\n          }\n        }\n        if (c.toLowerCase().indexOf(\"start\") != -1) {\n          return \"pointerdown\";\n        }\n        if (c.toLowerCase().indexOf(\"move\") != -1) {\n          return \"pointermove\";\n        }\n        if (c.toLowerCase().indexOf(\"end\") != -1) {\n          return \"pointerup\";\n        }\n      } else {\n        return c;\n      }\n    },\n    dispatchMouseEvent: function dispatchMouseEvent(c, g, f) {\n      if (this.simulatetouches) {\n        return;\n      }\n      var d = document.createEvent(\"MouseEvent\");\n      d.initMouseEvent(c, true, true, g.view, 1, g.screenX, g.screenY, g.clientX, g.clientY, false, false, false, false, 0, null);\n      if (f != null) {\n        f.dispatchEvent(d);\n      }\n    },\n    getRootNode: function getRootNode(c) {\n      while (c.nodeType !== 1) {\n        c = c.parentNode;\n      }\n      return c;\n    },\n    setTouchScroll: function setTouchScroll(c, d) {\n      if (!this.enableScrolling) {\n        this.enableScrolling = [];\n      }\n      this.enableScrolling[d] = c;\n    },\n    touchScroll: function touchScroll(B, M, Z, H, x, n) {\n      if (B == null) {\n        return;\n      }\n      var G = this;\n      var f = 0;\n      var r = 0;\n      var g = 0;\n      var i = 0;\n      var t = 0;\n      var j = 0;\n      if (!this.scrolling) {\n        this.scrolling = [];\n      }\n      this.scrolling[H] = false;\n      var k = false;\n      var p = b(B);\n      var R = [\"select\", \"input\", \"textarea\"];\n      var X = 0;\n      var J = 0;\n      if (!this.enableScrolling) {\n        this.enableScrolling = [];\n      }\n      this.enableScrolling[H] = true;\n      var H = H;\n      var w = this.getTouchEventName(\"touchstart\") + \".touchScroll\";\n      var D = this.getTouchEventName(\"touchend\") + \".touchScroll\";\n      var ab = this.getTouchEventName(\"touchmove\") + \".touchScroll\";\n      var l, W, z, ah, V, Y, aj, Q, aa, d, F, ad, af, O, e, v, u, S, c, E, ag, o;\n      Q = M;\n      var aj = 0;\n      var aa = 0;\n      var h = 0;\n      var T = 0;\n      var ai = 0;\n      var Y = x.jqxScrollBar(\"max\");\n      var o = 325;\n      function A(am) {\n        if (am.targetTouches && am.targetTouches.length >= 1) {\n          return am.targetTouches[0].clientY;\n        } else {\n          if (am.originalEvent && am.originalEvent.clientY !== undefined) {\n            return am.originalEvent.clientY;\n          } else {\n            var al = G.getTouches(am);\n            return al[0].clientY;\n          }\n        }\n      }\n      function ae(am) {\n        if (am.targetTouches && am.targetTouches.length >= 1) {\n          return am.targetTouches[0].clientX;\n        } else {\n          if (am.originalEvent && am.originalEvent.clientX !== undefined) {\n            return am.originalEvent.clientX;\n          } else {\n            var al = G.getTouches(am);\n            return al[0].clientX;\n          }\n        }\n      }\n      var I = function I() {\n        var ap, am, aq, ao;\n        ap = Date.now();\n        am = ap - v;\n        v = ap;\n        aq = aa - e;\n        var an = h - ah;\n        e = aa;\n        ah = h;\n        F = true;\n        ao = 1000 * aq / (1 + am);\n        var al = 1000 * an / (1 + am);\n        af = 0.8 * ao + 0.2 * af;\n        O = 0.8 * al + 0.2 * O;\n      };\n      var C = false;\n      var X = function X(am) {\n        if (!G.enableScrolling[H]) {\n          return true;\n        }\n        if (b.inArray(am.target.tagName.toLowerCase(), R) !== -1) {\n          return;\n        }\n        aa = n.jqxScrollBar(\"value\");\n        h = x.jqxScrollBar(\"value\");\n        var an = G.getTouches(am);\n        var ao = an[0];\n        if (an.length == 1) {\n          G.dispatchMouseEvent(\"mousedown\", ao, G.getRootNode(ao.target));\n        }\n        Y = x.jqxScrollBar(\"max\");\n        Q = n.jqxScrollBar(\"max\");\n        function al(ap) {\n          C = false;\n          F = true;\n          d = A(ap);\n          ag = ae(ap);\n          af = S = O = 0;\n          e = aa;\n          ah = h;\n          v = Date.now();\n          clearInterval(u);\n          u = setInterval(I, 100);\n          T = aa;\n          ai = h;\n          if (aa > 0 && aa < Q && n[0].style.visibility != \"hidden\") {}\n        }\n        al(am);\n        k = false;\n        r = ao.pageY;\n        t = ao.pageX;\n        if (G.simulatetouches) {\n          if (ao._pageY != undefined) {\n            r = ao._pageY;\n            t = ao._pageX;\n          }\n        }\n        G.scrolling[H] = true;\n        f = 0;\n        i = 0;\n        return true;\n      };\n      if (p.on) {\n        p.on(w, X);\n      } else {\n        p.bind(w, X);\n      }\n      var ac = function ac(am, al) {\n        aa = am > Q ? Q : am < aj ? aj : am;\n        Z(null, am, 0, 0, al);\n        return am > Q ? \"max\" : am < aj ? \"min\" : \"value\";\n      };\n      var m = function m(am, al) {\n        h = am > Y ? Y : am < aj ? aj : am;\n        Z(am, null, 0, 0, al);\n        return am > Y ? \"max\" : am < aj ? \"min\" : \"value\";\n      };\n      function U() {\n        var al, am;\n        if (S) {\n          al = Date.now() - v;\n          am = -S * Math.exp(-al / o);\n          if (am > 0.5 || am < -0.5) {\n            ac(c + am);\n            requestAnimationFrame(U);\n          } else {\n            ac(c);\n          }\n        }\n      }\n      function N() {\n        var al, am;\n        if (S) {\n          al = Date.now() - v;\n          am = -S * Math.exp(-al / o);\n          if (am > 0.5 || am < -0.5) {\n            m(E + am);\n            requestAnimationFrame(N);\n          } else {\n            m(E);\n          }\n        }\n      }\n      var y = function y(al) {\n        if (!G.enableScrolling[H]) {\n          return true;\n        }\n        if (!G.scrolling[H]) {\n          return true;\n        }\n        if (C) {\n          al.preventDefault();\n          al.stopPropagation();\n        }\n        var aq = G.getTouches(al);\n        if (aq.length > 1) {\n          return true;\n        }\n        var am = aq[0].pageY;\n        var ao = aq[0].pageX;\n        if (G.simulatetouches) {\n          if (aq[0]._pageY != undefined) {\n            am = aq[0]._pageY;\n            ao = aq[0]._pageX;\n          }\n        }\n        var au = am - r;\n        var av = ao - t;\n        J = am;\n        var at = ao;\n        g = au - f;\n        j = av - i;\n        k = true;\n        f = au;\n        i = av;\n        var an = x != null ? x[0].style.visibility != \"hidden\" : true;\n        var ar = n != null ? n[0].style.visibility != \"hidden\" : true;\n        function ap(ay) {\n          var aA, az, ax;\n          if (F) {\n            aA = A(ay);\n            ax = ae(ay);\n            az = d - aA;\n            V = ag - ax;\n            var aw = \"value\";\n            if (az > 2 || az < -2) {\n              d = aA;\n              aw = ac(aa + az, ay);\n              I();\n              if (aw == \"min\" && T === 0) {\n                return true;\n              }\n              if (aw == \"max\" && T === Q) {\n                return true;\n              }\n              if (!ar) {\n                return true;\n              }\n              ay.preventDefault();\n              ay.stopPropagation();\n              C = true;\n              return false;\n            } else {\n              if (V > 2 || V < -2) {\n                ag = ax;\n                aw = m(h + V, ay);\n                I();\n                if (aw == \"min\" && ai === 0) {\n                  return true;\n                }\n                if (aw == \"max\" && ai === Y) {\n                  return true;\n                }\n                if (!an) {\n                  return true;\n                }\n                C = true;\n                ay.preventDefault();\n                ay.stopPropagation();\n                return false;\n              }\n            }\n            ay.preventDefault();\n          }\n        }\n        if (an || ar) {\n          if (an || ar) {\n            ap(al);\n          }\n        }\n      };\n      if (p.on) {\n        p.on(ab, y);\n      } else {\n        p.bind(ab, y);\n      }\n      var s = function s(am) {\n        if (!G.enableScrolling[H]) {\n          return true;\n        }\n        var an = G.getTouches(am)[0];\n        if (!G.scrolling[H]) {\n          return true;\n        }\n        F = false;\n        clearInterval(u);\n        if (af > 10 || af < -10) {\n          S = 0.8 * af;\n          c = Math.round(aa + S);\n          v = Date.now();\n          requestAnimationFrame(U);\n        } else {\n          if (O > 10 || O < -10) {\n            S = 0.8 * O;\n            E = Math.round(h + S);\n            v = Date.now();\n            requestAnimationFrame(N);\n          } else {}\n        }\n        G.scrolling[H] = false;\n        if (k) {\n          G.dispatchMouseEvent(\"mouseup\", an, am.target);\n        } else {\n          var an = G.getTouches(am)[0],\n            al = G.getRootNode(an.target);\n          G.dispatchMouseEvent(\"mouseup\", an, al);\n          G.dispatchMouseEvent(\"click\", an, al);\n          return true;\n        }\n      };\n      if (this.simulatetouches) {\n        var q = b(window).on != undefined || b(window).bind;\n        var P = function P(al) {\n          try {\n            s(al);\n          } catch (am) {}\n          G.scrolling[H] = false;\n        };\n        b(window).on != undefined ? b(document).on(\"mouseup.touchScroll\", P) : b(document).bind(\"mouseup.touchScroll\", P);\n        if (window.frameElement) {\n          if (window.top != null) {\n            var L = function L(al) {\n              try {\n                s(al);\n              } catch (am) {}\n              G.scrolling[H] = false;\n            };\n            if (window.top.document) {\n              b(window.top.document).on ? b(window.top.document).on(\"mouseup\", L) : b(window.top.document).bind(\"mouseup\", L);\n            }\n          }\n        }\n        var ak = b(document).on != undefined || b(document).bind;\n        var K = function K(al) {\n          if (!G.scrolling[H]) {\n            return true;\n          }\n          G.scrolling[H] = false;\n          var an = G.getTouches(al)[0],\n            am = G.getRootNode(an.target);\n          G.dispatchMouseEvent(\"mouseup\", an, am);\n          G.dispatchMouseEvent(\"click\", an, am);\n        };\n        b(document).on != undefined ? b(document).on(\"touchend\", K) : b(document).bind(\"touchend\", K);\n      }\n      if (p.on) {\n        p.on(\"dragstart\", function (al) {\n          al.preventDefault();\n        });\n        p.on(\"selectstart\", function (al) {\n          al.preventDefault();\n        });\n      }\n      p.on ? p.on(D + \" touchcancel.touchScroll\", s) : p.bind(D + \" touchcancel.touchScroll\", s);\n    }\n  });\n  b.jqx.cookie = b.jqx.cookie || {};\n  b.extend(b.jqx.cookie, {\n    cookie: function cookie(f, g, d) {\n      if (arguments.length > 1 && String(g) !== \"[object Object]\") {\n        d = b.extend({}, d);\n        if (g === null || g === undefined) {\n          d.expires = -1;\n        }\n        if (typeof d.expires === \"number\") {\n          var i = d.expires,\n            e = d.expires = new Date();\n          e.setDate(e.getDate() + i);\n        }\n        g = String(g);\n        return document.cookie = [encodeURIComponent(f), \"=\", d.raw ? g : encodeURIComponent(g), d.expires ? \"; expires=\" + d.expires.toUTCString() : \"\", d.path ? \"; path=\" + d.path : \"\", d.domain ? \"; domain=\" + d.domain : \"\", d.secure ? \"; secure\" : \"\"].join(\"\");\n      }\n      d = g || {};\n      var c,\n        h = d.raw ? function (j) {\n          return j;\n        } : decodeURIComponent;\n      return (c = new RegExp(\"(?:^|; )\" + encodeURIComponent(f) + \"=([^;]*)\").exec(document.cookie)) ? h(c[1]) : null;\n    }\n  });\n  b.jqx.string = b.jqx.string || {};\n  b.extend(b.jqx.string, {\n    replace: function replace(g, e, f) {\n      if (e === f) {\n        return this;\n      }\n      var c = g;\n      var d = c.indexOf(e);\n      while (d != -1) {\n        c = c.replace(e, f);\n        d = c.indexOf(e);\n      }\n      return c;\n    },\n    contains: function contains(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      return c.indexOf(d) != -1;\n    },\n    containsIgnoreCase: function containsIgnoreCase(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      return c.toString().toUpperCase().indexOf(d.toString().toUpperCase()) != -1;\n    },\n    equals: function equals(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      c = this.normalize(c);\n      if (d.length == c.length) {\n        return c.slice(0, d.length) == d;\n      }\n      return false;\n    },\n    equalsIgnoreCase: function equalsIgnoreCase(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      c = this.normalize(c);\n      if (d.length == c.length) {\n        return c.toUpperCase().slice(0, d.length) == d.toUpperCase();\n      }\n      return false;\n    },\n    startsWith: function startsWith(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      return c.slice(0, d.length) == d;\n    },\n    startsWithIgnoreCase: function startsWithIgnoreCase(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      return c.toUpperCase().slice(0, d.length) == d.toUpperCase();\n    },\n    normalize: function normalize(c) {\n      if (c.charCodeAt(c.length - 1) == 65279) {\n        c = c.substring(0, c.length - 1);\n      }\n      return c;\n    },\n    endsWith: function endsWith(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      c = this.normalize(c);\n      return c.slice(-d.length) == d;\n    },\n    endsWithIgnoreCase: function endsWithIgnoreCase(c, d) {\n      if (c == null || d == null) {\n        return false;\n      }\n      c = this.normalize(c);\n      return c.toUpperCase().slice(-d.length) == d.toUpperCase();\n    }\n  });\n  b.extend(b.easing, _defineProperty({\n    easeOutBack: function easeOutBack(f, g, e, j, i, h) {\n      if (h == undefined) {\n        h = 1.70158;\n      }\n      return j * ((g = g / i - 1) * g * ((h + 1) * g + h) + 1) + e;\n    },\n    easeInQuad: function easeInQuad(f, g, e, i, h) {\n      return i * (g /= h) * g + e;\n    },\n    easeInOutCirc: function easeInOutCirc(f, g, e, i, h) {\n      if ((g /= h / 2) < 1) {\n        return -i / 2 * (Math.sqrt(1 - g * g) - 1) + e;\n      }\n      return i / 2 * (Math.sqrt(1 - (g -= 2) * g) + 1) + e;\n    },\n    easeInOutSine: function easeInOutSine(f, g, e, i, h) {\n      return -i / 2 * (Math.cos(Math.PI * g / h) - 1) + e;\n    },\n    easeInCubic: function easeInCubic(f, g, e, i, h) {\n      return i * (g /= h) * g * g + e;\n    },\n    easeOutCubic: function easeOutCubic(f, g, e, i, h) {\n      return i * ((g = g / h - 1) * g * g + 1) + e;\n    },\n    easeInOutCubic: function easeInOutCubic(f, g, e, i, h) {\n      if ((g /= h / 2) < 1) {\n        return i / 2 * g * g * g + e;\n      }\n      return i / 2 * ((g -= 2) * g * g + 2) + e;\n    },\n    easeInSine: function easeInSine(f, g, e, i, h) {\n      return -i * Math.cos(g / h * (Math.PI / 2)) + i + e;\n    },\n    easeOutSine: function easeOutSine(f, g, e, i, h) {\n      return i * Math.sin(g / h * (Math.PI / 2)) + e;\n    }\n  }, \"easeInOutSine\", function easeInOutSine(f, g, e, i, h) {\n    return -i / 2 * (Math.cos(Math.PI * g / h) - 1) + e;\n  }));\n})(jqxBaseFramework);\n(function (b) {\n  if (b.event && b.event.special) {\n    b.extend(b.event.special, {\n      close: {\n        noBubble: true\n      },\n      open: {\n        noBubble: true\n      },\n      cellclick: {\n        noBubble: true\n      },\n      rowclick: {\n        noBubble: true\n      },\n      tabclick: {\n        noBubble: true\n      },\n      selected: {\n        noBubble: true\n      },\n      expanded: {\n        noBubble: true\n      },\n      collapsed: {\n        noBubble: true\n      },\n      valuechanged: {\n        noBubble: true\n      },\n      expandedItem: {\n        noBubble: true\n      },\n      collapsedItem: {\n        noBubble: true\n      },\n      expandingItem: {\n        noBubble: true\n      },\n      collapsingItem: {\n        noBubble: true\n      }\n    });\n  }\n  if (b.fn.extend) {\n    b.fn.extend({\n      ischildof: function ischildof(g) {\n        if (!b(this).parents) {\n          var c = g.element.contains(this.element);\n          return c;\n        }\n        var e = b(this).parents().get();\n        for (var d = 0; d < e.length; d++) {\n          if (typeof g != \"string\") {\n            var f = e[d];\n            if (g !== undefined) {\n              if (f == g[0]) {\n                return true;\n              }\n            }\n          } else {\n            if (g !== undefined) {\n              if (b(e[d]).is(g)) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n      }\n    });\n  }\n  b.fn.jqxProxy = function () {\n    var e = b(this).data().jqxWidget;\n    var c = Array.prototype.slice.call(arguments, 0);\n    var d = e.element;\n    if (!d) {\n      d = e.base.element;\n    }\n    return b.jqx.jqxWidgetProxy(e.widgetName, d, c);\n  };\n  var a = b.originalVal = b.fn.val;\n  b.fn.val = function (d) {\n    if (typeof d == \"undefined\") {\n      if (b(this).hasClass(\"jqx-widget\") || b(this).hasClass(\"jqx-input-group\")) {\n        var c = b(this).data().jqxWidget;\n        if (c && c.val) {\n          return c.val();\n        }\n      }\n      if (this[0] && this[0].tagName.toLowerCase().indexOf(\"angular\") >= 0) {\n        var c = b(this).find(\".jqx-widget\").data().jqxWidget;\n        if (c && c.val) {\n          return c.val();\n        }\n      }\n      return a.call(this);\n    } else {\n      if (b(this).hasClass(\"jqx-widget\") || b(this).hasClass(\"jqx-input-group\")) {\n        var c = b(this).data().jqxWidget;\n        if (c && c.val) {\n          if (arguments.length != 2) {\n            return c.val(d);\n          } else {\n            return c.val(d, arguments[1]);\n          }\n        }\n      }\n      if (this[0] && this[0].tagName.toLowerCase().indexOf(\"angular\") >= 0) {\n        var c = b(this).find(\".jqx-widget\").data().jqxWidget;\n        if (c && c.val) {\n          if (arguments.length != 2) {\n            return c.val(d);\n          } else {\n            return c.val(d, arguments[1]);\n          }\n        }\n      }\n      return a.call(this, d);\n    }\n  };\n  if (b.fn.modal && b.fn.modal.Constructor) {\n    b.fn.modal.Constructor.prototype.enforceFocus = function () {\n      b(document).off(\"focusin.bs.modal\").on(\"focusin.bs.modal\", b.proxy(function (c) {\n        if (this.$element[0] !== c.target && !this.$element.has(c.target).length) {\n          if (b(c.target).parents().hasClass(\"jqx-popup\")) {\n            return true;\n          }\n          this.$element.trigger(\"focus\");\n        }\n      }, this));\n    };\n  }\n  b.fn.coord = function (n) {\n    var e,\n      j,\n      i = {\n        top: 0,\n        left: 0\n      },\n      f = this[0],\n      l = f && f.ownerDocument;\n    if (!l) {\n      return;\n    }\n    e = l.documentElement;\n    if (!b.contains(e, f)) {\n      return i;\n    }\n    if (_typeof(f.getBoundingClientRect) !== undefined) {\n      i = f.getBoundingClientRect();\n    }\n    var d = function d(o) {\n      return b.isWindow(o) ? o : o.nodeType === 9 ? o.defaultView || o.parentWindow : false;\n    };\n    j = d(l);\n    var h = 0;\n    var c = 0;\n    var g = navigator.userAgent.toLowerCase();\n    var m = g.indexOf(\"ipad\") != -1 || g.indexOf(\"iphone\") != -1;\n    if (m) {\n      h = 2;\n    }\n    if (true == n) {\n      if (document.body.style.position != \"static\" && document.body.style.position != \"\") {\n        var k = b(document.body).coord();\n        h = -k.left;\n        c = -k.top;\n      }\n    }\n    return {\n      top: c + i.top + (j.pageYOffset || e.scrollTop) - (e.clientTop || 0),\n      left: h + i.left + (j.pageXOffset || e.scrollLeft) - (e.clientLeft || 0)\n    };\n  };\n  b.jqx.ripplers = [];\n  b.jqx.ripple = function (f, e, o) {\n    if (!e) {\n      e = f;\n    }\n    var h = b(f);\n    var j = false;\n    h.append(\"<span class='ink'></span>\");\n    var p = h.find(\".ink\");\n    var c = false;\n    for (var g = 0; g < b.jqx.ripplers.length; g++) {\n      var k = b.jqx.ripplers[g];\n      if (k.element[0] === f[0]) {\n        c = true;\n        break;\n      }\n    }\n    if (!c) {\n      b.jqx.ripplers.push({\n        ink: p,\n        element: f,\n        hostElement: e,\n        hostElementType: o\n      });\n    }\n    if (o === \"checkbox\" || o === \"radiobutton\") {\n      var l = Math.max(h.outerWidth(), h.outerHeight());\n      p.css({\n        height: l,\n        width: l\n      });\n      var n = h.width() / 2 - p.width() / 2;\n      var m = h.height() / 2 - p.height() / 2;\n      p.css({\n        top: m + \"px\",\n        left: n + \"px\"\n      });\n    }\n    if (b.jqx.ripplers.length === 1) {\n      b(document).on(\"mouseup\", function (r) {\n        b.jqx.ripple.mouseCaptured = false;\n        for (var q = 0; q < b.jqx.ripplers.length; q++) {\n          var d = b.jqx.ripplers[q];\n          d.ink.removeClass(\"active\");\n          d.element.removeClass(\"active\");\n          if (o !== \"checkbox\" && o !== \"radiobutton\") {\n            if (d.ink.hasClass(\"animate\")) {\n              d.ink.removeClass(\"animate\");\n            }\n          }\n        }\n      });\n    }\n    e.off(\"mousedown.ripple\");\n    e.on(\"mousedown.ripple\", function (i) {\n      var d = b(f);\n      b.jqx.ripple.mouseCaptured = true;\n      setTimeout(function () {\n        if (d.find(\".ink\").length == 0) {\n          d.append(\"<span class='ink'></span>\");\n        }\n        var r = d.find(\".ink\");\n        r.removeClass(\"animate\");\n        if (!r.height() && !r.width()) {\n          var s = Math.max(d.outerWidth(), d.outerHeight());\n          r.css({\n            height: s,\n            width: s\n          });\n        }\n        if (o === \"checkbox\" || o === \"radiobutton\") {\n          if (o === \"checkbox\") {\n            if (e.jqxCheckBox(\"disabled\")) {\n              return;\n            }\n          }\n          if (o === \"radiobutton\") {\n            if (e.jqxRadioButton(\"disabled\")) {\n              return;\n            }\n          }\n          var q = d.width() / 2 - r.width() / 2;\n          var t = d.height() / 2 - r.height() / 2;\n          r.css({\n            top: t + \"px\",\n            left: q + \"px\"\n          }).addClass(\"animate\");\n          r.on(\"animationend\", function () {\n            if (b.jqx.ripple.mouseCaptured) {\n              r.removeClass(\"animate\");\n              r.addClass(\"active\");\n              f.addClass(\"active\");\n            }\n          });\n          return;\n        }\n        var q = i.pageX - d.offset().left - r.width() / 2;\n        var t = i.pageY - d.offset().top - r.height() / 2;\n        r.css({\n          top: t + \"px\",\n          left: q + \"px\"\n        }).addClass(\"animate\");\n      });\n    });\n  };\n})(jqxBaseFramework);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/jqwidgets/jqxcore.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/jqwidgets/jqxcore.js");
/******/ 	
/******/ })()
;